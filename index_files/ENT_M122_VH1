
/*
 @name: ENT_M122 - Text Container
 @functional: https://confluence.mtvi.com/display/ENT/ENT_M122+-+Text+Container
 @styleguide: http://confluence.mtvi.com/display/ENT/Javascript+Style+Guide
 @author: $Author: fedarovs $
 */


$Crabapple.TriforceModule_ent_m122_V1_2_0 = function() {};
$Crabapple.extend($Crabapple.TriforceModule, $Crabapple.TriforceModule_ent_m122_V1_2_0, {
    viewName: '$Crabapple.TriforceView_ent_m122_V1_2_0',

    settings: {
        wrapText: false
    },

    initializeView: function () {
        var feed = this.feedResponse.result;

        this.view.setSettings(this.settings);
        this.view.generateCoreElement();
        this.view.render(feed);

        this.processSubPromos(feed.promo.relatedItems);

        if (feed.promo.links && feed.promo.links.length) {
            this.view.generatePromoLink(this.view.coreElement, feed.promo.links[0]);
        }

        this.view.setOutput();
    },

    processSubPromos: function (relatedItems) {
        var i, len;

        for (i = 0, len = relatedItems.length; i < len; i++) {
            this.renderSubModule(this.view.generateModuleWrapper(), relatedItems[i]);
        }
    }
});
/*
 @name: ENT_M122 - Text Container
 @functional: https://confluence.mtvi.com/display/ENT/ENT_M122+-+Text+Container
 @styleguide: http://confluence.mtvi.com/display/ENT/Javascript+Style+Guide
 @author: $Author: fedarovs $
 */


$Crabapple.TriforceView_ent_m122_V1_2_0 = {
    parentView: '$Crabapple.TriforceView',
    extention: {
        coreElement: null,

        settings: {
            /**
             * says should be text wrapped with in text container or not
             * @value bool
             */
            wrapText: false
        },

        setSettings: function (settings) {
            this.settings = $.extend({}, this.settings, settings);
        },

        /**
         * Generates core element
         */
        generateCoreElement: function(trackingClass) {
            if (!trackingClass && this.options && this.options.trackingClass) {
                trackingClass = this.options.trackingClass;
            }

            this.coreElement = this.getModuleWrapper(this.moduleElement, trackingClass);
        },

        /**
         * Enhances the view(in that case just sets coreElement)
         * @param coreElement
         */
        enhance: function (coreElement) {
            this.coreElement = coreElement;
        },

        /**
         * Sets output(core element) to the page
         */
        setOutput: function() {
            this.moduleElement = this.replaceModuleElement(this.moduleElement, this.coreElement);

            return this.moduleElement.show();
        },

        render: function (data) {
            this.generateModuleContent(data);
        },

        generateModuleContent: function (data) {
            var moduleContent = this.appendDom(this.coreElement, 'div', {
                    'class': 'module_content'
                }),
                promo = data.promo,
                // parentElement is moduleContent by default,
                // but if wrapText setting is passed - the text will be wrapped in container
                parentElement = moduleContent,
                imageContainerWrap,
                textContainerWrap;

            if (promo.images && promo.images.length) {
                imageContainerWrap = this.appendDom(moduleContent, 'div', {
                    'class': 's_imageContainerWrap'
                });
                this.appendImage(imageContainerWrap, promo.images[0]);
            }

            if (this.settings.wrapText) {
                textContainerWrap = this.appendDom(moduleContent, 'div', {
                    'class': 's_textContainerWrap'
                });

                parentElement = this.appendDom(textContainerWrap, 'div', {
                    'class': 's_textContainer'
                });
            }

            if(promo.tuneIn){
                var badgeWrapper = this.appendDom(parentElement, 'div', {
                    'class': 'item_label s_textContainerBadgeWrap'
                });
                this.appendDom(parentElement, 'div', {
                    'class': 's_textContainerBadge s_fonts_badge'
                }).text(promo.tuneIn);
            }

            promo.headline && this.appendDom(parentElement, 'h2', {
                'class': 'headline s_textContainerHeadline s_fonts_textContainerHeadline'
            }).text(promo.headline);

            if(promo.subHeadline){
                var h3 = this.appendDom(parentElement, 'h3', {
                    'class': 'subheadline item_label s_textContainerBadgeWrap'
                });
                this.appendDom(h3, 'span', {
                    'class': 's_textContainerBadge s_fonts_badge'
                }).text(promo.subHeadline);
            }

            promo.copy && this.appendDom(parentElement, 'p', {
                'class': 'copy s_textContainerCopy s_fonts_textContainerCopy'
            }).text(promo.copy);
        },

        generatePromoLink: function (parentElement, link) {
            this.appendDom(this.coreElement, 'a', {
                'class': 'show_more_btn s_buttons_button s_textContainerButton s_buttons_textContainerButton',
                'href': link.url
            }).text(link.text);
        },

        generateModuleWrapper: function () {
            return this.appendDom(this.coreElement, 'div');
        }
    }
};
/*
 @name: ENT_M122_VH1 - Text Container
 @functional: https://confluence.mtvi.com/display/ENT/ENT_M122_VH1+-+Text+Container
 @styleguide: http://confluence.mtvi.com/display/ENT/Javascript+Style+Guide
 @author: $Author: saterfij $
 */
$Crabapple.TriforceModule_ent_m122_vh1_V1_0_0 = {
    parentController: '$Crabapple.TriforceModule_ent_m122_V1_2_0'
};