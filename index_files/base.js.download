/*hash:ecfbd81df8a2f112d297f073d7583e2e*/var config = {
getSearchFeedURL : function () {return 'http://search.vh1.com/solr/vh1/select/?q=';},
getSiteBaseHREF : function () {return 'http://www.vh1.com/';},
getSiteAdViewability : function () {return '';},
getFacebookApiKey : function () {return '';},
getFacebookGraphFeedURL : function () {return '';},
getFacebookSiteName : function () {return '';},
getFacebookAppId : function () {return '';},
getRepoUrl : function () {return '';},
getRepoSiteName : function () {return '';},
getRepoVersion : function () {return '2';},
getRepoCodaUrl : function () {return 'http://btg.mtvnservices.com/aria/coda.html?site=vh1.com&v=3.22';},
getRepoReportingUrl : function () {return 'http://repo.cc.com/feeds/websites/vh1.com/pages';},
getRepoBoxAdMobile : function () {return '1';},
getRepoBoxAdTablet : function () {return '1';},
getTwitterKey : function () {return '0zBKOd6FJsqRehJufopNQ';},
getTwitterUserDataURL : function () {return 'http://search.twitter.com/search.json?callback=?&rpp=1&q=from%3A';},
getTwitterBaseHref : function () {return 'http://search.twitter.com/search.json';},
getTweetRiverUrl : function () {return 'http://tweetriver.com/';},
getTweetRiverFeed : function () {return '';},
getTweetRiverType : function () {return 'json';},
getMediaMissingImage : function () {return 'https://vh1.mtvnimages.com/images/lyricsmode-vh1_100x100.jpg';},
getMediaConfigParamSite : function () {return 'vh1.com';},
getTriforceScriptLoader : function () {return '/media/triforce/';},
getPlayerContentsidsVideo : function () {return 'VH1_Video';},
getPlayerContentsidsEpisode : function () {return 'VH1_Video';},
getPlayerContentsidsPlaylist : function () {return 'VH1_Video';},
getPlayerContentsidsFight : function () {return '';},
getTriforceGlobalZones : function () {return '';},
getTriforceManifestFeed : function () {return '/feeds/triforce/manifest/v5';}
};
window.TriforceConfiguration = {"globalZones":["header","footer","ads-reporting","ENT_M145","ENT_M171"],"manifestFeed":"http:\/\/www.vh1.com\/feeds\/triforce\/manifest\/v8","scriptConcatenator":"http:\/\/www.vh1.com\/media\/module\/","priorityTimeout":"300","stragglersTimeout":"3000","tierWrapper":"true","playerScript":"http:\/\/media.mtvnservices.com\/edge\/player\/edgeplayer-2.4.1.min.js"};

/**
 * jQuery Cookie plugin
 *
 * Copyright (c) 2010 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
jQuery.cookie = function (key, value, options) {

    // key and at least value given, set cookie...
    if (arguments.length > 1 && String(value) !== "[object Object]") {
        options = jQuery.extend({}, options);

        if (value === null || value === undefined) {
            options.expires = -1;
        }

        if (typeof options.expires === 'number') {
            var days = options.expires, t = options.expires = new Date();
            t.setDate(t.getDate() + days);
        }

        value = String(value);

        return (document.cookie = [
            encodeURIComponent(key), '=',
            options.raw ? value : encodeURIComponent(value),
            options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
            options.path ? '; path=' + options.path : '',
            options.domain ? '; domain=' + options.domain : '',
            options.secure ? '; secure' : ''
        ].join(''));
    }

    // key and possibly options given, get cookie...
    options = value || {};
    var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;
    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
};

/*
 * jQuery Namespace
 * Use namespaces to protect your global integrity.
 * Creates new object (namespace) within JQuery / JQuery.fn
 */
(function ($) {
    var methods = {};

    /**
     * This one defines namespace
     */
    $.namespace = function (ns) {

        methods[ns] = methods[ns] || {};

        // getting reference to a namespaced jquery object
        function nsfun(selector, context) {
            return $(selector, context).namespace(ns);
        }

        // adding methods to FN (using namespaces in jquery plugins)
        nsfun.fn = methods[ns];

        return nsfun;
    };

    /**
     * Function that allows using namespaces in jQuery plugins
     */
    $.fn.namespace = function (ns) {
        if (methods[ns]) {
            $.extend(this, methods[ns]);
        }
        return this;
    };
})(jQuery);
/**
 * Creates $Crabapple global object which will hold all crabapple core javascript
 */
(function ($) {
    $Crabapple = $.namespace('Crabapple');
})(jQuery);

/**
 * Crabapple Class class is a base parent class for all classes
 * //TODO DOC all features of this class
 */
(function ($) {
    $Crabapple.Class = function () {
    };

    /**
     * Type hierarchy class.
     *
     * This class helps us navigate through type hierarchy.
     *
     * @class
     * @memberOf $Crabapple.Class
     * @param type
     */
    var Hierarchy = $Crabapple.Class.Hierarchy = function (/** Function */type) {
        this.type = type;
    };
    /**
     * @param type
     * @returns Fluent interface
     */
    Hierarchy.prototype.set = function (/** Function */type)/** Hierarchy */ {
        this.type = type;
        return this;
    };
    /**
     * @param cb callback will receive ancestor
     * @returns Fluent interface
     */
    Hierarchy.prototype.map = function (/** Function */cb)/** Hierarchy */ {
        var stack = this.stack = [];
        for (var ancestor = this.type.prototype; 'parentClass' in ancestor; ancestor = ancestor.parentClass) {
            if (false !== cb(ancestor)) {
                stack.push(ancestor);
            }
        }
        return this;
    };
    /**
     * @param cb callback will receive all matched ancestor and should return array with filtered ancestors
     * @returns Fluent interface
     */
    Hierarchy.prototype.reduce = function (/** Function */cb)/** Hierarchy */ {
        this.stack = cb(this.stack);
        return this;
    };
    /**
     * @param cb callback will receive ancestor
     * @returns Fluent interface
     */
    Hierarchy.prototype.apply = function (/** Function */cb)/** Hierarchy */ {
        var stack = this.stack;
        for (var i = stack.length - 1; i > -1; --i) {
            cb(stack[i]);
        }
        return this;
    };

    /**
     * Create a new Class that inherits from this class.
     *
     * Merge 'options' and 'requires' properties.
     *
     * @param parent parent class to extends
     * @param child new child class
     * @param [o] options to add to child's prototype
     */
    $Crabapple.extend = function (/** Function */parent, /** Function */child, /** Object */o) {
        o = o || {};
        var fn = function () {
        };

        fn.prototype = parent.prototype;
        child.prototype = new fn();
        child.prototype.parentClass = parent.prototype;
        child.prototype.constructor = child;

        for (var key in o) {
            child.prototype[key] = o[key];
        }

        var h = new Hierarchy(child).map(function (ancestor) {
            return 'options' in ancestor;

        }).apply(function (ancestor) {
            $.extend(child.prototype.options, ancestor.options);
        });

        h.set(child).map(function (ancestor) {
            return 'requires' in ancestor;

        }).apply(function (ancestor) {
            $.extend(child.prototype.requires, ancestor.requires);
        });
    };

    /**
     * Instantiate new instance of specified type.
     *
     * Calls init() methods step-by-step.
     *
     * @param type type to instantiate
     * @param args arguments for init() method
     * @returns initialized new instance of type
     */
    $Crabapple.instantiate = function (/** Function */type, /** Array */args)/** Object */ {
        var o = new type();
        new Hierarchy(type).map(function (ancestor) {
            if (ancestor.hasOwnProperty) {
                return ancestor.hasOwnProperty('init');
            } else {
                return 'init' in ancestor;
            }
        }).apply(function (ancestor) {
            ancestor.init.apply(o, args);
        });
        return o;
    };

})(jQuery);


(function () {
    /**
     * @namespace Holds Crabapple utils methods
     */
    $Crabapple.utils = {};

    $Crabapple.utils.DateTime = {};
    $Crabapple.utils.DateTime.currentDate = false;
    $Crabapple.utils.DateTime.format = function (format) {
        var returnStr = '';
        var replace = this.replaceChars;
        for (var i = 0; i < format.length; i++) {
            var curChar = format.charAt(i);
            if (i - 1 >= 0 && format.charAt(i - 1) == "\\") {
                returnStr += curChar;
            }
            else if (replace[curChar]) {
                returnStr += replace[curChar].call(this);
            } else if (curChar != "\\") {
                returnStr += curChar;
            }
        }

        return returnStr;
    };

    $Crabapple.utils.DateTime.replaceChars = {
        shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        longMonths: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        longDays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],

        // Day
        d: function () {
            return (this.currentDate.getDate() < 10 ? '0' : '') + this.currentDate.getDate();
        },
        D: function () {
            return this.replaceChars.shortDays[this.currentDate.getDay()];
        },
        j: function () {
            return this.currentDate.getDate();
        },
        l: function () {
            return this.replaceChars.longDays[this.currentDate.getDay()];
        },
        N: function () {
            return this.currentDate.getDay() + 1;
        },
        S: function () {
            return (this.currentDate.getDate() % 10 == 1 && this.currentDate.getDate() != 11 ? 'st' : (this.currentDate.getDate() % 10 == 2 && this.currentDate.getDate() != 12 ? 'nd' : (this.currentDate.getDate() % 10 == 3 && this.currentDate.getDate() != 13 ? 'rd' : 'th')));
        },
        w: function () {
            return this.currentDate.getDay();
        },
        z: function () {
            var d = new Date(this.currentDate.getFullYear(), 0, 1);
            return Math.ceil((this.currentDate - d) / 86400000);
        }, // Fixed now
        // Week
        W: function () {
            var d = new Date(this.currentDate.getFullYear(), 0, 1);
            return Math.ceil((((this.currentDate - d) / 86400000) + d.getDay() + 1) / 7);
        }, // Fixed now
        // Month
        F: function () {
            return this.replaceChars.longMonths[this.currentDate.getMonth()];
        },
        m: function () {
            return (this.currentDate.getMonth() < 9 ? '0' : '') + (this.currentDate.getMonth() + 1);
        },
        M: function () {
            return this.replaceChars.shortMonths[this.currentDate.getMonth()];
        },
        n: function () {
            return this.currentDate.getMonth() + 1;
        },
        t: function () {
            var d = new Date();
            return new Date(d.getFullYear(), d.getMonth(), 0).getDate();
        }, // Fixed now, gets #days of date
        // Year
        L: function () {
            var year = this.currentDate.getFullYear();
            return (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0));
        },   // Fixed now
        o: function () {
            var d = new Date(this.currentDate.valueOf());
            d.setDate(d.getDate() - ((this.currentDate.getDay() + 6) % 7) + 3);
            return d.getFullYear();
        }, //Fixed now
        Y: function () {
            return this.currentDate.getFullYear();
        },
        y: function () {
            return ('' + this.currentDate.getFullYear()).substr(2);
        },
        // Time
        a: function () {
            return this.currentDate.getHours() < 12 ? 'am' : 'pm';
        },
        A: function () {
            return this.currentDate.getHours() < 12 ? 'AM' : 'PM';
        },
        B: function () {
            return Math.floor((((this.currentDate.getHours() + 1) % 24) + this.currentDate.getMinutes() / 60 + this.currentDate.getSeconds() / 3600) * 1000 / 24);
        }, // Fixed now
        g: function () {
            return this.currentDate.getHours() % 12 || 12;
        },
        G: function () {
            return this.currentDate.getHours();
        },
        h: function () {
            return ((this.currentDate.getHours() % 12 || 12) < 10 ? '0' : '') + (this.currentDate.getHours() % 12 || 12);
        },
        H: function () {
            return (this.currentDate.getHours() < 10 ? '0' : '') + this.currentDate.getHours();
        },
        i: function () {
            return (this.currentDate.getMinutes() < 10 ? '0' : '') + this.currentDate.getMinutes();
        },
        s: function () {
            return (this.currentDate.getSeconds() < 10 ? '0' : '') + this.getSeconds();
        },
        u: function () {
            var m = this.currentDate.getMilliseconds();
            return (m < 10 ? '00' : (m < 100 ? '0' : '')) + m;
        },
        // Timezone
        e: function () {
            return "Not Yet Supported";
        },
        I: function () {
            return "Not Yet Supported";
        },
        O: function () {
            return (-this.currentDate.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.currentDate.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.currentDate.getTimezoneOffset() / 60)) + '00';
        },
        P: function () {
            return (-this.currentDate.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.currentDate.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.currentDate.getTimezoneOffset() / 60)) + ':00';
        }, // Fixed now
        T: function () {
            var m = this.currentDate.getMonth();
            this.currentDate.setMonth(0);
            var result = this.currentDate.toTimeString().replace(/^.+ \(?([^\)]+)\)?$/, '$1');
            this.currentDate.setMonth(m);
            return result;
        },
        Z: function () {
            return -this.currentDate.getTimezoneOffset() * 60;
        },
        // Full Date/Time
        c: function () {
            return this.format("Y-m-d\\TH:i:sP");
        }, // Fixed now
        r: function () {
            return this.currentDate.toString();
        },
        U: function () {
            return this.currentDate.getTime() / 1000;
        }
    };

    /**
     * "2009-04-29 08:53:31" => relative time format
     * "2009-04-29T08:53:31+0000" => relative time format
     * object Date => relative time format
     */
    $Crabapple.utils.DateTime.relativeTime = function (originalDate) {
        formatPattern = (arguments[1] && arguments[1].length > 0) ? arguments[1] : "F d, Y";
        if (originalDate instanceof Date) {
            this.currentDate = originalDate;
        } else {
            currentDate = (originalDate || "").replace(/-/g, "/").replace(/TZ/g, " ").replace(/\+(\w+)/g, "");
            this.currentDate = new Date(currentDate);
        }

        var diff = (((new Date()).getTime() - this.currentDate.getTime()) / 1000);
        var day_diff = Math.floor(diff / 86400);

        if (isNaN(day_diff) || day_diff < 0)
            return;

        return day_diff == 0 && (
            diff < 60 && "just now" ||
            diff < 120 && "1 minute ago" ||
            diff < 3600 && Math.floor(diff / 60) + " minutes ago" ||
            diff < 7200 && "1 hour ago" ||
            diff < 86400 && Math.floor(diff / 3600) + " hours ago") ||
            day_diff == 1 && "Yesterday" ||
            day_diff < 7 && day_diff + " days ago" ||
            day_diff < 30 && (Math.ceil(day_diff / 7) > 1 ? Math.ceil(day_diff / 7) + " weeks ago" : "1 week ago") ||
            day_diff < 365 && (Math.floor(day_diff / 30) > 1 ? Math.floor(day_diff / 30) + " months ago" : "1 month ago") ||
            this.format(formatPattern);
    };


    /**
     * replace links in text to their html compliance
     */
    $Crabapple.utils.linkToHtml = function (elm) {
        var returning = [];
        var regexp = /((ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?)/gi;
        elm.each(function () {
            returning.push(this.replace(regexp, "<a href=\"$1\">$1</a>"));
        });

        return jQuery(returning);
    };
})(jQuery);

// Avoid `console` errors in browsers that lack a console.
(function () {
    var method;
    var noop = function () {
    };
    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
        'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());


(function ($) {
    $Crabapple.TriforceDebug_v1 = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceDebug_v1, {
        sprite: '/webclient/mike/megaman_sprite.png',
        background: "#FFFFFF",
        currentFrame: 0,
        elm: null,
        po: null,
        animation: [
            'megaman-0',
            'megaman-1',
            'megaman-2',
            'megaman-3',
            'megaman-4',
            'megaman-5',
            'megaman-6',
            'megaman-7'
        ],
        init: function () {
            this.hasAuthCookie();
        },
        cleanup: function () {
            $('li[data-mode="modes.debug.sections.crap"] .switch').trigger('click');
            $('body').attr('style', '');
            $('head').append('<link rel="stylesheet" type="text/css" href="/media/base.css?r=' + Math.floor(Math.random() * 1000000) + '" />');
        },
        debugEnabled: function () {
            var cookie = $.cookie("crabappleInformation");
            var info = JSON.parse(cookie);
            return this.hasMode('modes.debug.sections.javascript', info);
        },
        hasMode: function (mode, info) {
            var parts = mode.split('.'),
                tmp = info;
            if (tmp == null) return false;

            for (var i = 0; i < parts.length - 1; i++) {
                if (tmp[parts[i]] != null && tmp[parts[i]]) tmp = tmp[parts[i]];
                else return false;
            }
            return tmp[parts[i]];
        },
        drawModule: function () {
            $.ajaxSetup({cache: true});
            var self = this;
            var body = $('body');
            body.append('<div id="triforce_debug"></div>');
            this.elm = $('#triforce_debug');
            this.elm.html(this.getHTML());
            this.fetchManifests();
            this.fetchArcStages();
            this.startAnimation();

            this.elm.find('.corner').on('click', function (event) {
                event.preventDefault();
                if ($(this).hasClass('stopped')) {
                    $(this).removeClass('stopped');
                    self.startAnimation();
                    self.hideOverlay();
                }
                else {
                    $(this).addClass('stopped');
                    self.stopAnimation();
                    self.showOverlay();
                }
            });

            this.elm.find('.page-clear').on('click', function () {
                if (self.po) {
                    self.po.clear();
                } else {
                    $.getScript('/triforce/debug/page-clear').done(function () {
                        self.po = new $Crabapple.PageClear();
                        self.po.showOverlay();
                    });
                }
            });

            this.elm.find('.showMore').on('click', function (event) {
                event.preventDefault();
                if (self.elm.find('.moreOptions').hasClass('visible')) {
                    self.elm.find('.moreOptions').removeClass('visible').hide();
                    $(this).text('More Options');
                } else {
                    self.elm.find('.moreOptions').addClass('visible').show();
                    $(this).text('Fewer Options');
                }
            });

            this.elm.find('div.manifest select').on('change', function () {
                var manifest = $(this).val();
                self.setCurrentManifest(manifest);
            });

            this.elm.find('div.arcStageOverride select').on('change', function () {
                var stage = $(this).val();
                self.setCurrentArcStage(stage);
            });

            this.elm.find('div.logout').on('click', function (event) {
                event.preventDefault();
                $.cookie('crabappleAuthorization', null, {path: '/'});
                $.cookie('crabappleAuthorizationName', null, {path: '/'});
                $.cookie('crabappleInformation', null, {path: '/'});
                window.location.reload();
            });

            var cookie = $.cookie('crabappleInformation');
            if (cookie) {
                cookie = JSON.parse(cookie);
            }
            if (cookie && cookie.modes && cookie.modes.sme) {
                $.getScript('/__crabapple_admin/js/sme/v1_0_0/sme.js', function () {
                    $Crabapple.SME.init();
                });
            }

            this.elm.find('.switch').on('click', function () {
                var mode = $(this).parents('li').attr('data-mode');
                var crabappleInformation = $.cookie('crabappleInformation');
                if (crabappleInformation)
                    var crabappleInformationObject = JSON.parse(crabappleInformation);

                else {
                    var crabappleInformationObject = {
                        'modes': {
                            'manifest': 'production',
                        },
                        'configuration': {}
                    };
                }
                if ($(this).hasClass('on')) {
                    $(this).removeClass('on');
                    self.setModeValue(mode, false, crabappleInformationObject);
                    if (mode.indexOf('sme') > 0) {
                        if ($Crabapple.SME) {
                            $Crabapple.SME.destroy();
                        }
                    }
                }
                else {
                    $(this).addClass('on');
                    if (mode.indexOf('crap') >= 0) {
                        $('head').find('link').each(function () {
                            var href = $(this).attr('href');
                            if (href.indexOf('base.css') >= 0) $(this).remove();
                        });
                        $('body').attr('style', 'font-family:"comic sans ms" !important;background:url("http://thecatapi.com/api/images/get?format=src&type=gif") repeat;');
                        setTimeout(function () {
                            self.cleanup();
                        }, 5000);
                    } else if (mode.indexOf('sme') > 0) {
                        $.getScript('/__crabapple_admin/js/sme/v1_0_0/sme.js', function () {
                            $Crabapple.SME.init();
                        });

                    }
                    self.setModeValue(mode, true, crabappleInformationObject);
                }
                $.cookie('crabappleInformation', JSON.stringify(crabappleInformationObject), {path: '/'});
            });

            $('#triforceStandAloneFragment').on('click', function (event) {

                for (var zone in triforceManifestFeed.zones) {
                    var standAlone_url = '/triforce/module_debug/' + triforceManifestFeed.zones[zone].moduleName + '?feedUrl=' + triforceManifestFeed.zones[zone].feed + '&crabappleErrors=true',
                        html = '';

                    if (zone.replace('_promo', '') == zone) {
                        html += '<a title="' + zone + '" class="standalone_debug" target="_blank" href="' + standAlone_url + '">' + zone + ': ' + triforceManifestFeed.zones[zone].moduleName + ' </a>';
                    } else {
                        html += '<a title="' + zone + '" class="standalone_debug" target="_blank" href="' + standAlone_url + '">' + zone + ': ' + triforceManifestFeed.zones[zone].moduleName + ' </a>';
                    }
                    $('body').prepend(html);
                }

            });
        },
        setModeValue: function (mode, value, o) {
            var parts = mode.split('.');
            for (var i = 0, tmp = o; i < parts.length - 1; i++) {
                if (!tmp[parts[i]]) {
                    tmp = tmp[parts[i]] = {};
                }
                else {
                    tmp = tmp[parts[i]];
                }
            }
            tmp[parts[i]] = value;
            return o;
        },
        getHTML: function () {
            var self = this;
            var html = '';
            html += '<div class="corner">';
            html += '	<div class="megaman ' + self.animation[self.currentFrame] + '">';
            html += '	</div>';
            html += '</div>';
            html += '<div class="triforce_overlay">';
            html += '   <div class="manifest"></div>';
            html += '   <div class="arcStageOverride"></div>';
            html += '	<button class="page-clear">Clear This Page</button>';
            html += '	<div class="showMore">More Options</div>';
            html += '	<ul class="moreOptions" style="display:none;">';
            html += '		<li data-mode="modes.debug.sections.javascript" class="debug"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Debug</div></li>';
            html += '		<li data-mode="modes.cache.refreshObjects" class="cache"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Cache Refresh</div></li>';
            html += '		<li data-mode="modes.cdn.akamai.clearRequests" class="akamai"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Akamai Clear</div></li>';
            html += '		<li data-mode="modes.cache.refreshFeeds" class="feed"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Feed Refresh</div></li>';
            if (config.getTriforceDebugPageClearButton && config.getTriforceDebugPageClearButton() == "1") {
                html += '		<li class="feed"><div class="standalone_debug" id="triforceCacheClearButton">Clear Page Cache</div></li>';
            }
            if (config.getSmeEnabled && config.getSmeEnabled() == "1") {
                html += '		<li data-mode="modes.sme" class="feed"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">SME</div></li>';
            }
            html += '		<li data-mode="modes.debug.sections.crap" class="feed"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">MEOW!</div></li>';
            html += '	<div class="standalone_debug" id="triforceStandAloneFragment">StandAlone fragment</div>';
            html += '	</ul>';
            html += '   <div class="logout">Logout</div>';
            html += '</div>';
            return html;
        },
        hasAuthCookie: function () {
            var self = this;
            if (document.cookie.indexOf('crabappleAuthorization') > -1) {
                $.getJSON('/debugbar', function (response) {
                    if (response && response.access) {
                        self.drawModule();
                        var cookie = $.cookie('crabappleInformation');
                        if (cookie) {
                            var info = JSON.parse(cookie);
                            self.elm.find('li[data-mode]').each(function () {
                                if (self.hasMode($(this).attr('data-mode'), info)) {
                                    $(this).find('.switch').addClass('on');
                                    if ($(this).attr('data-mode').indexOf('crap') >= 0) {
                                        $(this).find('.switch').removeClass('on');
                                    }
                                }
                            });
                        }
                    }
                });
                return true;
            }
            return false;
        },
        nextFrame: function () {
            var self = this;
            var timeout = 100;
            var previousFrame = self.currentFrame;
            if (self.currentFrame + 1 == self.animation.length) {
                self.currentFrame = 0;
            }
            else {
                self.currentFrame++;
            }

            if (self.currentFrame + 1 == self.animation.length) {
                timeout = 1000;
            }
            var megaman = self.elm.find('.megaman');
            if (megaman.hasClass('stopped')) return;
            megaman.removeClass(self.animation[previousFrame]).addClass(self.animation[self.currentFrame]);
            setTimeout(function () {
                self.nextFrame();
            }, timeout);
        },
        startAnimation: function () {
            var self = this;
            var megaman = self.elm.find('.megaman');
            megaman.removeClass('stopped');
            setTimeout(function () {
                self.nextFrame();
            }, 100);
        },
        stopAnimation: function () {
            var self = this;
            var megaman = self.elm.find('.megaman');
            megaman.removeClass(self.animation[self.currentFrame]);
            self.currentFrame = 0;
            megaman.addClass('stopped');
        },
        showOverlay: function () {
            this.elm.find('.triforce_overlay').fadeIn('fast');
        },
        hideOverlay: function () {
            this.elm.find('.triforce_overlay').fadeOut('fast');
        },
        fetchManifests: function () {
            var self = this,
                currentManifest = this.getCurrentManifest();
            this.elm.find('div.manifest').append('Manifest: <select name="modes.manifest"></select>');
            $.getJSON('/__crabapple_admin/manifest/ajax/list', function (response) {
                if (response.result) {
                    for (var i in response.result) {
                        if (response.result[i].id == currentManifest) {
                            self.elm.find('div.manifest select').append('<option value="' + response.result[i].id + '" selected>' + response.result[i].name + '</option>');
                        }
                        else {
                            self.elm.find('div.manifest select').append('<option value="' + response.result[i].id + '">' + response.result[i].name + '</option>');
                        }

                    }
                }
            });
        },
        getCurrentManifest: function () {
            var cookie = $.cookie('crabappleInformation');
            cookie = JSON.parse(cookie);
            if (cookie != null && cookie.modes && cookie.modes.manifest) return cookie.modes.manifest;
            return "production";
        },
        setCurrentManifest: function (manifest) {
            var cookie = $.cookie('crabappleInformation');
            cookie = JSON.parse(cookie);
            if (cookie == null) {
                cookie = {
                    'modes': {
                        'manifest': ''
                    },
                    'configuration': {}
                };
            }
            if (cookie.modes && cookie.modes.manifest) {
                cookie.modes.manifest = manifest;
            }
            else if (cookie.modes) {
                cookie.modes.manifest = manifest;
            }
            else {
                cookie.modes = {
                    "manifest": manifest
                };
            }

            if (localStorage && localStorage.clear) {
                localStorage.clear();
            }

            $.cookie('crabappleInformation', JSON.stringify(cookie), {path: '/'});
        },
        fetchArcStages: function () {
            var self = this,
                currentArcStage = this.getCurrentArcStage();
            this.elm.find('div.arcStageOverride').append('Arc Stage: <select name="modes.arcStage"></select>');
            var arcStagesAvailable = [
                {id: 'default', name: 'Site Default'},
                {id: 'live', name: 'Live'},
                {id: 'staging', name: 'Staging'},
                {id: 'authoring', name: 'Authoring'}
            ];
            for (var stage in arcStagesAvailable) {
                var selected = '';
                if (arcStagesAvailable[stage].id == currentArcStage) {
                    selected = ' selected="selected"';
                }

                self.elm.find('div.arcStageOverride select').append('<option value="' + arcStagesAvailable[stage].id + '"' + selected + '>' + arcStagesAvailable[stage].name + '</option>');
            }
        },
        getCurrentArcStage: function () {
            var cookie = $.cookie('crabappleInformation');
            cookie = JSON.parse(cookie);
            if (cookie != null && cookie.modes && cookie.modes.arcStage) return cookie.modes.arcStage;
            return "default";
        },
        setCurrentArcStage: function (arcStage) {
            var cookie = $.cookie('crabappleInformation');
            cookie = JSON.parse(cookie);
            if (cookie == null) {
                cookie = {
                    'modes': {
                        'arcStage': ''
                    },
                    'configuration': {}
                };
            }
            if (cookie.modes && cookie.modes.arcStage) {
                cookie.modes.arcStage = arcStage;
            }
            else if (cookie.modes) {
                cookie.modes.arcStage = arcStage;
            }
            else {
                cookie.modes = {
                    "arcStage": arcStage
                };
            }
            if (localStorage && localStorage.clear) {
                localStorage.clear();
            }

            $.cookie('crabappleInformation', JSON.stringify(cookie), {path: '/'});
        }
    });
})(jQuery);


(function ($, w) {
    $Crabapple.TriforceImageBroker = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceImageBroker, {
        _deferredImages: null,
        devicePixelRatio: null,

        init: function () {
            this._deferredImages = [];
            this.devicePixelRatio = w.devicePixelRatio || 1;

            this.addEvents();
            this.processDeferredImages();
        },

        processDeferredImages: function () {
            var images = document.querySelectorAll('.image_holder.deferred');

            for (var i = 0, len = images.length; i < len; i++) {
                w.Triforce.getMediator().trigger('triforce:queueimage', {
                    'holder': images[i],
                    'info': JSON.parse(images[i].getAttribute('data-info'))
                });
            }
        },

        addEvents: function () {
            var self = this,
                mediator = w.Triforce.getMediator();

            mediator.on('triforce:queueimage', function (event) {
                var imageToQueue = event[1];

                if (imageToQueue && imageToQueue.holder) {
                    $(imageToQueue.holder).on('loadImage', function () {
                        window.Triforce.getMediator().trigger('triforce:loadqueuedimage', imageToQueue);
                    });
                    self._deferredImages.push(imageToQueue);
                }
            });
            mediator.on('triforce:loadqueuedimage', function (event) {
                self.checkDeferredImage(event[1]);
            });

            mediator.on('triforce:rendercomplete', function () {
                self.removeDeferredImage();
            });

            mediator.on('triforce:module:rendered triforce:pagerendercomplete triforce:pageintouch', function () {
                self.checkDeferredImages();
            });

            var scrollCounter = 1,
                scrollTimeoutId;

            $(w).on('ontouchmove' in w ? 'touchmove scroll' : 'scroll', function () {
                clearTimeout(scrollTimeoutId);
                if (scrollCounter % 10 === 0) {
                    scrollCounter = 1;
                    mediator.trigger('triforce:pageintouch');
                }
                scrollCounter++;
                scrollTimeoutId = setTimeout(function () {
                    mediator.trigger('triforce:pageintouch');
                }, 50);
            });

            var resizeTimeoutId;

            $(w).on('resize', function () {
                clearTimeout(resizeTimeoutId);
                resizeTimeoutId = setTimeout(function () {
                    self.checkDeferredImages();
                }, 200);
            });
        },

        removeDeferredImage: function () {
            var deferredImages = [];
            for (var i = 0, len = this._deferredImages.length; i < len; i++) {
                if (!document.body.contains(this._deferredImages[i].holder)) {
                    continue;
                }
                deferredImages.push(this._deferredImages[i]);
            }

            this._deferredImages = deferredImages;
        },

        checkDeferredImages: function () {
            for (var i = 0, len = this._deferredImages.length; i < len; i++) {
                if (this.isVisible(this._deferredImages[i].holder)) {
                    this.checkDeferredImage(this._deferredImages[i]);
                } else {
                    if (this._deferredImages[i].image && this._deferredImages[i].image.src.indexOf('.gif') >= 1) {
                        if (this._deferredImages[i].image.src.indexOf('?format=jpg') < 0) {
                            this._deferredImages[i].image.src = this._deferredImages[i].image.src + '?format=jpg';
                        }
                    }
                }
            }
        },

        checkDeferredImage: function (image) {
            if (image) {
                if (!image.processed) {
                    this.processLoadingImage(image);
                } else {
                    this.processReloadingImage(image);
                }
            }
        },

        processLoadingImage: function (deferredImage) {
            var image = deferredImage.image = new Image(),
                imageDimensions = {
                    width: deferredImage.holder.clientWidth,
                    height: deferredImage.holder.clientHeight
                },
                imageInformation = deferredImage.source = this.getAppropriateImage(deferredImage.info, imageDimensions);

            imageInformation.original && this.getImageDimensions(imageDimensions, imageInformation.original);

            // Store information about the currently selected image dimensions
            deferredImage.width = imageDimensions.width;
            if (imageDimensions.height) {
                deferredImage.height = imageDimensions.height;
                deferredImage.aspectRatio = this.getAspectRatio(imageDimensions);
            }

            image.className = 'image';
            image.onload = function () {
                if ('classList' in deferredImage.holder) {
                    deferredImage.holder.classList.remove('deferred');
                } else {
                    var classes = deferredImage.holder.className.split(' '),
                        index = classes.indexOf('deferred');

                    if (index !== -1) {
                        classes.splice(index, 1);
                        deferredImage.holder.className = classes.join(' ');
                    }
                }
            };
            image.src = this.getImageURL(imageInformation.src, {
                width: deferredImage.width,
                height: deferredImage.height,
                quality: imageInformation.quality
            });

            image.alt = imageInformation.alt ? imageInformation.alt : "";

            deferredImage.holder.appendChild(image);
            deferredImage.processed = true;
        },

        processReloadingImage: function (imageObject) {
            var imageDimensions = {
                    width: imageObject.holder.clientWidth,
                    height: imageObject.holder.clientHeight
                },
                imageInformation = this.getAppropriateImage(imageObject.info, imageDimensions),
                sourceChanged = imageObject.source !== imageInformation,
                aspectRatio,
                image;

            imageObject.source = imageInformation;

            imageInformation.original && this.getImageDimensions(imageDimensions, imageInformation.original);

            // If image was initially loaded based on some aspect ratio - we need to check if it's still persist.
            // So we calculate it
            if (imageObject.aspectRatio) {
                aspectRatio = this.getAspectRatio(imageDimensions);
            }

            // We need to reload the image in cases if the source changed/its width or height is not enough or aspect ratio changed
            if (sourceChanged
                || imageDimensions.width > imageObject.width
                || (imageObject.height && (imageDimensions.height > imageObject.height || aspectRatio !== imageObject.aspectRatio))) {
                // Update inforamtion about currently selected image
                imageObject.width = imageDimensions.width;
                if (imageObject.height) {
                    imageObject.height = imageDimensions.height;
                    imageObject.aspectRatio = aspectRatio;
                }

                image = new Image();

                image.className = 'image';
                image.onload = function () {
                    imageObject.holder.replaceChild(image, imageObject.image);
                    imageObject.image = image;
                };
                image.src = this.getImageURL(imageInformation.src, {
                    width: imageObject.width,
                    height: imageObject.height,
                    quality: imageInformation.quality
                });
                if (imageInformation.alt) {
                    image.alt = imageInformation.alt;
                } else {
                    image.alt = "";
                }

            }

            if (imageObject.image && imageObject.image.src && imageObject.image.src.indexOf('.gif?format=jpg') > 0) {
                imageObject.image.src = imageObject.image.src.replace('.gif?format=jpg', '.gif');
            }


        },

        getImageURL: function (src, params) {
            var resizeParams = [];

            // We don't resize GIFs, as ImageServer doesn't support it
            if (src.toLowerCase().indexOf('.gif') !== -1) {
                return src;
            }

            if (params.quality) {
                resizeParams.push('quality=' + params.quality);
            }

            if (params.width) {
                resizeParams.push('width=' + params.width);
            }

            if (params.height) {
                resizeParams.push('height=' + params.height);
            }

            // If both width & height are passed - it signalizes us that we need to crop it
            if (params.width && params.height) {
                resizeParams.push('crop=true');
            }

            if (resizeParams.length) {
                src += (src.indexOf('?') !== -1 ? '&' : '?') + resizeParams.join('&');
            }

            return src;
        },

        getAppropriateImage: function (images, dimensions) {
            var i, len,
                bestImage,
                bestAspectRatioDiff,
                image,
                aspectRatioDiff,
                requiredAspectRatio;

            if (images instanceof Array) {
                if (images.length > 1) {
                    requiredAspectRatio = this.getAspectRatio(dimensions);

                    for (i = 0, len = images.length; i < len; i++) {
                        image = images[i];

                        // Unfortunately there's no information about the image, so we can't really determine if it's OK
                        if (!image || !image.original) {
                            continue;
                        }

                        // Let's calculate the difference between aspect ratio we need and one that image has
                        // So we can find out which one would be better to use to fill that space
                        aspectRatioDiff = requiredAspectRatio - this.getAspectRatio(image.original);
                        if (aspectRatioDiff < 0) {
                            aspectRatioDiff *= -1;
                        }

                        // Check if the best image we've found by that point isn't better than one that we're looking at atm:
                        //   * current image is closer to the aspect ratio we need and has enough width
                        //   * current image has the same aspect ratio as the best one we've found so far, but has larger width
                        //   * current image has enough width, when best image candidate - doesn't
                        if (!bestImage || bestAspectRatioDiff > aspectRatioDiff && image.original.width - dimensions.width >= 0
                            || aspectRatioDiff === bestAspectRatioDiff && image.original.width > bestImage.original.width
                            || image.original.width - dimensions.width >= 0 && bestImage.original.width - dimensions.width < 0) {
                            bestImage = image;
                            bestAspectRatioDiff = aspectRatioDiff;
                        }
                    }

                    return bestImage;
                } else {
                    return images[0];
                }
            } else {
                return images;
            }
        },

        getImageDimensions: function (dimensions, originalDimensions) {
            var aspectRatioRounded = this.getAspectRatio(dimensions),
                aspectRatio = this.getAspectRatio(dimensions, true);

            if (this.devicePixelRatio > 1) {
                dimensions.width = Math.ceil(this.devicePixelRatio * dimensions.width);
                dimensions.height = Math.ceil(this.devicePixelRatio * dimensions.height);
            }

            if (!dimensions.width || dimensions.width > originalDimensions.width) {
                dimensions.width = originalDimensions.width;
            }

            if (dimensions.height && dimensions.height > originalDimensions.height) {
                dimensions.height = originalDimensions.height;
            }

            if (originalDimensions.aspectRatio !== null) {
                originalDimensions.aspectRatio = this.getAspectRatio(originalDimensions);
            }

            if (originalDimensions.aspectRatio) {
                if (originalDimensions.aspectRatio > aspectRatioRounded) {
                    dimensions.width = Math.ceil(dimensions.height * aspectRatio);
                } else {
                    dimensions.height = Math.ceil(dimensions.width / aspectRatio);
                }
            }
        },

        getAspectRatio: function (dimension, notRound) {
            var aspectRatio = null;

            if (dimension.height) {
                aspectRatio = dimension.width / dimension.height;

                if (!notRound) {
                    aspectRatio = Math.round(aspectRatio * 10) / 10;
                }
            }

            return aspectRatio;
        },

        isVisible: function (el) {
            if (!el.parentNode) {
                return false;
            }
            var elRect = el.getBoundingClientRect(),
                wWidth = w.innerWidth,
                wHeight = w.innerHeight,
                hasRect = elRect.bottom || elRect.height || elRect.left || elRect.right || elRect.top || elRect.width;

            return hasRect && (elRect.top >= 0 ? elRect.top <= wHeight : elRect.bottom >= 0)
                && (elRect.left >= 0 ? elRect.left <= wWidth : elRect.right >= 0);
        }
    });
})(jQuery, window);


(function ($, w) {
    $Crabapple.TriforceLayoutManager = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceLayoutManager, {
        contentHolder: $('#content_holder'),
        $body: $(document.body),
        globalZones: null,
        globalZoneList: [],
        priorityList: {},
        moduleTimeout: 30000,
        pageClass: null,
        languagePreferences: null,
        init: function () {
            if (window.Triforce && window.Triforce.config && window.Triforce.config.globalZones) {
                this.globalZones = window.Triforce.config.globalZones.join(',');
            }
        },
        startLayout: function () {
            var feed = triforceManifestFeed,
                isInitialLoad = false;

            if (this.pageClass != null) {
                $('body').removeClass(this.pageClass);
            }
            if (feed.pageClass && feed.pageClass != null) {
                $('body').addClass(feed.pageClass);
            }
            if (feed.pageClass) {
                this.pageClass = feed.pageClass;
            } else {
                this.pageClass = null;
            }
            if (!feed || !feed.zones) {
                w.Triforce.getMediator().trigger('triforce:pageerror', 'No zones in feed');
            }

            if (feed.languagePreferences) {
                this.languagePreferences = feed.languagePreferences;
            }

            for (var key in feed.zones) {
                var zone = feed.zones[key];

                if (zone.feed) {
                    if (this.languagePreferences) {
                        if (zone.feed.indexOf('lang=true') < 0) {
                            zone.feed += (zone.feed.indexOf('?') ? '&' : '?') + 'lang=true';
                            zone.feedData = null;
                        }
                    }

                    if (zone.mobile && window.Triforce.getMediator().isMobile()) {
                        if (zone.feed.indexOf('mobile=true') < 0) {
                            zone.feed += (zone.feed.indexOf('?') ? '&' : '?') + 'mobile=true';
                            zone.feedData = null;
                        }
                    }
                }
            }

            this.clearBodyCSS();
            if (feed.css != null || feed.supplemental != null) {
                this.addBodyCSS(feed);
            }

            w.Triforce.getMediator().trigger('triforce:bodystart', 'Triggering bodystart');

            if (this.contentHolder.attr('data-initial') && this.contentHolder.attr('data-initial') === 'true') {
                isInitialLoad = true;
                this.contentHolder.removeAttr('data-initial');
            }

            if (window.Triforce.config.tierWrapper) {
                var $tierWrapper = $('.tier_wrapper');

                if ($tierWrapper.length) {
                    $tierWrapper.children().unwrap();
                }
            }

            this.clearContent(feed.zones, isInitialLoad);

            this.globalZoneList = [];
            this.priorityList = {};

            this.createZones(feed.zones);

            if (window.Triforce.config.tierWrapper) {
                var $tiersToWrap = $('.tier_2_col, .tier_3_col');

                if ($tiersToWrap.length) {
                    $tiersToWrap.wrapInner('<div class="tier_wrapper"></div>');
                }
            }

            return this.priorityList;
        },

        clearContent: function (zones, isInitialLoad) {
            var manager = this;

            $('.module, .triforce-module').each(function (key, module) {
                var $module = $(module),
                    moduleData = $module.data(),
                    controller = moduleData.tfcontroller,
                    newZoneInfo = moduleData.zone ? zones[moduleData.zone] : null,
                    isSameLanguage = !this.languagePreferences && !moduleData.currentLanguage || moduleData.currentLanguage === this.languagePreferences,
                    destroyModule = true;

                // It's an empty wrapper that we either rendered server side or had faked a real module
                if (isInitialLoad && !moduleData.tfdriver) {
                    return;
                }

                if (newZoneInfo && moduleData.tfdriver === newZoneInfo.driver && isSameLanguage) {
                    if (manager.stripHashFromURL(moduleData.tffeed) === manager.stripHashFromURL(newZoneInfo.feed)) {
                        destroyModule = false;
                    } else {
                        if (controller && typeof controller.onModuleWillRefresh === 'function') {
                            try {
                                if (controller.onModuleWillRefresh(newZoneInfo)) {
                                    moduleData.tfrefreshing = true;
                                    moduleData.tfrendered = false;
                                    moduleData.feedloaded = false;
                                    moduleData.feedData = null;

                                    destroyModule = false;
                                }
                            } catch (e) {
                                window.Triforce.getMediator().trigger('triforce:message', {
                                    type: 'error',
                                    message: 'Module ' + module.id + ':' + moduleData.tfdriver + ': onModuleWillRefresh caused an error',
                                    exception: e
                                });
                            }
                        }
                    }
                }

                if (destroyModule) {
                    if (controller && typeof controller.onModuleDestroy === 'function') {
                        try {
                            controller.onModuleDestroy();
                        } catch (e) {
                            window.Triforce.getMediator().trigger('triforce:message', {
                                type: 'error',
                                message: 'Module ' + module.id + ':' + moduleData.tfdriver + ': onModuleDestroy caused an error',
                                exception: e
                            });
                        }
                    }
                    $module.remove();
                }
            });

            var requiredTiers = {};
            for (var zoneKey in zones) {
                var splittedZoneKey = zoneKey.split('_'),
                    tier = parseInt(splittedZoneKey[0].substr(1), 10),
                    col = splittedZoneKey[1];

                if (!requiredTiers[tier]) {
                    requiredTiers[tier] = {};
                }

                if (!requiredTiers[tier][col]) {
                    requiredTiers[tier][col] = true;
                }
            }

            var tiers = this.contentHolder[0].querySelectorAll('[id^="tier_"]');
            if (tiers && tiers.length) {
                for (var i = 0; i < tiers.length; i++) {
                    var tierRequired = requiredTiers[tiers[i].id.split('_')[1]];

                    if (!tierRequired) {
                        tiers[i].parentNode.removeChild(tiers[i]);
                    } else {
                        var cols = tiers[i].querySelectorAll('[id$="_lc"],[id$="_rc"],[id$="_mc"]');

                        if (cols && cols.length) {
                            if (cols.length) {
                                for (var j = 0; j < cols.length; j++) {
                                    if (!tierRequired[cols[j].id.split('_')[1]]) {
                                        cols[j].parentNode.removeChild(cols[j]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            window.Triforce.getMediator().trigger('triforce:clearqueues');
        },

        stripHashFromURL: function (URL) {
            if (!URL) {
                return URL;
            }

            var splittedURL = URL.split('?'),
                queryString = splittedURL && splittedURL[1];

            if (queryString) {
                queryString = queryString.replace(/hash=[^&]*&?/g, '');
            }

            return splittedURL[0] + (queryString && queryString.length ? '?' + queryString : '');
        },

        createZones: function (zones) {
            for (var key in zones) {
                var zone = zones[key],
                    zoneName = zone.zone;

                if (this.globalZones.indexOf(zoneName) >= 0) {
                    this.addGlobalZone(zone);
                    continue;
                }

                if (zoneName.indexOf('_') < 0) {
                    w.Triforce.getMediator().message({
                        'type': 'warning',
                        'message': 'Zone ' + zoneName + ' seems to be invalid.  It cannot be placed on the page'
                    });
                    continue;
                }

                var $module = this.placeModule(zoneName, this.getModulePlacement(zoneName));
                this.addModuleAttributes($module, zone);

                if ($module.data('tfrendered') === true) {
                    $module.removeAttr('data-tfpriority');
                } else {
                    this.addPriority(zone.priority, zoneName, $module);

                    if (zone.feedData) {
                        w.Triforce.getMediator().trigger('triforce:feedloaded', zone.feed, zone.feedData, $module);
                    } else {
                        if (!$module.data('tffeed')) {
                            w.Triforce.getMediator().trigger('triforce:feedloaded', zone.feed, zone.feedData, $module);
                        } else {
                            w.Triforce.getMediator().trigger('triforce:loadfeed', $module.data('tffeed'), $module);
                        }
                    }

                    this.fireModuleEvent(zone);
                }
            }
            this.sortGlobalZones();
            this.createGlobalZones();
        },
        addGlobalZone: function (zone) {
            this.globalZoneList.push(zone);
        },

        addPriority: function (priority, zone, $module) {
            if (!this.priorityList[priority]) {
                this.priorityList[priority] = [];
            }
            this.priorityList[priority].push({
                'zone': zone,
                'module': $module,
                'uid': $module.data('uid')
            });
        },

        getModulePlacement: function (zone) {
            var splittedZone = zone.split('_'),
                tier = splittedZone && parseInt(splittedZone[0].replace(/(t|tier)/ig, ''), 10),
                promo,
                column;

            if (!splittedZone || splittedZone.length === 2) {
                column = '1';
                promo = 1;
            } else {
                column = splittedZone[1].replace(/(c)/ig, '');
                promo = parseInt(splittedZone[2].replace(/promo/ig, ''), 10)
            }

            return {
                'tier': tier,
                'column': column,
                'promo': promo
            };
        },
        placeModule: function (zone, placement) {
            var currentTierName = 'tier_' + placement.tier,
                currentColName = 't' + placement.tier + '_' + placement.column + 'c',
                tier = document.getElementById(currentTierName),
                col = document.getElementById(currentColName),
                zoneDiv = document.getElementById(zone) || document.querySelector('[data-zone="' + zone + '"]'),
                i, tiersCount, zonesCount;

            // Create the tier and column, if needed.
            if (!tier) {
                var tiers = this.contentHolder[0].querySelectorAll('[id^="tier_"]'),
                    tierNumber;

                tier = document.createElement('div');
                tier.id = currentTierName;

                for (i = 0, tiersCount = tiers.length; i < tiersCount; i++) {
                    // Get tier number from tier name
                    tierNumber = parseInt(tiers[i].id.replace('tier_', ''), 10);

                    if (tierNumber > placement.tier) {
                        tiers[i].parentNode.insertBefore(tier, tiers[i]);
                        break;
                    } else if (i == tiersCount - 1) {
                        tiers[i].parentNode.insertBefore(tier, tiers[i].nextSibling);
                    }
                }
                //There was no tiers on the page. Inserting into content Holder
                if (!document.getElementById(currentTierName)) {
                    tier = this.contentHolder[0].insertBefore(tier, this.contentHolder[0].lastElementChild);
                }
            } else {
                if (this.getColumnCount(tier) > 1) {
                    tier.className = 'tier_' + this.getColumnCount(tier) + '_col';
                }
                else {
                    tier.className = '';
                }
            }
            if (!col) {
                col = document.createElement('div');
                col.id = 't' + placement.tier + '_' + placement.column + 'c';
                tier.appendChild(col);
                if (this.getColumnCount(tier) > 1) {
                    tier.className = 'tier_' + this.getColumnCount(tier) + '_col';
                }
                else {
                    tier.className = '';
                }
            }

            if (!zoneDiv) {
                zoneDiv = this.createZoneDiv(zone);

                if (typeof placement.promo === 'number' && !isNaN(placement.promo)) {
                    var zoneKeyPrefix = 't' + placement.tier + '_' + placement.column + 'c' + '_promo',
                        zones = col.querySelectorAll('[id^="' + zoneKeyPrefix + '"]'),
                        promoNumber;

                    if (zones && zones.length) {
                        for (i = 0, zonesCount = zones.length; i < zonesCount; i++) {
                            promoNumber = parseInt(zones[i].id.replace(zoneKeyPrefix, ''), 10);

                            if (promoNumber > placement.promo) {
                                zones[i].parentNode.insertBefore(zoneDiv, zones[i]);
                                break;
                            } else if (i === zonesCount - 1) {
                                zones[i].parentNode.insertBefore(zoneDiv, zones[i].nextSibling);
                            }
                        }
                    } else {
                        col.appendChild(zoneDiv);
                    }
                } else {
                    col.appendChild(zoneDiv);
                }
            }

            return $(zoneDiv);
        },

        createZoneDiv: function (zone) {
            var zoneDiv = document.createElement('div');

            zoneDiv.id = zone;
            zoneDiv.setAttribute('data-zone', zone);

            return zoneDiv;
        },

        getUniqId: function () {
            var id = 0;
            return function () {
                return id++;
            };
        },

        addModuleAttributes: function (module, zone) {
            module.data('uid', this.getUniqId());

            module.addClass('triforce-module');

            if (zone.version && zone.version == "V3") {
                module.data('tfversion', '3');
                module.data('tfname', zone.moduleName);
                module.data('tfscripthash', zone.scriptHash);
                module.data('tfdriver', zone.driver);
                module.attr('data-tfdriver', zone.driver);
                if (zone.moduleName) {
                    module.addClass(zone.moduleName.toLowerCase());
                }
            }

            module.attr({
                'data-zone': zone.zone,
                'data-tffeed': zone.feed,
                'data-tfmethod': zone.method,
                'data-tfpriority': zone.priority
            });
            module.data('zone', zone.zone);
            module.data('tffeed', zone.feed);
            module.data('tfpriority', zone.priority);
            if (this.languagePreferences) {
                module.data('currentLanguage', this.languagePreferences);
            }
            if (!module.data('tfrendered') && !module.data('tfrefreshing') && !module.attr('data-tfstatic')) {
                module.attr('data-tfloading', true);
            }

            if (zone.libraries !== null) {
                var libraries = zone.libraries,
                    libsString = '',
                    hashString = '';

                module.data('tfdriver', zone.moduleDriver);
                if (zone.template) {
                    module.data('tftemplate', zone.template);
                }
                if (libraries) {
                    for (var index = 0; index < libraries.length; index++) {
                        libsString += libraries[index].script;
                        hashString += libraries[index].hash;
                        if (index != (libraries.length - 1)) {
                            libsString += ',';
                            hashString += ',';
                        }
                    }
                    module.data('tflibs', libsString);
                    module.data('tflibshash', hashString);
                }
            }
        },
        sortGlobalZones: function () {
            this.globalZoneList.sort(function (a, b) {
                if (a.zone.indexOf('menu') || b.zone.indexOf('footer')) {
                    return -1;
                }
                if (a.zone.indexOf('footer') || b.zone.indexOf('menu')) {
                    return 1;
                }
                return 0;
            });
        },
        createGlobalZones: function () {
            var $zone, zone, zoneName, key;

            for (key in this.globalZoneList) {
                zone = this.globalZoneList[key];
                zoneName = zone.zone;
                $zone = $('#' + zoneName);

                w.Triforce.getMediator().registerModule(zoneName, zone.feed, zone.moduleDriver, zone.libraries);
                if (!$zone.length) {
                    if (zoneName.indexOf('menu') >= 0 || zoneName.indexOf('report') >= 0) {
                        if (!this.contentHolder.parent().find('.header #' + zoneName).length) {
                            if (this.contentHolder.parent().find('.header').length) {
                                $zone = $('<div id="' + zoneName + '"/>').prependTo(this.contentHolder.parent().find('.header'));
                            } else {
                                $zone = $('<div id="' + zoneName + '"/>').prependTo(this.contentHolder);
                            }
                        }
                    } else if (zoneName.indexOf('header') >= 0) {
                        $zone = $('<div id="' + zoneName + '"/>').insertBefore(this.contentHolder);
                    } else if (zoneName.indexOf('footer') >= 0) {
                        $zone = $('<div id="' + zoneName + '"/>').appendTo(this.contentHolder.parent());
                    } else {
                        $zone = $('<div id="' + zoneName + '"/>').appendTo(this.contentHolder);
                    }
                }
                this.addModuleAttributes($zone, zone);

                if ($zone.data('tfrendered') === true) {
                    // We don't need to take action - this module is rendered.
                    $zone.removeAttr('data-tfpriority');
                } else {
                    this.addPriority(zone.priority, zoneName, $zone);

                    if (zone.feedData) {
                        w.Triforce.getMediator().trigger('triforce:feedloaded', zone.feed, zone.feedData, $zone);
                    } else {
                        if (!$zone.data('tffeed')) {
                            w.Triforce.getMediator().trigger('triforce:feedloaded', zone.feed, zone.feedData, $zone);
                        } else {
                            w.Triforce.getMediator().trigger('triforce:loadfeed', $zone.data('tffeed'), $zone);
                        }
                    }

                    this.fireModuleEvent(zone);
                }
            }
        },
        fireModuleEvent: function (zone) {
            if (zone.moduleName && zone.feed) {
                w.Triforce.getMediator().trigger('triforce:module:load:' + zone.moduleName, zone.feed);
            }
        },
        getColumnCount: function (tier) {
            var nodes = tier.childNodes,
                count = 0;
            if (nodes.length) {
                for (var i = 0; i < nodes.length; i++) {
                    if (typeof (nodes[i].tagName) != 'undefined' && nodes[i].tagName.toLowerCase() == 'div') {
                        count++;
                    }
                }
            }

            return count;
        },
        clearBodyCSS: function () {
            var classes = this.$body.attr('class'),
                $colorScheme = $('#color_scheme');

            this.$body.removeAttr('style');

            if (classes) {
                classes = classes.split(' ');
                for (var i in classes) {
                    if (classes[i].indexOf('from_page') >= 0) {
                        this.$body.removeClass(classes[i]);
                        $('#' + classes[i].replace('from_page_', '')).remove();
                    }
                }
            }

            if ($colorScheme.length) {
                if ($colorScheme.attr('data-setup')) {
                    $colorScheme.removeAttr('data-setup');
                } else {
                    $colorScheme.remove();
                }
            }
        },
        addBodyCSS: function (feed) {

            if (feed.css) {
                var css = feed.css, pageId = feed.id;
                if (window.Triforce.config.CSSHelperDriverName && window.Triforce.config.CSSHelperPackage) {
                    w.Triforce.scriptManager.loadStandaloneScript(window.Triforce.config.CSSHelperPackage, function () {
                        var driver = new window['$Crabapple']['TriforceHelper_' + window.Triforce.config.CSSHelperDriverName]();
                        driver.init(css, pageId);
                    });
                } else {
                    var prefix = '.from_page_' + pageId,
                        style = document.createElement('style');

                    this.$body.addClass('from_page_' + pageId);

                    style.type = 'text/css';
                    style.id = pageId;
                    style.innerHTML = (this.getCSSContents(css, prefix));
                    document.head.appendChild(style);
                }
            }

            if (feed.supplemental && feed.supplemental.colors && feed.supplemental.colors.colors) {
                var colorScheme = feed.supplemental.colors.colors, s = document.createElement('style'), content = '';

                s.type = 'text/css';
                s.id = 'color_scheme';
                for (var selector in colorScheme) {
                    content += ' .' + selector + ' { ' + 'color:' + colorScheme[selector] + ' } ';
                    content += ' .' + selector + '_background { ' + 'background-color:' + colorScheme[selector] + ' } ';
                }
            }


        },
        getCSSContents: function (css, prefix) {
            var contents = '@media screen and (min-width: 1200px) {',
                selectorsList = '#background_holder';

            if (triforceManifestFeed.CMSTitle.match(/player/i)) {
                selectorsList = '.player';
            }

            if (css.pageBackgroundImage) {
                if (!css.pageBackgroundColor) css.pageBackgroundColor = 'transparent';
                contents += prefix + ' ' + selectorsList + ' {';
                contents += 'background: ' + css.pageBackgroundColor + ' url(' + css.pageBackgroundImage + ') no-repeat top center !important;';
                contents += '}';
            }

            contents += '}';
            return contents;
        },
        fetchLegacyPriorities: function () {
            var self = this,
                $tfPriorities = $('[data-tfpriority]');

            this.priorityList = {};

            if ($tfPriorities.length) {
                $tfPriorities.each(function () {
                    var t = $(this);
                    self.addPriority(t.attr('data-tfpriority'), t.attr('data-zone'), t);
                    if (!t.attr('data-tffeed')) t.data('feedloaded', 'true');
                });

                return this.priorityList;
            } else {
                return false;
            }
        }
    });
})(jQuery, window);


(function ($, w) {
    $Crabapple.TriforceMediator = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceMediator, {
        listeners: {},
        registeredModules: {},
        waitTimes: {'priority': 1000, 'helper': 3000},
        triforceDebugEnabled: false,
        triforceDebug: {},
        triforcePageReady: false,
        triforcePageUrl: '',
        triforceInitialLoad: true,

        /**
         * Stores arguments list of triggered events, so we can reference to them later if needed
         *
         * @var object
         */
        _firedEvents: null,

        /**
         * Adds a listener for events. It can be single event or set of events separated by space. If 3rd parameter is passed,
         * the callback will be called right away if there's some event that has been already fired before the subscription
         *
         * @param {string} eventNames Events names separated by space
         * @param {function} callback A callback function, which will be called when event occurs
         * @param {bool} checkFired Determines whether we should check for fired events or not
         */
        on: function (eventNames, callback, checkFired) {
            var eventType;

            eventNames = eventNames.split(' ');
            for (var i = 0, len = eventNames.length; i < len; i++) {
                eventNames[i] = eventNames[i].toLowerCase();
                this.listeners[eventNames[i]] = this.listeners[eventNames[i]] || [];
                this.listeners[eventNames[i]].push(callback);

                // only page events for now
                if (checkFired === true && this.isPageLevelEvent(eventNames[i])) {
                    eventType = 'page';

                    if (this._firedEvents[eventType] && this._firedEvents[eventType][eventNames[i]]) {
                        callback(this._firedEvents[eventType][eventNames[i]]);
                    }
                }
            }
        },

        /**
         * Removes event listener. If there wasn't any specific callback passed - all listeners are removed
         *
         * @param {string} eventName A name of the event to remove listener from
         * @param {function} callback Callback function by which we find the listener to remove
         */
        off: function (eventName, callback) {
            var toKeepAlive,
                callbacks,
                i, len;

            // There's no any callbacks for this event
            if (!this.listeners[eventName] || !this.listeners[eventName].length) {
                return;
            }
            // There's no callback passed - so we just remove all callbacks for this event
            if (eventName && !callback) {
                this.listeners[eventName] = null;
                delete this.listeners[eventName];

                return;
            }

            callbacks = this.listeners[eventName];
            this.listeners[eventName] = toKeepAlive = [];

            for (i = 0, len = callbacks.length; i < len; i++) {
                if (callbacks[i].callback !== callback) {
                    toKeepAlive.push(callbacks[i]);
                }
            }

            if (!toKeepAlive.length) {
                this.listeners[eventName] = null;
                delete this.listeners[eventName];
            }
        },

        /**
         * Triggers an event, first argument is a name of the event. The rest of the arguments are passed as the first
         * argument into the callback. The arguments list is stored in _firedEvents object by the type of the event(page)
         *
         * @param {string} eventName A name of the event to be fired
         */
        trigger: function (eventName) {
            var eventType;

            if (!arguments || !arguments.length) return;

            eventName = eventName.toLowerCase();

            // do only pages for now, cuz we know when to clear stored info
            if (this.isPageLevelEvent(eventName)) {
                eventType = 'page';

                this._firedEvents[eventType] = this._firedEvents[eventType] || {};
                this._firedEvents[eventType][eventName] = arguments;
            }

            if (!this.listeners[eventName] || !this.listeners[eventName].length) {
                this.message({'type': 'debug', 'message': 'No listener is registered for ' + eventName});
                return;
            }

            for (var i = 0, len = this.listeners[eventName].length; i < len; i++) {
                try {
                    this.listeners[eventName][i](arguments);
                } catch (e) {
                    this.message({
                        type: 'error',
                        message: eventName + ' event callback failed with an error',
                        exception: e
                    });
                }
            }
        },

        isPageLevelEvent: function (eventName) {
            eventName = eventName.split(':');

            return eventName[0] === 'page' && eventName[1] !== undefined;
        },

        init: function () {
            this.initializeDebug();
            this.initializeEvents();
        },
        initializeDebug: function () {
            if (document.cookie.indexOf('crabappleAuthorization') >= 0) {
                this.triforceDebugEnabled = true;
                this.triforceDebug = new window.$Crabapple.TriforceDebug_v1();
                this.triforceDebug.init();
            }
            else if (typeof(triforceDebugOverride) != 'undefined' && triforceDebugOverride == true) {
                this.triforceDebugEnabled = true;
                this.triforceDebug = new window.$Crabapple.TriforceDebug_v1();
                this.triforceDebug.init();
            }
        },
        initializeEvents: function () {
            this._firedEvents = {};

            this.initializePageEvents();
            this.initializeFeedEvents();
            this.initializeScriptEvents();
            this.initializeModuleEvents();
            this.initializeErrorEvents();
            this.initializeStorageEvents();
            this.initializeMonitorEvents();
        },
        debugEnabled: function () {
            if (window.Triforce.config.debug && window.Triforce.config.debug != 'false') return true;

            if (this.triforceDebugEnabled === true) {
                return this.triforceDebug.debugEnabled();
            }
            return false;
        },
        initializePageEvents: function () {
            var self = this;
            this.on('triforce:complete', function () {
                self.message({'type': 'message', 'message': ':: Triforce:complete - all modules rendered ::.'});
            });
            this.on('triforce:pagestartload', function () {
                self._firedEvents.page = {};
                self.message({'type': 'message', 'message': 'Triforce Page started loading.'});
            });
            this.on('triforce:pageredirect', function () {
                self.message({'type': 'message', 'message': 'Triforce Page got redirect.'});
            });
            this.on('triforce:pageloaded', function () {
                w.Triforce.getPageLoader().handleInitialLoad();
            });
            this.on('triforce:pageready', function () {
                w.Triforce.pageReady();
                self.trigger('triforce:message', {'type': 'debug', 'message': 'Triforce Page Ready'});
                self.triforcePageReady = true;
                self.triforcePageUrl = document.location.pathname;
            });
            this.on('triforce:rendercomplete', function () {
                w.Triforce.getPageLoader().hideActivityIndicator();
                self.message({
                    'type': 'message',
                    'message': 'Page render is complete.  All modules rendered'
                });
            });
            this.on('triforce:message', function (arg) {
                var data = null;
                if (arg && arg.length && arg.length === 2) {
                    data = arg[1];
                }
                if (data !== null) {
                    self.message(data);
                }

            });
            this.on('triforce:loadpage', function (arg) {
                var url = arg[1];
                self.triforceInitialLoad = false;
                self.triforcePageReady = false;
                w.Triforce.abortAllRequests();
                w.Triforce.priorityManager.clearState();
                self.triforcePageUrl = '';
                w.Triforce.loadPage(url, {'eventFired': 'pushstate'});
            });
        },
        initializeFeedEvents: function () {
            this.on('triforce:loadfeed', function (arg) {
                if (arg.length && arg.length === 3) {
                    w.Triforce.queueFeedLoad(arg[1], arg[2]);
                }
            });
            this.on('triforce:feedloaded', function (arg) {
                if (arg && arg.length && arg.length === 4) {
                    w.Triforce.registerFeedLoaded(arg[1], arg[2], arg[3]);
                }
            });
        },
        initializeScriptEvents: function () {
            this.on('triforce:loadscript', function (arg) {
                if (arg.length && arg.length === 4 && !arg[2].scriptFetching) {
                    w.Triforce.queueJavascript(arg[1], arg[2], arg[3]);
                    arg[2].scriptFetching = true;
                }
            });
        },
        initializeModuleEvents: function () {
            var self = this;
            this.on('triforce:modulerender', function (arg) {
                var $module = arg[1];
                w.Triforce.getModuleRenderer().renderModule($module);
            });
            this.on('triforce:module:process', function (arg) {
                var wrapper = arg[1],
                    info = arg[2],
                    hashList;

                hashList = typeof(btoa) === 'function' ? btoa(hashList) : hashList;

                w.Triforce.layoutManager.addModuleAttributes(wrapper, info);

                if (!info.feedData) {
                    w.Triforce.getMediator().trigger('triforce:loadfeed', info.feed, wrapper);
                } else {
                    w.Triforce.getMediator().trigger('triforce:feedloaded', info.feed, {result: info.feedData}, wrapper);
                }
                w.Triforce.getMediator().trigger('triforce:loadscript', info.moduleName, wrapper, hashList);
            });

            this.on('triforce:module:render', function (arg) {
                var module = arg[1];

                w.Triforce.getPageLoader().hideActivityIndicator();
                w.Triforce.getModuleRenderer().moduleReady(module);
            });
            this.on('triforce:module:fail', function (arg) {
                var module = arg[1];
                $(module).remove();
            });
            this.on('triforce:module:scriptsloaded', function (arg) {
                var module = arg[1];
                module.data('scriptsloaded', 'true');
                if (module.data('feedloaded') === 'true') {
                    self.trigger('triforce:module:render', module);
                }
            });
            this.on('triforce:module:feedloaded', function (arg) {
                var module = arg[1];
                module.data('feedloaded', 'true');
                if (module.data('tfshouldnotrender') === 'true' && module.data('tfrefreshing') !== true) {
                    self.trigger('triforce:module:fail', module);
                    return;
                }
                if (module.data('scriptsloaded') === 'true') {
                    self.trigger('triforce:module:render', module);
                }
            });
            this.on('triforce:priority:removemodule', function (arg) {
                var module = arg[1];
                w.Triforce.getPriorityManager().removeModule(module);
            });

            this.on('triforce:moduleRenderComplete', function (instance) {
                // this function triggers when a module is done rendering.
            });
            this.on('triforce:moduleRenderFailed', function (data) {
                // triggers on failure.
            });
        },
        initializeErrorEvents: function () {
            var self = this;
            this.on('triforce:pageerror', function (arg) {
                var event, data;
                if (arg && arg.length && arg.length === 2) {
                    data = arg[1];
                }
                self.message({'type': 'error', 'message': data});
            });
            this.on('triforce:legacyload', function () {
                w.Triforce.loadLegacyPage();
            });
        },
        initializeStorageEvents: function () {
            // nada
        },
        initializeMonitorEvents: function () {
            var self = this;
            w.digitalData = {};
            if (w.Triforce.config && w.Triforce.config.monitorEnabled) {
                this.on('triforce:triggermonitor', function (arg) {
                    var event, data;
                    if (arg && arg.length && arg.length == 2) {
                        data = arg[1];
                        if (typeof(_satellite) != 'undefined') {
                            self.message({'type': 'message', 'message': 'Triggering ' + data + ' monitor event'});
                            _satellite.track(data);
                        }
                    }
                });

                this.on('triforce:monitorPageChange', function () {
                    w.digitalData = {
                        page: {
                            pageURL: w.location.href
                        },
                        user: {
                            loginSocial: 'logged out',
                            loginTVE: 'logged out'
                        }
                    };
                    self.trigger('triforce:triggermonitor', 'pageChange');
                });

                this.on('triforce:monitorContentClick', function (arg) {
                    w.digitalData = {
                        page: {
                            pageURL: w.location.href
                        },
                        user: {
                            loginSocial: 'logged out',
                            loginTVE: 'logged out'
                        }
                    };
                    if (arg && arg.length && arg.length == 2) {
                        w.digitalData.content = {
                            module: arg[1]
                        };
                        self.trigger('triforce:triggermonitor', 'contentClick');
                    } else if (arg && arg.length && arg.length == 3) {
                        w.digitalData.content = {
                            module: arg[1],
                            franchise: arg[2]
                        };
                        self.trigger('triforce:triggermonitor', 'contentClick');
                    }


                });

                this.on('triforce:monitorContentShare', function (arg) {
                    if (arg && arg.length && arg.length == 3) {
                        w.digitalData = {
                            page: {
                                pageURL: w.location.href
                            },
                            user: {
                                loginSocial: 'logged out',
                                loginTVE: 'logged out'
                            },
                            content: {
                                shareContentName: arg[1],
                                shareContentProvider: arg[2]
                            }
                        };

                        self.trigger('triforce:triggermonitor', 'contentShare');
                    }

                });

                this.on('triforce:monitorVideoStart', function (arg) {
                    if (arg && arg.length && arg.length == 2) {
                        //w.digitalData = {
                        //    page: {
                        //        pageURL: w.location.href
                        //    },
                        //    user: {
                        //        loginSocial: 'logged out',
                        //        loginTVE: 'logged out'
                        //    },
                        //    content: {
                        //        videoName: arg[1]
                        //    }
                        //};
                        self.trigger('triforce:triggermonitor', 'videoStart');
                    }
                });

                this.on('triforce:monitorVideoComplete', function (arg) {
                    if (arg && arg.length && arg.length == 2) {
                        w.digitalData = {
                            page: {
                                pageURL: w.location.href
                            },
                            user: {
                                loginSocial: 'logged out',
                                loginTVE: 'logged out'
                            },
                            content: {
                                videoName: arg[1]
                            }
                        };
                        self.trigger('triforce:triggermonitor', 'videoComplete');
                    }
                });
            }
        },
        storeValue: function (key, value) {
            w.Triforce.getStorageManager().storeValue(key, value);
        },
        getValue: function (key) {
            return w.Triforce.getStorageManager().getValue(key);
        },
        storeObject: function (key, obj) {
            w.Triforce.getStorageManager().storeObject(key, obj);
        },
        getObject: function (key) {
            return w.Triforce.getStorageManager().getObject(key);
        },
        storeSharedObject: function (key, obj, expiry) {
            w.Triforce.getStorageManager().setSharedObject(key, obj, expiry);
        },
        getSharedObject: function (key) {
            return w.Triforce.getStorageManager().getSharedObject(key);
        },
        initialLoad: function () {
            return this.triforceInitialLoad;
        },
        message: function (message) {
            if (this.debugEnabled()) {
                if (console && console.log && message.type && message.message) {
                    message.message = new Date().toLocaleString() + ' - ' + message.message;
                    switch (message.type) {
                        case 'message':
                            console.debug(message.message);
                            break;
                        case 'warning':
                            console.warn(message.message);
                            break;
                        case 'debug':
                            console.debug(message.message);
                            break;
                        case 'error':
                            console.error(message.message);
                            if (message.exception) {
                                console.error(message.exception);
                            }
                            break;
                        default:
                            console.log(message.message);
                    }
                }
            }
        },
        getFeedData: function (feedUrl) {
            return w.Triforce.getFeedData(feedUrl);
        },
        isMobileStored: null,
        isMobile: function () {
            if (this.isMobileStored === null) {
                var c = $.cookie('btg_device');
                if (c != null && c.length) {
                    if (c.indexOf('1') > 0) this.isMobileStored = true;
                }
                if (this.isMobileStored === null) {
                    this.isMobileStored = navigator.userAgent.match(/Android|webOS|iPhone|iPod|iPad|BlackBerry|Windows Phone/i) != null;
                }
            }
            return this.isMobileStored;
        },
        isIOS: function () {
            return navigator.userAgent.match(/(iPod|iPhone|iPad)/);
        },
        isIPad: function () {
            return navigator.userAgent.match(/(iPad)/);
        },
        isAndroid: function () {
            return navigator.userAgent.match(/(andriod|Andriod)/);
        },
        registerModule: function (zone, feed, driver, libraries) {
            this.registeredModules[zone] = {
                'zone': zone,
                'feed': feed,
                'driver': driver,
                'libraries': libraries
            };
        },
        isModuleRegistered: function (zone, feed, driver, libraries) {
            if (!this.registeredModules[zone]) return false;

            var moduleObj = this.registeredModules[zone];

            if (moduleObj.feed == feed && moduleObj.driver == driver) {

                if (!libraries || this.libraryMatch(libraries, moduleObj.libraries)) {
                    return true;
                }

            } else {
                return false;
            }
            return false;
        },
        libraryMatch: function (source, target) {
            if (source.length == target.length) {
                for (var i in source) {
                    if (source[i] != target[i]) return false;
                }
                return true;
            }
            return false;
        }
    });
})(jQuery, window);


(function ($, w) {
    $Crabapple.TriforceModuleRenderer = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceModuleRenderer, {

        init: function () {
        },

        moduleReady: function (module) {
            var moduleData = module.data(),
                feedData = moduleData.tffeed ? w.Triforce.getMediator().getFeedData(moduleData.tffeed) : null,
                driver = moduleData.tfdriver,
                controller = moduleData.tfcontroller;


            if (moduleData.tfrendered === true) {
                // This module is already rendered
                w.Triforce.getMediator().trigger('triforce:priority:removemodule', module);
                w.Triforce.getMediator().message({
                    'type': 'message',
                    'message': 'Module ' + driver + ' is already rendered'
                });
                return;
            }

            if (!moduleData.scriptsloaded) {
                return;
            }

            try {
                if (moduleData.tfrefreshing === true) {
                    if (controller && typeof controller.onModuleRefresh) {
                        controller.onModuleRefresh(feedData);
                        moduleData.tfrendered = true;
                        moduleData.tfrefreshing = false;
                    } else {
                        throw new Error('Module ' + module[0].id + ':' + moduleData.tfdriver + ' is set to refresh but does not implement onModuleRefresh method');
                    }
                } else {
                    if (driver) {
                        if (!window.$Crabapple['TriforceModule_' + driver]) {
                            // not loaded yet - let's try again soon.
                            w.Triforce.getMediator().message({
                                'type': 'message',
                                'message': 'TriforceModule_' + driver + ': not loaded yet or doesn\'t exist may need to check the js library.'
                            });

                            return;
                        }

                        if (window.$Crabapple['TriforceModule_' + driver].parentController) {
                            this.inheritController('$Crabapple.TriforceModule_' + driver);
                        }

                        var moduleDriver = new window.$Crabapple['TriforceModule_' + driver]();
                        moduleDriver.init(module, feedData);
                        module.data('tfcontroller', moduleDriver);
                    } else {
                        w.Triforce.getMediator().message({
                            'type': 'error',
                            'message': 'Module has no driver - ' + module.attr('data-zone')
                        });

                        return;
                    }
                }

                w.Triforce.getMediator().trigger('triforce:module:rendered', module);
                w.Triforce.getMediator().trigger('triforce:priority:removemodule', module);
            } catch (e) {
                w.Triforce.getMediator().message({
                    'type': 'error',
                    'message': 'Module ' + module[0].id + ':' + moduleData.tfdriver + ' render failed' + (moduleData.tfrefreshing ? ': refresh' : ''),
                    'exception': e
                });
                w.Triforce.getMediator().trigger('triforce:module:fail', module);
            }
        },

        renderModule: function ($module) {
            var data = $module.data(),
                mediator = w.Triforce.getMediator(),
                scriptList,
                hashList;

            if (!$module.length || data.zone === undefined) {
                mediator.trigger('triforce:priority:removemodule', $module);
                return;
            }

            if (!$('[data-zone="' + data.zone + '"]').length) {
                mediator.trigger('triforce:priority:removemodule', $module);
                return;
            }

            mediator.message({
                'type': 'message',
                'message': 'Rendering module in ' + data.zone + ' with priority ' + data.tfpriority
            });

            if (data.scriptsloaded === 'true') {
                if (data.feedloaded === 'true') {
                    mediator.trigger('triforce:module:render', $module);
                }
                return;
            }

            if (data.tfversion && data.tfversion == '3') {
                scriptList = data.tfname;
                hashList = data.tfscripthash + data.tfdriver;
                if (typeof(btoa) == 'function') hashList = btoa(hashList);
                mediator.trigger('triforce:loadscript', scriptList, $module, hashList);
            } else if (data.tflibs && data.tflibs.length) {
                scriptList = data.tflibs;
                hashList = data.tflibshash + data.tfdriver;
                if (data.tfscripthash) hashList = data.tfscripthash + data.tfdriver;

                if (typeof(btoa) == 'function') {
                    hashList = btoa(hashList);
                }

                mediator.trigger('triforce:loadscript', scriptList, $module, hashList);
            } else {
                mediator.trigger('triforce:module:scriptsloaded', $module);
            }
        },

        inheritController: function (controllerName) {
            var Controller,
                parentController,
                extension;

            controllerName = controllerName.split('.');
            Controller = window[controllerName[0]][controllerName[1]];

            if (typeof Controller !== 'function') {
                parentController = this.inheritController(Controller.parentController);
                extension = Controller.extension;
                Controller = window[controllerName[0]][controllerName[1]] = function () {
                };
                $Crabapple.extend(parentController, Controller, extension);
            }

            return Controller;
        }
    });
})(jQuery, window);


(function ($, w) {
    $Crabapple.TriforcePageLoader = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforcePageLoader, {
        activityIndicator: null,
        previousPage: '',
        currentPage: '',
        //used for testing and site management type tools to alter page responses
        customPostPageLoadFunc: null,
        init: function () {
            this.activityIndicator = $('#activityIndicator');
            this.previousPage = w.location.href;
            this.currentPage = w.location.href;
            this.addWindowEvents();
        },
        handleInitialLoad: function () {
            var self = this;
            this.activityIndicator.fadeIn(100);
            if (typeof(triforceManifestFeed) == 'undefined' || triforceManifestFeed == '') {
                var feedURL = window.Triforce.config.manifestFeed + '?url=' + encodeURIComponent(w.location.href);
                $.getJSON(feedURL, function (response) {
                    triforceManifestFeed = response.manifest;
                    if (triforceManifestFeed === false) {

                        w.Triforce.getPageLoader().hideActivityIndicator();
                        w.Triforce.getMediator().trigger('triforce:legacyload');
                    }
                    else {
                        if (null != self.customPostPageLoadFunc) {
                            triforceManifestFeed = self.customPostPageLoadFunc(triforceManifestFeed);
                        }
                        w.Triforce.getMediator().trigger('triforce:pageready');
                    }
                });
                return;
            }
            if (triforceManifestFeed) {
                triforceManifestFeed = triforceManifestFeed.manifest;
                if (null != self.customPostPageLoadFunc) {
                    triforceManifestFeed = self.customPostPageLoadFunc(triforceManifestFeed);
                }
                w.Triforce.getMediator().trigger('triforce:pageready');
            }
            else {
                w.Triforce.getMediator().trigger('triforce:errornomanifest');
            }
        },
        hideActivityIndicator: function () {
            this.activityIndicator.fadeOut(100);
        },
        loadPage: function (url, pageStatus) {
            var self = this,
                additionalParams = '';
            if (url.substr(0, 15) == 'javascript:void') return;
            if (url.substr(0, 1) == '#') return;
            if (url.match(/^\//)) {
                url = w.location.protocol + '//' + w.location.host + url;
            }
            if (url.replace(window.location.href, '').substr(0, 1) == '#') return;
            if (!pageStatus) {
                if (url == window.location.href && url.match(/#/)) return;
            } else if (pageStatus && pageStatus.eventFired && pageStatus.eventFired != 'popstate') {
                if (url == window.location.href && url.match(/#/)) return;
            }
            var newUrl = url;
            if (triforceManifestFeed == false) {
                window.location.href = url;
                return;
            }

            if (typeof($.cookie) == 'function') {
                if ($.cookie('crabappleInformation')) {
                    var ci = JSON.parse($.cookie('crabappleInformation'));
                    if (ci.modes && ci.modes.manifest) {
                        additionalParams = '&currentManifest=' + ci.modes.manifest;
                    }
                }
            }

            w.Triforce.getMediator().trigger('triforce:pagestartload');
            if (this.checkPageStatus(pageStatus)) {
                if (this.manifestAjax) {
                    this.manifestAjax.abort();
                }
                this.activityIndicator.fadeIn(100);
                this.previousPage = w.location.href;
                var feedURL = window.Triforce.config.manifestFeed + "?url=" + encodeURIComponent(url);
                this.manifestAjax = $.getJSON(feedURL + additionalParams, function (response) {
                    var newLocationURL;
                    self.currentPage = url;
                    self.manifestAjax = null;
                    triforceManifestFeed = response.manifest;
                    if (triforceManifestFeed === false || !self.handlePushState(newUrl)) {
                        document.location.href = newUrl;
                        return;
                    }
                    if (triforceManifestFeed.type == 'redirect' && triforceManifestFeed.newLocation) {
                        if (triforceManifestFeed.newLocation.url) {
                            newLocationURL = triforceManifestFeed.newLocation.url;
                        } else {
                            newLocationURL = triforceManifestFeed.newLocation;
                        }

                        if (!self.isSameOrigin(newLocationURL)) {
                            window.location.href = newLocationURL;
                            return;
                        }
                        self.updateHistoryState(newLocationURL);
                        w.Triforce.loadPage(newLocationURL, {
                            eventFired: 'redirect'
                        });

                        w.Triforce.getMediator().trigger('triforce:pageredirect');
                        return;
                    } else {
                        if (null != self.customPostPageLoadFunc) {
                            triforceManifestFeed = self.customPostPageLoadFunc(triforceManifestFeed);
                        }
                        if (triforceManifestFeed.title) {
                            document.title = triforceManifestFeed.title;
                        }
                        if (triforceManifestFeed.CMSTitle) {
                            document.body.id = triforceManifestFeed.CMSTitle.replace(/\s/g, '_').replace(/[@\.\[\]\(\)]/g, '')
                                .replace(/__/g, '_').toLowerCase();
                        }
                        if (document.body.className.indexOf('triforce_rendered') === -1) {
                            document.body.className = document.body.className + ' triforce_rendered';
                        }
                        w.Triforce.getMediator().trigger('triforce:pageready');
                    }
                });
            } else {
                if (document.location.href !== url) {
                    document.location.href = url;
                }
            }
        },
        handlePushState: function (url) {
            if (w.history && w.history.pushState) {
                if (url != w.location.href) {
                    var state = {
                        'state': encodeURIComponent(url)
                    };
                    try {
                        history.pushState(state, '', url);
                    } catch (e) {
                        return false;
                    }

                    return true;
                }
                else { // refresh url
                    //Added this to allow for the triforce module integration tests to work as they were causing this clause to be hit making their tests impossible to run
                    // but you need to check if that exists.  It might not.
                    if (typeof (TriforceConfiguration) != 'undefined' && !TriforceConfiguration.disabledSamePageReload) {
                        window.location.reload();
                    }
                }
            }
            return false;
        },
        updateHistoryState: function (url) {
            if (w.history && w.history.replaceState) {
                history.replaceState({
                    'state': encodeURIComponent(url)
                }, '', url);
            }
        },
        checkPageStatus: function (pageStatus) {
            if (pageStatus) {
                if (pageStatus.eventFired && pageStatus.eventFired.match(/redirect|popstate|pushstate/)) {
                    return true;
                }
            }
            return false;
        },
        addWindowEvents: function () {
            var self = this,
                isTriforcePage = (typeof(triforceManifestFeed) == 'undefined' || !triforceManifestFeed) ? (false) : (true),
                eventFired = 'popstate';
            $(window).on('popstate', function () {
                if (self.currentPage == location.href && self.currentPage == self.previousPage) return;
                if (self.currentPage.replace(location.href, '').substr(0, 1) == '#') {
                    self.currentPage = location.href;
                    return;
                }

                var locationHash = location.href, currentHash = self.currentPage;
                // check for urls being the same
                if (locationHash.indexOf('#') >= 0) {
                    locationHash = locationHash.substr(0, locationHash.indexOf('#'));
                }

                if (currentHash.indexOf('#') >= 0) {
                    currentHash = currentHash.substr(0, currentHash.indexOf('#'));
                }
                if (currentHash == locationHash) {
                    self.currentPage = location.href;
                    return;
                }


                if (location.href.replace(self.currentPage, '').substr(0, 1) == '#') {
                    eventFired = 'pushstate';
                } else {
                    eventFired = 'popstate';
                }
                self.currentPage = '';
                if (isTriforcePage) {
                    self.currentPage = location.href;
                    w.Triforce.loadPage(location.href, {
                        eventFired: eventFired
                    });
                } else {
                    window.location.href = location.href;
                }

            });
        },
        isSameOrigin: function(url) {
            if (url.indexOf(window.location.protocol + '//' + window.location.host) === 0) {
                return true;
            }
            return false;
        }
    });
})(jQuery, window);


(function ($, w) {
    $Crabapple.TriforcePriorityManager = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforcePriorityManager, {
        PRIORITY_TIMEOUT: 0,
        ATTEMPT_TIMEOUT: 0,
        waitTime: 0,
        priorities: [],
        modulesLeft: 0,
        processingModules: [],
        numberAttempts: 0,
        modulesToBeRendered: 0,
        queuesFired: false,
        renderComplete: false,

        init: function () {
            this.PRIORITY_TIMEOUT = window.Triforce.config.priorityTimeout;
            this.ATTEMPT_TIMEOUT = window.Triforce.config.stragglersTimeout;
            this.checkIsPageLoaded();
        },

        startRenderPriorities: function (priorities) {
            this.priorities = priorities;
            this.waitTime = this.PRIORITY_TIMEOUT;
            this.sortPriorities();

            //give more time for rendering only module
            if (this.priorities.length === 1 && this.priorities[0].modules.length === 1) {
                this.waitTime = this.ATTEMPT_TIMEOUT;
            }

            this.renderModulesByPriority(this.priorities.shift());
        },

        sortPriorities: function () {
            var sorted = [],
                priority;

            for (var i in this.priorities) {
                sorted.push(i);
            }

            sorted.sort(function (a, b) {
                return a - b;
            });

            for (i = 0; i < sorted.length; i += 1) {
                priority = {
                    'priority': sorted[i],
                    'modules': this.priorities[sorted[i]],
                    'iteration': 0
                };
                sorted[i] = priority;
            }

            this.priorities = sorted;
        },

        renderModulesByPriority: function (priority) {
            if (priority) {
                this.processingModules = this.processingModules.concat(priority.modules);
                this.modulesLeft += priority.modules.length;
                if (this.modulesLeft > this.modulesToBeRendered) {
                    this.modulesToBeRendered = this.modulesLeft;
                }
                this.triggerLoadModules(priority.modules);
            } else {
                this.nextPriority();
            }
        },

        triggerLoadModules: function (moduleList) {
            var _this = this,
                len = moduleList.length;

            for (var i = 0; i < len; i += 1) {
                var module = moduleList[i].module;

                if (module.data('tfrendered') !== true) {
                    w.Triforce.getMediator().trigger('triforce:modulerender', module);
                } else {
                    w.Triforce.getMediator().trigger('triforce:priority:removemodule', module);
                }
            }

            this.timeout = w.setTimeout(function () {
                _this.nextPriority();
            }, this.waitTime);

        },

        removeModule: function ($module) {
            var len = this.processingModules.length,
                uid = $module.data('uid');

            for (var i = 0; i < len; i += 1) {
                if (this.processingModules[i] && this.processingModules[i].uid === uid) {
                    this.processingModules[i] = null;
                    this.modulesLeft -= 1;
                }
            }

            if (this.modulesLeft === 0) {
                this.processingModules = [];
                this.nextPriority();
            }
        },

        nextPriority: function () {
            w.clearTimeout(this.timeout);

            if (this.priorities.length) {
                this.renderModulesByPriority(this.priorities.shift());
            } else {
                this.waitTime = (this.numberAttempts + 1) * this.ATTEMPT_TIMEOUT;
                if (this.processingModules.length) {
                    this.tryLoadAgain();
                    if (!this.queuesFired) {
                        // let's add a wait here so modules can finish up:
                        setTimeout(function () {
                            w.Triforce.getMediator().trigger('triforce:queuesready');
                        }, 1500);

                        this.queuesFired = true;
                    }
                } else {
                    if (!this.renderComplete) {
                        this.clearState();
                        w.Triforce.getMediator().trigger('triforce:queuesready');
                        w.Triforce.getMediator().trigger('triforce:rendercomplete');

                        this.renderComplete = true;
                    }
                }
            }
        },

        checkIsPageLoaded: function () {
            var self = this;

            w.Triforce.getMediator().on('triforce:module:rendered', function () {
                self.modulesToBeRendered--;
                if (self.modulesToBeRendered < 1) {
                    w.Triforce.getMediator().trigger('triforce:complete');
                    self.modulesToBeRendered = 0;
                }
            });
        },

        clearProcessingModules: function () {
            var len = this.processingModules.length,
                cleared = [];

            for (var i = 0; i < len; i += 1) {
                if (this.processingModules[i]) {
                    cleared.push(this.processingModules[i]);
                }
            }

            this.processingModules = cleared;

        },

        tryLoadAgain: function () {
            if (this.numberAttempts < 3) {
                this.clearProcessingModules();
                this.triggerLoadModules(this.processingModules);
                this.numberAttempts += 1;
            } else {
                var modulesNotRendered = [];
                for (var i in this.processingModules) {
                    if (this.processingModules[i] && this.processingModules[i].zone) {
                        modulesNotRendered.push(this.processingModules[i].zone);
                    }
                }
                window.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'message',
                    'message': 'Zone render failure for: [' + modulesNotRendered.toString() + '] ' + this.numberAttempts + ' times. Increasing timeout.'
                });
                this.waitTime += 500;
                this.numberAttempts = 0;
                this.clearProcessingModules();
                this.triggerLoadModules(this.processingModules);
            }
        },

        modulePriorityFailed: function () {
            var len = this.processingModules.length,
                zoneList = '';

            for (var i = 0; i < len; i += 1) {
                if (this.processingModules[i]) {
                    zoneList += this.processingModules[i].zone + ', ';
                    this.processingModules[i].module.remove();
                }
            }
            this.clearState();
            w.Triforce.getMediator().message({
                'type': 'warning',
                'message': 'Some modules failed to render - the zones were ' + zoneList
            });
            w.Triforce.getMediator().trigger('triforce:rendercomplete');
        },

        clearState: function () {
            w.clearTimeout(this.timeout);
            this.waitTime = this.PRIORITY_TIMEOUT;
            this.priorities = [];
            this.modulesLeft = 0;
            this.processingModules = [];
            this.numberAttempts = 0;
            this.queuesFired = false;
            this.renderComplete = false;
        }

    });
})(jQuery, window);


(function ($, w) {
    /**
     * Triforce Queue.  This is a generic queue object for Triforce.
     *
     * Basically, it takes a set of DOM element in 'items' and performs some action on them
     * after the page has loaded.
     * @constructor
     */
    $Crabapple.TriforceQueue = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceQueue, {
        /**
         * Our stored list of queues.
         */
        _queues: {},
        /**
         * Link to the mediator.
         */
        _mediator: null,
        /**
         * Ready flag.
         */
        _ready: false,
        /**
         * Adds a Queue to our list.
         * @param queueName Queue name to add.
         * @param loadFunction Function to 'load' the queue and set it to 'ready'.
         * @param processFunction Function to process queue items.
         * @param type Type of queue (default or scroll)
         */
        addQueue: function (queueName, loadFunction, processFunction, type) {

            //if (this._queues[queueName]) {
            //    this._mediator.trigger('triforce:message', {'type':'warning', 'message':'Skipping create on ' + queueName + ' - it already exists'});
            //    return;
            //}

            if (this._queues[queueName]) {
                this._queues[queueName].loadFunction = loadFunction;
                this._queues[queueName].processFunction = processFunction;
                this._queues[queueName].type = type;
            }
            else {
                this._queues[queueName] = {
                    'loadFunction': loadFunction,
                    'processFunction': processFunction,
                    'ready': false,
                    'type': type,
                    items: []
                };
            }

        },
        /**
         * Adds an item to our queue.
         * @param queueName Name to add to the queue.
         * @param domElement DOM element to add.
         */
        addQueueItem: function (queueName, domElement) {
            if (!this._queues[queueName]) {
                this._queues[queueName] = {
                    'ready': false,
                    'items': []
                };
                this._queues[queueName].items.push(domElement);
                return true;
            }
            if (this._queues[queueName].ready === true && this._queues[queueName].type === 'default') {
                this._queues[queueName].processFunction(domElement);
            } else {
                this._queues[queueName].items.push(domElement);
            }
            return true;
        },
        /**
         * Processes a deferred queue.
         */
        processDeferredQueues: function () {
            if (this._ready) return;
            this._ready = true;
            for (var queueName in this._queues) {
                this._queues[queueName].loadFunction();
            }
        },
        /**
         * Trigger for load complete on a queue.
         * @param queueName Name of the queue that's ready.
         */
        onLoadComplete: function (queueName) {
            this._queues[queueName].ready = true;

            if (this._queues[queueName].type == 'default') {
                for (var item in this._queues[queueName].items) {
                    this._queues[queueName].processFunction(this._queues[queueName].items[item]);
                    this._queues[queueName].items.splice(item, 1);
                }
            } else {
                this.checkDeferredQueues();
            }

        },
        /**
         * This is a check for queues that have items that are deferred because of type==scroll.
         *
         * These items will only load when in view.
         */
        checkDeferredQueues: function () {
            var item;

            for (var queueName in this._queues) {
                if (this._queues[queueName].type == 'scroll') {
                    for (item in this._queues[queueName].items) {
                        if (this.isVisible(this._queues[queueName].items[item])) {
                            this._queues[queueName].processFunction(this._queues[queueName].items[item]);
                            this._queues[queueName].items.splice(item, 1);
                        }
                    }
                } else {
                    for (item in this._queues[queueName].items) {
                        this._queues[queueName].processFunction(this._queues[queueName].items[item]);
                        this._queues[queueName].items.splice(item, 1);
                    }
                }
            }
        },
        /**
         * Clears items out of our queues.
         */
        clearQueues: function () {
            for (var queueName in this._queues) {
                this._queues[queueName].items = [];
            }
            this._ready = false;
        },
        /**
         * Init function.
         */
        init: function () {
            this._mediator = w.Triforce.getMediator();
            this.addMediatorEvents();
        },
        /**
         * Adds the events we need to the mediator.
         */
        addMediatorEvents: function () {
            var _this = this;
            this._mediator.on('triforce:addqueue', function (args) {
                if (args.length && args.length > 1) {
                    var queue = args[1];
                    if (queue.queueName && queue.loadFunction && queue.processFunction) {
                        if (!queue.type) queue.type = 'default';
                        _this.addQueue(queue.queueName, queue.loadFunction, queue.processFunction, queue.type);
                    } else {
                        _this._mediator.trigger('triforce:message', {
                            'type': 'error',
                            'message': 'Error creating queue.  Missing a field (queueName, loadFunction or processFunction'
                        });
                    }
                }
            });
            this._mediator.on('triforce:addqueueitem', function (args) {
                if (args.length && args.length > 1) {
                    var queue = args[1];
                    if (queue.queueName && queue.item) {
                        _this.addQueueItem(queue.queueName, queue.item);
                    } else {
                        _this._mediator.trigger('triforce:message', {
                            'type': 'error',
                            'message': 'Error adding item to queue.  Missing a field (item or queueName'
                        });
                    }

                }
            });
            this._mediator.on('triforce:clearqueues', function () {
                _this.clearQueues();
            });
            this._mediator.on('triforce:queuesready', function () {
                _this.processDeferredQueues();
            });
            this._mediator.on('triforce:queueready', function (args) {
                if (args.length && args.length > 1) {
                    _this.onLoadComplete(args[1])
                }
            });
            this._mediator.on('triforce:pageintouch', function () {
                _this.checkDeferredQueues();
            });
        },
        /**
         * Check if an element is visible.
         * @param el A jquery selector.
         * @returns boolean
         */
        isVisible: function (el) {
            if (!el[0].parentNode) {
                return false;
            }
            var elRect = el[0].getBoundingClientRect(),
                wWidth = w.innerWidth,
                wHeight = w.innerHeight,
                hasRect = elRect.bottom || elRect.height || elRect.left || elRect.right || elRect.top || elRect.width;

            return hasRect && (elRect.top >= 0 ? elRect.top <= wHeight : elRect.bottom >= 0)
                && (elRect.left >= 0 ? elRect.left <= wWidth : elRect.right >= 0);
        }
    });
})(jQuery, window);


(function ($, w) {
    $Crabapple.TriforceScriptManager = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceScriptManager, {
        feeds: {},
        scripts: {},
        queuedScripts: {},
        feedRequests: {},
        preloadedScripts: null,

        init: function () {
            var preloadedScripts = $('[data-tfmodulescript]'),
                i, len;

            this.preloadedScripts = {};
            for (i = 0, len = preloadedScripts.length; i < len; i++) {
                this.preloadedScripts[preloadedScripts[i].src] = preloadedScripts[i];
            }
        },
        queueFeedLoad: function (feedURL, module) {
            var self = this;

            if (this.getFeedData(feedURL) != null) {
                w.Triforce.getMediator().trigger('triforce:module:feedloaded', module);
                return;
            }
            else if (feedURL == '' || feedURL == null) {
                w.Triforce.getMediator().trigger('triforce:module:feedloaded', module);
                return;
            }

            this.feedRequests[feedURL] = $.getJSON(feedURL, function (response) {
                self.feedRequests[feedURL] = null;
                w.Triforce.getMediator().trigger('triforce:feedloaded', feedURL, response, module);
            });
        },
        registerFeedLoaded: function (feedURL, feedData, module) {
            this.feeds[feedURL] = feedData;
            if (feedData && feedData.result && feedData.result.output === false) {
                module.data('tfshouldnotrender', 'true');
            }
            w.Triforce.getMediator().trigger('triforce:module:feedloaded', module);
        },
        getFeedData: function (feedURL) {
            if (this.feeds[feedURL]) return this.feeds[feedURL];
            return null;
        },
        queueJavascript: function (scriptList, module, hashList) {
            if (typeof(scriptList) == "string") {
                scriptList = scriptList.split(",");
                if (typeof(hashList) != "undefined") {
                    hashList = hashList.split(",");
                }
            }
            var scripts = '',
                hash = '';
            var self = this;
            for (var index = 0; index < scriptList.length; index++) {
                if (!this.scriptRegistered(scriptList[index]) && !this.scriptQueued(scriptList[index])) {
                    // prepend scripts string
                    scripts += (scripts == '') ? ('') : (',');
                    scripts += scriptList[index];

                    // prepend hashes string
                    if (hashList && hashList[index]) {
                        hash += (hash === '' ? '' : ',') + hashList[index];
                    }
                    this.queuedScripts[scriptList[index]] = 1;
                }
            }
            if (scripts === '') {
                this.checkAllScriptLoaded(scriptList, module);
                return;
            }

            var scriptURL = window.Triforce.config.scriptConcatenator + scripts + '?hash=' + hash,
                script = this.preloadedScripts[scriptURL],
                isScriptPreloaded = !!script;

            // create script element if script wasn't preloaded
            if (!script) {
                script = document.createElement('script');
                script.async = true;
                script.src = scriptURL;
            } else {
                // check if "preloaded" script finished loading
                if (script.getAttribute('data-loaded')) {
                    this.registerJavascript(scripts);
                    this.checkAllScriptLoaded(scriptList, module);

                    return;
                }
            }

            // script isn't loaded yet, setting up callbacks
            script.onload = function () {
                self.registerJavascript(scripts);
                self.checkAllScriptLoaded(scriptList, module);
            };
            script.onerror = function () {
                w.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Script failed to load at ' + scriptURL
                });
            };

            // if script isn't "preloaded" - set it to the page so browser starts loading it
            if (!isScriptPreloaded) {
                document.head.appendChild(script);
            }
        },
        registerJavascript: function (script) {
            this.unqueueScripts(script);
            var scriptArray = script.split(',');
            for (var i = 0; i < scriptArray.length; i++) {
                this.scripts[scriptArray[i]] = 1;
            }
        },
        checkAllScriptLoaded: function (scriptList, module) {
            var i = 0,
                len = scriptList.length,
                _this = this;

            for (i; i < len; i += 1) {
                if (!this.scriptRegistered(scriptList[i])) {
                    setTimeout(function () {
                        _this.checkAllScriptLoaded(scriptList, module);
                    }, 100);
                    return;
                }
            }

            w.Triforce.getMediator().trigger('triforce:module:scriptsloaded', module);
        },
        scriptRegistered: function (script) {
            if (this.scripts[script]) return true;
            return false;
        },
        scriptQueued: function (script) {
            if (this.queuedScripts[script]) return true;
            return false;
        },
        unqueueScripts: function (scripts) {
            var scriptList = scripts.split(",");
            for (var i = 0; i < scriptList.length; i++) {
                if (this.queuedScripts[scriptList[i]] == 1) this.queuedScripts[scriptList[i]] = 0;
            }
        },

        unqueueAllScripts: function () {
            this.queuedScripts = {};
        },

        abortAllFeedRequests: function () {
            for (var i in this.feedRequests) {
                if (this.feedRequests[i]) {
                    this.feedRequests[i].abort();
                }
            }
            this.feedRequests = {};
        },
        loadStandaloneScript: function (script, callback) {
            var self = this;
            if (this.scriptRegistered(script)) {
                callback();
            } else {
                var scriptURL = window.Triforce.config.scriptConcatenator + script,
                    scriptElement = document.createElement('script');
                scriptElement.async = 'async';
                scriptElement.type = 'text/javascript';
                scriptElement.src = scriptURL;
                scriptElement.onload = function (_, isAbort) {
                    if (!scriptElement.readyState || /loaded|complete/.test(scriptElement.readyState)) {
                        if (isAbort) {
                            return;
                        } else {
                            self.registerJavascript(script);
                            callback();
                        }
                    }
                };
                script.onerror = function () {
                    w.Triforce.getMediator().trigger('triforce:message', {
                        'type': 'error',
                        'message': 'Script failed to load at ' + scriptURL
                    });
                };
                $('head')[0].appendChild(scriptElement);
            }
        }
    });
})(jQuery, window);


(function ($, w) {
    $Crabapple.TriforceStorageManager = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceStorageManager, {
        storageEnabled: false,
        storage: null,
        indexedDB: null,
        indexedDBEnabled: false,
        dbName: 'TriforceDB',
        objectStores: [{
            'name': 'feeds',
            'keyPath': 'hash'
        }],

        init: function () {

            if (this.storageEnabled) return;

            try {
                if (w.localStorage && this.isLocalStorageEnabled()) {
                    this.storage = w.localStorage;
                    this.storageEnabled = true;
                } else {
                    this.addCookiesFallback();
                }
            } catch (e) {
                w.Triforce.getMediator().trigger('triforce:message', {
                    type: 'error',
                    message: 'Error occurred trying access to localStorage',
                    exception: e
                });

                this.addCookiesFallback();
            }
        },

        isLocalStorageEnabled: function () {
            var testKey = 'test', s = window.localStorage;
            try {
                s.setItem(testKey, '1');
                s.removeItem(testKey);
                return true;
            } catch (e) {
                return false;
            }
        },

        addCookiesFallback: function () {
            this.storage = {
                setItem: function (key, data) {
                    $.cookie(key, data);
                },

                getItem: function (key) {
                    return $.cookie(key);
                }
            };
            this.storageEnabled = true;
        },

        storeValue: function (key, value) {
            if (!this.storageEnabled) return false;
            key = this.sanitizeKey(key);
            try {
                this.storage.setItem(key, value);
            } catch (e) {
                w.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Storing ' + key + ' in local storage failed',
                    'exception': e
                });
            }
        },
        storeObject: function (key, obj) {
            if (!this.storageEnabled) return false;
            key = this.sanitizeKey(key);
            try {
                this.storage.setItem(key, JSON.stringify(obj));
            } catch (e) {
                w.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Storing ' + key + ' in local storage failed',
                    'exception': e
                });
            }
        },
        getValue: function (key) {
            if (!this.storageEnabled) return false;
            key = this.sanitizeKey(key);
            return this.storage.getItem(key);
        },
        getObject: function (key) {
            if (!this.storageEnabled) return false;
            key = this.sanitizeKey(key);
            try {
                return JSON.parse(this.storage.getItem(key));
            } catch (e) {
                w.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Retrieving ' + key + ' from local storage failed',
                    'exception': e
                });
                return false;
            }
        },
        sanitizeKey: function (key) {
            return 'triforce_' + key + '|' + window.location.hostname;
        },

        setSharedObject: function (key, value, expiry) {
            var now = new Date().getTime(),
                domain = this.getDomain(),
                expiryDays,
                storageObject;
            now = parseInt(now / 1000); // seconds
            key = domain + '|' + key;
            if (!expiry) {
                expiry = 0;
            }
            if (expiry != 0) {
                expiryDays = expiry / 60 / 24;
                expiry = now + (60 * expiry);
            }
            storageObject = {
                'value': value,
                'expiry': expiry
            };
            if (expiry != 0) {
                $.cookie(key, JSON.stringify(storageObject), {
                    path: '/',
                    domain: domain,
                    expires: expiryDays
                });
            } else {
                $.cookie(key, JSON.stringify(storageObject), {
                    path: '/',
                    domain: domain,
                    expires: 1000
                });
            }

        },
        getSharedObject: function (key) {
            var domain = this.getDomain(),
                value;
            key = domain + '|' + key;

            value = $.cookie(key);
            if (!value) {
                return null;
            } else {
                value = JSON.parse(value);
                return value.value;
            }
        },
        getDomain: function () {
            var hostname = window.location.hostname,
                hostnameParts = hostname.split('.');

            if (hostnameParts.length >= 2) {
                var tld = hostnameParts.pop(),
                    domain = hostnameParts.pop();

                return domain + '.' + tld;

            }
            else {
                if (hostname.indexOf('local') >= 0) {
                    return 'local';
                }
            }
            return 'unknown';
        },

        initIndexedDB: function () {
            if ('indexedDB' in w) {
                this.indexedDB = {};
                this.indexedDBEnabled = true;
                this.openIndexedDB();
            }
        },

        openIndexedDB: function () {
            if (!this.indexedDBEnabled) {
                return false;
            }

            var _this = this,
                version = 1,
                request;

            _this.indexedDB[this.dbName] = null;

            request = w.indexedDB.open(this.dbName, version);

            request.onupgradeneeded = function (e) {
                _this.handleUpgradeNeeded(e);
            };

            request.onsuccess = function (e) {
                _this.handleOpenDBSuccess(e);
            };

            request.onerror = this.handleIndexedDBError;

        },

        addObject: function (object, objectStoreName) {
            var db = this.indexedDB[this.dbName],
                transaction = db.transaction([objectStoreName], 'readwrite'),
                store = transaction.objectStore(objectStoreName),
                request = store.put(object),
                _this = this;

            request.onsuccess = function () {
                _this.handleAddObjectSuccess();
            };

            request.onerror = this.handleIndexedDBError;

        },

        handleAddObjectSuccess: function () {
            // TODO
        },

        handleOpenDBSuccess: function (e) {
            this.indexedDB[this.dbName] = e.target.result;
        },

        handleUpgradeNeeded: function (e) {
            var db = e.target.result;

            e.target.transaction.onerror = this.handleIndexedDBError;

            for (var i = 0; i < this.objectStores.length; i++) {
                if (db.objectStoreNames.contains(this.objectStores[i].name)) {
                    db.deleteObjectStore(this.objectStores[i].name);
                }

                db.createObjectStore(this.objectStores[i].name, {
                    keyPath: this.objectStores[i].keyPath
                });
            }
        },

        handleIndexedDBError: function (e) {
            var errorMessage = 'Error occured working with endexedDB';

            w.Triforce.getMediator().trigger('triforce:message', {
                'type': 'error',
                'message': errorMessage,
                'exception': e
            });
        }

    });
})(jQuery, window);


(function ($) {
    $Crabapple.TriforceModule = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceModule, {
        moduleElement: null,
        view: null,
        views: null,
        viewsListOrdered: null,
        helpers: null,
        feedResponse: null,
        name: 'default',
        enhance: false,
        forceHide: false,

        /**
         * Represents what events should be listened on which elements
         * the listeners will be attached to the root module element
         * and whenever event is fired we'll check if that's a target
         * element that we care about, and if it's we'll call the handler
         *
         * events: {
         *      'eventName elementSelector': 'methodName'
         * }
         *
         * @type {?object}
         */
        defaultEvents: null,

        /**
         * Represents the final events object, which can be changed by the module script based on some checks
         *
         * @type (?object)
         */
        events: null,

        /**
         * Regular expression to parse the events object key to get
         * event name and element selector it should be applied to:
         * * First group represents the event name
         * * Second group represents the selector
         *
         * @type {RegExp}
         */
        eventsSplitter: /^(\S+)\s*(.*)$/,

        init: function (element, feedData) {
            var originalData = element.data();

            this.moduleElement = element;
            this.feedResponse = feedData;
            this.events = {};
            if (this.moduleElement.data('tfdriver')) {
                this.name = this.moduleElement.data('tfdriver');
            }

            try {
                this.initializeHelpers();
                this.initViewComponents();
                this.initView();
            } catch (e) {
                // trigger an error here
                console.error('Triforce Module Render Failed: ' + this.moduleElement.attr('class'), e.message, e.stack);
                window.Triforce.getMediator().trigger('triforce:moduleRenderFailed', {
                    'instance': this,
                    'exception': e
                });
            }

            if (this.moduleElement[0] !== element[0] && this.moduleElement.data() !== originalData) {
                // temporarily solution as old modules recreate zones and we miss all the data
                this.moduleElement.data($.extend(originalData, this.moduleElement.data()));
                element.data(this.moduleElement.data());
                this.moduleElement.attr('data-zone', element.attr('data-zone'));
                this.moduleElement.attr('id', element.attr('id'));
            }

            this.moduleElement.data('tfrendered', true);
            this.moduleElement.data('tfloading', false);
            this.moduleElement.removeAttr('data-tfstatic data-tfpriority data-tfloading');

            // trigger render complete here
            window.Triforce.getMediator().trigger('triforce:moduleRenderComplete', this);
        },
        initView: function () {
            this.runViewInheritance();
            if (this.moduleElement.attr('data-tfstatic')) {
                this.enhanceModule();
            } else {
                this.drawModule();
            }
        },
        initViewComponents: function () {
            this.views = {};

            for (var viewName in this.viewNames) {
                this.views[viewName] = this.inheritView(this.viewNames[viewName]);
                this.views[viewName].init();
            }

            if (this.viewsListOrdered && this.viewsListOrdered.length) {
                var viewsList = this.viewsListOrdered,
                    viewInfo,
                    i, len;

                for (i = 0, len = viewsList.length; i < len; i++) {
                    viewInfo = viewsList[i];
                    this.views[viewInfo.name] = this.inheritView(viewInfo.viewName);
                    this.views[viewInfo.name].init();
                }
            }
        },
        processOrderedViews: function (methodName) {
            var viewsList = this.viewsListOrdered,
                views = this.views,
                data = this.data,
                viewInfo,
                coreElement,
                i, len;

            if (viewsList) {
                for (i = 0, len = viewsList.length; i < len; i++) {
                    viewInfo = viewsList[i];
                    coreElement = viewInfo.parentView ? views[viewInfo.parentView].coreElement : this.view.coreElement;

                    views[viewInfo.name][methodName](coreElement, data);
                }
            }
        },
        runViewInheritance: function () {
            //IE8 doesn't support getPrototypeOf
            var moduleController = Object.getPrototypeOf(this);

            if (!moduleController.viewName) {
                return;
            }

            this.view = this.inheritView(moduleController.viewName);
            this.view.init(this.moduleElement);
        },
        inheritView: function (fullViewName, recursiveDeep) {
            var view, parentView, viewName, extension;

            recursiveDeep = recursiveDeep || 0;
            viewName = fullViewName.split('.');
            view = window[viewName[0]][viewName[1]];

            if (typeof view === 'function') {
                return recursiveDeep ? view : new view();
            }
            if (view == null) {
                window.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Failed to load parent class for view: ' + fullViewName
                });
            }
            parentView = this.inheritView(view.parentView, recursiveDeep + 1);
            if (view.extension) {
                extension = view.extension;
            } else if (view.extention) { // spelling error
                extension = view.extention;
            }
            view = function () {
            };
            $Crabapple.extend(parentView, view, extension);
            window[viewName[0]][viewName[1]] = view;
            return recursiveDeep ? view : new view();
        },
        prepareModuleElement: function () {
            this.moduleElement.removeClass('triforce-module');
            this.moduleElement.removeAttr('data-tfpriority');
            this.addClasses();
        },
        drawModule: function () {
            this.prepareModuleElement();
            this.initializeView();
            if (this.forceHide == true) {
                this.moduleElement.hide();
                return;
            }
            this.addEvents();
            this.addAds();
            this.addLinkHandler();
        },

        /**
         * Enhances the module that's been rendered server side
         *
         */
        enhanceModule: function () {
            this.postRender();
            this.addEvents();
            this.addLinkHandler();
        },

        /**
         * Initializes the module. Renders the view and calls for enhancements.
         * If view didn't render anything - the forceHide property is being used
         *
         */
        initializeView: function () {
            var feed = this.feedResponse.result;

            if (!this.view.render(feed)) {
                this.forceHide = true;
                return;
            }

            this.postRender();
        },

        /**
         * Post render activities
         *
         */
        postRender: function () {

        },

        initializeHelpers: function () {
            this.helpers = {};

            if (!this.helperNames) return;
            for (var i in this.helperNames) {
                this.helpers[i] = this.createHelper(this.helperNames[i]);
            }
        },
        createHelper: function (helper) {
            var helperName = helper.split('.'),
                tmpHelper = false;
            try {
                tmpHelper = new window[helperName[0]][helperName[1]]();
            } catch (e) {
                window.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Error creating helper',
                    'exception': e
                });
            }
            return tmpHelper;

        },
        addEvents: function () {
            this.processEventsObject();
        },

        /**
         * Takes the `events` object and processes it so described events
         * are listened, in case if it's some of global object, you've to
         * attach it by your self, and take care about detaching it when
         * you don't need it anymore(for ex. after your module is destroyed)
         */
        processEventsObject: function () {
            var method,
                matches,
                key;

            if (this.events || this.defaultEvents) {
                this.events = $.extend({}, this.defaultEvents, this.events);

                for (key in this.events) {
                    method = this[this.events[key]];

                    if (typeof method === 'function') {
                        matches = key.match(this.eventsSplitter);

                        if (matches) {
                            this.delegateEvent(matches[1], matches[2], method);
                        } else {
                            window.Triforce.getMediator().trigger('triforce:message', {
                                type: 'warning',
                                message: 'Event is not defined right way, as it doesn\'t matche the eventsSplitter RegExp ' + key
                            });
                        }
                    } else {
                        window.Triforce.getMediator().trigger('triforce:message', {
                            type: 'warning',
                            message: 'Event handler isn\'t a function, or either is not defined for event ' + key + ': ' + this.events[key]
                        });
                    }
                }
            }
        },

        /**
         * Attaches listener to moduleElement, that decreases
         * amount of listeners that we attach to DOM nodes.
         * The handler is called within Controllers context,
         * so we still can reference to the Controller's methods.
         *
         * In case if you need to get the target element, use
         * `event.currentTarget` (an event is passed as first argument to
         * the handler function).
         *
         * @param eventName {string}
         * @param selector {?string}
         * @param handler {function}
         */
        delegateEvent: function (eventName, selector, handler) {
            if (this.moduleElement) {
                var self = this;

                this.moduleElement.on(eventName, selector, function eventHandler() {
                    handler.apply(self, arguments);
                });
            }
        },

        addClasses: function () {
            var promo = null;
            if (this.feedResponse && this.feedResponse.result) {
                if (this.feedResponse.result.promo) {
                    promo = this.feedResponse.result.promo;
                }
                if (this.feedResponse.result.promotion) {
                    promo = this.feedResponse.result.promotion;
                }
                if (this.feedResponse.result.data && this.feedResponse.result.data.promoType) {
                    promo = {};
                    promo.promoType = this.feedResponse.result.data.promoType;
                }
            }

            var regexp = this.name.match(/(ent_m[0-9]{3})_[a-zA-Z]*_.*/);
            var moduleNumber = (regexp && regexp.length > 0) ? regexp[1] : '';
            this.moduleElement.addClass('module').addClass(this.name).addClass(moduleNumber);

            if (promo && promo.promoType) {
                this.moduleElement.addClass(promo.promoType.toLowerCase());
            }
        },
        addAds: function () {
            //FIXME: this shouldn't be here
            if (this.moduleElement.find('[data-adsize]').length) {
                this.moduleElement.find('[data-adsize]').each(function () {
                    if (typeof($Crabapple.TriforceModule_reporting_v1) == 'function' && typeof('mtvn') != 'undefined') {
                        $Crabapple.TriforceModule_reporting_v1.prototype.placeAd($(this));
                    }
                    if (typeof($Crabapple.TriforceModule_ENT_Reporting) == 'function' && typeof('mtvn') != 'undefined') {
                        $Crabapple.TriforceModule_ENT_Reporting.prototype.placeAd($(this));
                    }
                });
            }
        },

        addLinkHandler: function () {
            var self = this;

            $(this.moduleElement).find('a').each(function () {
                if (!self.isTriforceLink(this)) {
                    return;
                }

                $(this).on('click', self.linkHandler);
            });
        },

        /**
         * Determines whether passed link is "Triforce" one, based on some rules
         *
         * @param {DOM.Element} link Anchor DOM element
         *
         * @returns {boolean}
         */
        isTriforceLink: function (link) {
            var $link = $(link);

            // ignore if we are not on triforce page
            if (!window.triforceManifestFeed || window.triforceManifestFeed === false) {
                return false;
            }

            // ignore notriforce links
            if ($link.hasClass('notriforce')) return false;

            // ignore target === _blank links
            if ($link.attr('target') === '_blank') return false;

            // if validTriforceLinkMask is defined AND the link doesn't match the pattern, don't capture it
            if (window.TriforceExtraConfig && window.TriforceExtraConfig.validTriforceLinkMask && window.TriforceExtraConfig.validTriforceLinkMask instanceof RegExp) {
                if (link.href.match(window.TriforceExtraConfig.validTriforceLinkMask) === null) return false;
            }

            return true;
        },

        linkHandler: function (event) {
            if (event.ctrlKey || event.metaKey) return;
            event.preventDefault();
            var href = $(this).attr('href');

            if (href.indexOf('#') === 0) {
                // on-page hash
                var anchor = $('a[name="' + href.substring(1) + '"]'),
                    anchorPos = anchor.offset(),
                    anchorName = anchor.attr('name');
                if (anchorPos && anchorPos.top) {
                    // set the hash without jumping to the anchor
                    anchor.attr('name', '');
                    document.location.hash = href;
                    anchor.attr('name', anchorName);
                    // smooth scroll to the anchor, adjusted for header
                    $('html,body').animate({
                        scrollTop: anchorPos.top - 50
                    }, 300);
                } else {
                    // the old-fashioned way; just in case
                    document.location.hash = href;
                }
                return;
            }

            if ((href.indexOf('http') === 0 && href.indexOf(window.location.host) === -1) || href.indexOf('mailto:') === 0) {
                // another domain url
                document.location.href = href;
                return;
            } else {
                window.Triforce.getMediator().trigger('triforce:loadpage', href);
            }
        },

        renderSubModule: function (wrapper, info) {
            window.Triforce.getMediator().trigger('triforce:module:process', wrapper, info);
        },

        /**
         * Determines whether the user is on mobile device or not
         *
         * @returns {bool}
         */
        isMobile: function () {
            return Triforce.getMediator().isMobile();
        },

        /**
         * Adds event listener on the Triforce Mediator. Makes sure that listeners are
         * getting removed after module element is not longer exist in the DOM.
         *
         * @param {string} eventName A name of the event to listen
         * @param {function} callback Callback that executes when event occurs
         * @param {bool} checkFired Determines whether we should check triggered events or not
         */
        on: function (eventName, callback, checkFired) {
            var mediator = Triforce.getMediator(),
                controller = this;

            mediator.on(eventName, function moduleEventListener() {
                if (!controller.moduleElement || controller.moduleElement[0].parentNode === null) {
                    mediator.off(eventName, moduleEventListener);
                    return;
                }

                callback(arguments);
            }, checkFired);
        },

        /**
         * Removes event listener from the Triforce Mediator event
         *
         */
        off: function (eventName, callback) {
            var mediator = Triforce.getMediator();

            mediator.off.apply(mediator, arguments);
        },

        /**
         * Triggers an event globally through Triforce Mediator
         *
         * @param {string} eventName
         * @param {...*} arguments
         */
        trigger: function (eventName) {
            var mediator = Triforce.getMediator();

            mediator.trigger.apply(mediator, arguments);
        },

        /**
         * Reports Click
         *
         * @param {object} reportingObject
         */
        reportClickThrough: function (reportingObject) {
            var destination = 'no destination',
                moduleAction = '';

            if (reportingObject) {
                if (reportingObject.destination) {
                    destination = reportingObject.destination;
                }
                if (reportingObject.moduleAction) {
                    moduleAction = reportingObject.moduleAction;
                }
            }

            try {
                $Crabapple.repo.trackModuleClickThrough(this.moduleName, destination, moduleAction);
            } catch (e) {
                window.Triforce.getMediator().trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Module reporting for ' + this.moduleName + ' returns error',
                    'exception': e
                });
            }
        }
    });
})(jQuery);


(function ($) {
    $Crabapple.TriforceHelper = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceHelper, {
        moduleElement: null,
        init: function (moduleElement) {
            this.moduleElement = $(moduleElement);
        }
    });
})(jQuery);


$Crabapple.TriforceMustacheView = {
    'parentView': '$Crabapple.TriforceView',
    'extention': {
        /**
         * Module element that triforce has created for you.
         *
         * @type {jQuery}
         */
        moduleElement: null,

        /**
         * Reference to Mustache templates global pool.
         * If string specified, View recognizes it as a namespace
         * and looks up for templates by that namespace
         *
         * @type {(object|string)}
         */
        templates: null,

        /**
         * Mustache template name that's one of the registered templates.
         *
         * @type {string}
         */
        templateName: null,

        /**
         * Initialization of the view.
         *
         * @param {jQuery} moduleElement - a holder for the module's stuff
         */
        init: function (moduleElement) {
            this.moduleElement = moduleElement;

            this.determineTemplatesPool();
        },

        /**
         * Creates reference to Mustache templates through this.templates. If a string defined as the `this.templates`
         * it looks up for the pool starting from `window` global object, otherwise if nothing is defined - it takes
         * $Crabapple.TriforceTemplates as the default pool, if it's null - creates an object, so when templates are
         * loaded to the page, they're referencing to that object, so everything is kept in sync
         */
        determineTemplatesPool: function () {
            // We're starting lookup from window global object
            var currentTemplatesPathCursor = window,
                templatesPoolPath,
                i, len;

            if (typeof this.templates === 'string') {
                templatesPoolPath = this.templates.split('.');

                for (i = 0, len = templatesPoolPath.length; i < len; i++) {
                    if (currentTemplatesPathCursor) {
                        currentTemplatesPathCursor = currentTemplatesPathCursor[templatesPoolPath[i]];
                    } else {
                        break;
                    }
                }

                if (!currentTemplatesPathCursor) {
                    window.Triforce.getMediator().trigger('triforce:message', {
                        type: 'error',
                        message: 'The path specified to the Mustache templates pool leads nowhere: ' + this.templates
                    });
                    return;
                }

                this.templates = currentTemplatesPathCursor;
            } else if (!this.templates) {
                // Taking `$Crabapple.TriforceTemplates` as default one, if nothing else is specified. If it's yet not
                // defined, creates a pool on that namespace(yeah, unfortunately something went wrong)
                this.templates = $Crabapple.TriforceTemplates = $Crabapple.TriforceTemplates || {};
            }
        },

        /**
         * Renders the template to some place relative(based on the `mode` param) to element on the page. If coming
         * data is an array, it loops through this array and renders the template for each item in the array.
         *
         * It also will check for images that need to be registered in the ImageBroker
         *
         * The template is taken from global templates pool
         *
         * @private
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(null|object|object[])} data - data that's needed to render the partial
         * @param {string} mode - determines how the templateOutput should be placed relative to the given $el
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplate: function (templateName, $el, data, mode) {
            var template = this.templates && this.templates[templateName],
                output,
                $tempEl,
                i, len;

            if (template) {
                if ($el && $el instanceof jQuery) {
                    if (data instanceof Array) {
                        output = '';
                        for (i = 0, len = data.length; i < len; i++) {
                            output += template.render(data[i], this.templates);
                        }
                    } else {
                        if (window.labels) {
                            if (window.labels.language) {
                                if (!data) data = [];
                                data['i18nlabels'] = window.labels;
                            }
                        }
                        output = template.render(data, this.templates);
                    }

                    // We're using <div> element to get the template output set to the defined DOM node
                    // we'd use documentFragment, but it doesn't work, cuz we can't set HTML to it
                    // We also could do innerHTML += output, but it would eventually rerender the whole element
                    $tempEl = $(document.createElement('div'));
                    $tempEl[0].innerHTML = output;
                    // We need to check if there any images rendered which ImageBroker is interested in
                    this.checkForNotQueuedImages($tempEl);

                    mode = mode || 'to';
                    if (mode === 'to') {
                        $el.append($tempEl[0].childNodes);
                    } else if (mode === 'after') {
                        $el.after($tempEl[0].childNodes);
                    } else if (mode === 'before') {
                        $el.before($tempEl[0].childNodes);
                    } else if (mode === 'insteadOf') {
                        $el.replaceWith($tempEl[0].childNodes);
                    }

                    return true;
                } else {
                    window.Triforce.getMediator().trigger('triforce:message', {
                        type: 'error',
                        message: 'Unable to render template: ' + templateName + ', because the element it should render to isn\'t defined or isn\'t a jQuery object'
                    });
                    return false;
                }
            } else {
                window.Triforce.getMediator().trigger('triforce:message', {
                    type: 'error',
                    message: 'Unable to render template: ' + templateName + ', because it\'s not registered in the pool'
                });
                return false;
            }
        },

        /**
         * Renders template. The output nodes will be placed before $el
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateBefore: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'before');
        },

        /**
         * Renders template. The output nodes will be placed after $el
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateAfter: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'after');
        },

        /**
         * Renders template. The output nodes will be placed to $el(appended)
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateTo: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'to');
        },

        /**
         * Renders template. The output nodes will be placed instead of $el
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateInsteadOf: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'insteadOf');
        },

        /**
         * Renders the view.
         * This method is in charge of getting content outputted on the page.
         *
         * @param {object} [data] - contains data and settings that are used to render template
         *
         * @returns {boolean} - returns a bool value whether view rendered successfully or not
         */
        render: function (data) {
            if (!this.templateName || !this.moduleElement || !this.templates) {
                window.Triforce.getMediator().trigger('triforce:message', {
                    type: 'error',
                    message: 'Unable to render view there are some missing properties:' +
                    (!this.templateName && '\n templateName isn\'t defined;') +
                    (!this.moduleElement && '\n moduleElement isn\'t set;') +
                    (!this.templates && '\n templates pool isn\'t defined/ready')
                });
                return false;
            }

            // We need to clean up the stuff first
            this.moduleElement.empty();
            return this.renderTemplateTo(this.templateName, this.moduleElement, data);
        }
    }
};


(function ($) {
    $Crabapple.TriforceView = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceView, {
        missingImage: (function () {
            if (config && typeof config.getMediaMissingImage === 'function') {
                return config.getMediaMissingImage();
            } else {
                return 'http://comedycentral.mtvnimages.com/images/cc_missing_v6.jpg';
            }
        })(),
        defaultQuality: 0.85,
        moduleElement: {},
        timezonesList: {
            'EST': -5
        },
        init: function (moduleElement) {
            if ($.isEmptyObject(this.moduleElement)) {
                this.moduleElement = moduleElement;
            }
        },

        /**
         * Appending dom
         */
        appendDom: function (parent, element, attributes) {
            var $element = this.createDom(element, attributes);
            try {
                parent.append($element);
            } catch (e) {
                if (console && console.log) {
                    console.log(e);
                }
            }
            return $element;
        },

        /**
         * Replaces $oldChild with $newChild
         * @returns $newChild
         */
        replaceModuleElement: function ($oldChild, $newChild) {
            $oldChild[0].parentNode && $oldChild[0].parentNode.replaceChild($newChild[0], $oldChild[0]);

            return $newChild;
        },

        /**
         * Creates module wrapper
         * @returns jQuery object of moduleWrapper
         */
        getModuleWrapper: function ($moduleElement, additionalClasses) {
            var moduleWrapper = document.createElement($moduleElement[0].nodeName);

            moduleWrapper.className = $moduleElement[0].className + ( additionalClasses ? ' ' + additionalClasses : '');

            return $(moduleWrapper);
        },

        /**
         * Creates DOM element
         */
        createDom: function (elementType, attributes) {
            var newElement = document.createElement(elementType);
            if (attributes) {
                for (var key in attributes) {
                    newElement.setAttribute(key, attributes[key]);
                }
            }

            return $(newElement);
        },


        /**
         * TODO
         */
        prependDom: function (parent, element, attributes) {
            var $element = this.createDom(element, attributes);
            try {
                parent.prepend($element);
            } catch (e) {
                if (console && console.log) {
                    console.log(e);
                }
            }
            return $element;
        },

        appendImage: function (parent, image, autoload) {
            var imageHolder,
                imageInformation;

            image = image || {};

            if (!autoload) {
                imageInformation = {
                    original: {
                        width: image.width,
                        height: image.height,
                        aspectRatio: image.height ? Math.round(image.width / image.height * 10) / 10 : null
                    },
                    src: image.url || this.missingImage,
                    quality: this.defaultQuality
                };

                imageHolder = this.appendDom(parent, 'div', {
                    'data-info': JSON.stringify(imageInformation),
                    'class': 'image_holder deferred'
                });

                this.queueImage(imageHolder, imageInformation);

                return imageHolder;
            }

            return this.appendDom(parent, 'img', {
                src: image.url + '?quality=' + this.defaultQuality
            });
        },

        /**
         * Tries to find out images that need to be queued in ImageBroker withing passed DOM element
         * It recognizes such images upon selector, the image should have class `image_holder` and
         * data attribute `data-toqueue` which is set to true. The element should also have `data-info`
         * attribute which contains information about the original image. It should be just an object(JSON):
         *
         * {
         *      "src": "http:\/\/mtv.mtvnimages.com\/crop-images\/2015\/07\/28\/MTHD0053-03_Faking_It_S2_TCA.mov.Still023_promo_edited.jpg",
         *      "quality": "0.8",
         *      "original": {
         *          "width": 1920,
         *          "height": 1080,
         *          "aspectRatio": 1.7
         *      }
         * }
         *
         * @param {jQuery} $el - the element where we search for not queued images
         */
        checkForNotQueuedImages: function ($el) {
            var notQueuedImages = $el.find('.image_holder[data-toQueue="true"]'),
                imageHolder,
                i, len;

            for (i = 0, len = notQueuedImages.length; i < len; i++) {
                imageHolder = notQueuedImages.eq(i);
                this.queueImage(imageHolder, JSON.parse(imageHolder.attr('data-info')));
                imageHolder.removeAttr('data-toQueue');
            }
        },

        /**
         * Queues the image in the ImageBroker
         *
         * @param {jQuery} imageHolder - a holder for image
         * @param {object} imageInformation - contains all the information about the image(its original dimensions etc.)
         */
        queueImage: function (imageHolder, imageInformation) {
            window.Triforce.getMediator().trigger('triforce:queueimage', {
                'holder': imageHolder[0],
                'info': imageInformation
            });
        },

        getDuration: function (duration) {
            var d = parseInt(duration),
                min = Math.floor(d / 60),
                sec = d - (60 * min);
            return min + ":" + ((sec < 10 ? '0' : '') + sec);
        },

        dateToString: function (timeStamp, format, timezone) {
            var time = parseInt(timeStamp, 10);
            if (isNaN(time)) {
                return timeStamp;
            }
            if ((new Date(time)).getFullYear() == 1970) {
                time = time * 1000;
            }
            if (timezone && this.timezonesList[timezone]) {
                time = this.getTimeInTimezone(time, timezone);
            }
            format = format || "m/d/Y";
            $Crabapple.utils.DateTime.currentDate = new Date(time);
            var result = $Crabapple.utils.DateTime.format(format);
            $Crabapple.utils.DateTime.currentDate = false;

            return result;
        },

        /**
         *
         * @param dateString - should follow RFC2822 format
         * @param format
         * @returns {String}
         */
        formatDateString: function (dateString, format) {
            if (dateString && format) {
                dateString = dateString.substr(0, dateString.length - 5); // Cut the timezone

                $Crabapple.utils.DateTime.currentDate = new Date(dateString);
                var result = $Crabapple.utils.DateTime.format(format);
                $Crabapple.utils.DateTime.currentDate = false;

                return result;
            }

            return dateString;
        },

        getTimeInTimezone: function (time, timezone) {
            var offsetDiff = this.timezonesList[timezone] - this.getFixedTimezoneOffset();

            return new Date(time + offsetDiff * 3600000/* 1hr = 60min = 3600s = 360000ms */);
        },

        getFixedTimezoneOffset: function () {
            var fullYear = new Date().getFullYear();

            // Fix offset with a possible DST change
            // Takes offset in January & July, takes max - this means that we just ignore DST
            return Math.max(new Date(fullYear, 0, 1).getTimezoneOffset(), new Date(fullYear, 6, 1).getTimezoneOffset()) / -60; // Offset is in minutes and inverted, need to get hrs
        },

        /**
         * Skip module in selenium by specific condition
         */
        forceHideByConditions: function () {
            var $module = $(this.moduleElement),
                rem_list = '';
            if ($('body').data('removedModules')) {
                rem_list = $('body').data('removedModules') + '::';
            }
            rem_list += $module[0].className;
            $('body').data('removedModules', rem_list);
        },

        /**
         * Basic triforce link behaviour
         */
        addLinkHandlers: function (wrap) {

        },
        addCssOverride: function (moduleName, cssOverrideObj) {
            var styleTag = document.getElementById(moduleName + '_colorsPallete') || document.createElement('style'),
                css = '';

            styleTag.id = moduleName + '_colorsPallete';

            if (cssOverrideObj && !jQuery.isEmptyObject(cssOverrideObj)) {

                for (var cssClass in cssOverrideObj) {
                    css += cssClass + '{';
                    for (var cssRule in cssOverrideObj[cssClass]) {
                        css += cssRule + ':' + cssOverrideObj[cssClass][cssRule] + ';'
                    }
                    css += '}'
                }

                styleTag.innerHTML = css;
                document.head.appendChild(styleTag);
            }
        }
    });
})(jQuery);

(function ($, w) {
    $Crabapple.Triforce = function () {
    };
    $Crabapple.extend($Crabapple.Class, $Crabapple.Triforce, {
        pageLoaderName: '$Crabapple.TriforcePageLoader',
        pageLoader: null,
        layoutManagerName: '$Crabapple.TriforceLayoutManager',
        layoutManager: null,
        scriptManagerName: '$Crabapple.TriforceScriptManager',
        scriptManager: null,
        feedManager: null,
        moduleRendererName: '$Crabapple.TriforceModuleRenderer',
        moduleRenderer: null,
        mediatorName: '$Crabapple.TriforceMediator',
        mediator: null,
        priorityManagerName: '$Crabapple.TriforcePriorityManager',
        priorityManager: null,
        storageManagerName: '$Crabapple.TriforceStorageManager',
        storageManager: null,
        imageBrokerName: '$Crabapple.TriforceImageBroker',
        imageBroker: null,
        queueName: '$Crabapple.TriforceQueue',
        queue: null,
        firstLoad: true,
        config: null,
        defaultLanguage: 'eng',
        init: function () {
            this.initializeConfig();
            this.initializeMediator();
            this.initializeComponents();
            this.getMediator().trigger('triforce:pageloaded');
        },
        initializeConfig: function () {
            if (window.TriforceConfiguration) {
                this.config = window.TriforceConfiguration;
            } else {
                // Default configuration object
                this.config = {
                    'debug': false,
                    'priorityTimeout': 300,
                    'stragglersTimeout': 3000,
                    'manifestFeed': '/feeds/triforce/manifest/v2',
                    'tierWrapper': false
                };
                if (typeof (config.getTriforceScriptLoader) == 'function') this.config.scriptConcatenator = config.getTriforceScriptLoader();
                if (typeof (config.getTriforceDebugEnabled) == 'function') this.config.debug = config.getTriforceDebugEnabled();
                if (typeof (config.getTriforceGlobalZones) == 'function') this.config.globalZones = config.getTriforceGlobalZones().split(',');
                if (typeof (config.getTriforceManifestFeed) == 'function') this.config.manifestFeed = config.getTriforceManifestFeed();
                if (typeof (config.getTriforcePriorityTimeout) == 'function') this.config.priorityTimeout = parseInt(config.getTriforcePriorityTimeout());
                if (typeof (config.getTriforceStragglersTimeout) == 'function') this.config.stragglersTimeout = parseInt(config.getTriforceStragglersTimeout());
                if (typeof (config.getTriforceHelpersCssPackage) == 'function') this.config.CSSHelperPackage = config.getTriforceHelpersCssPackage();
                if (typeof (config.getTriforceHelpersCssDriverName) == 'function') this.config.CSSHelperDriverName = config.getTriforceHelpersCssDriverName();
                if (typeof (config.getTriforceTierWrapper) == 'function') this.config.tierWrapper = config.getTriforceTierWrapper();
            }

            this.initializeLanguage();

        },
        initializeLanguage: function () {
            if (this.config.language) return;
            if (typeof($.cookie) == 'function') {
                var lp = $.cookie('languagePreferences');
                if (lp) {
                    this.config.languagePreference = lp;
                    if (lp.indexOf(',') >= 0) {
                        lp = lp.split(',');
                        this.config.language = lp[0];
                    } else {
                        this.config.language = lp;
                    }
                }
            }
            if (!this.config.language) {
                this.config.language = this.defaultLanguage;
            }

        },
        initializeComponents: function () {
            this.initializePageLoader();
            this.initializeModuleRenderer();
            this.initializeScriptManager();
            this.initializeLayoutManager();
            this.initializePriorityManager();
            this.initializeStorageManager();
            this.initializeImageBroker();
            this.initializeQueue();
        },
        initializePageLoader: function () {
            var pls = this.pageLoaderName.split('.');
            var namespace = pls[0];
            var moduleName = pls[1];
            this.pageLoader = new w[namespace][moduleName]();
            this.pageLoader.init();
        },
        initializeLayoutManager: function () {
            var lms = this.layoutManagerName.split('.');
            var namespace = lms[0];
            var moduleName = lms[1];
            this.layoutManager = new w[namespace][moduleName]();
            this.layoutManager.init();
        },
        initializeScriptManager: function () {
            var sms = this.scriptManagerName.split('.');
            var namespace = sms[0];
            var moduleName = sms[1];
            this.scriptManager = new w[namespace][moduleName]();
            this.scriptManager.init();
            this.feedManager = this.scriptManager;
        },
        initializeModuleRenderer: function () {
            var mrs = this.moduleRendererName.split('.');
            var namespace = mrs[0];
            var moduleName = mrs[1];
            this.moduleRenderer = new w[namespace][moduleName]();
            this.moduleRenderer.init();
        },
        initializeMediator: function () {
            var mms = this.mediatorName.split('.');
            var namespace = mms[0];
            var moduleName = mms[1];
            this.mediator = new w[namespace][moduleName]();
            this.mediator.init();
        },
        initializePriorityManager: function () {
            var pmn = this.priorityManagerName.split('.'),
                namespace = pmn[0],
                moduleName = pmn[1];
            this.priorityManager = new w[namespace][moduleName]();
            this.priorityManager.init();
        },
        initializeStorageManager: function () {
            var smn = this.storageManagerName.split('.'),
                namespace = smn[0],
                moduleName = smn[1];
            this.storageManager = new w[namespace][moduleName]();
            this.storageManager.init();
        },
        initializeImageBroker: function () {
            var smn = this.imageBrokerName.split('.'),
                namespace = smn[0],
                moduleName = smn[1];

            this.imageBroker = new w[namespace][moduleName]();
            this.imageBroker.init();
        },
        initializeQueue: function () {
            var smn = this.queueName.split('.'),
                namespace = smn[0],
                moduleName = smn[1];
            this.queue = new w[namespace][moduleName]();
            this.queue.init();
        },
        getMediator: function () {
            return this.mediator;
        },
        getPageLoader: function () {
            return this.pageLoader;
        },
        getModuleRenderer: function () {
            return this.moduleRenderer;
        },
        getPriorityManager: function () {
            return this.priorityManager;
        },
        getStorageManager: function () {
            return this.storageManager;
        },
        loadPage: function (url, pageStatus) {
            this.pageLoader.loadPage(url, pageStatus);
        },
        pageReady: function () {
            if (this.firstLoad) {
                this.firstLoad = false;
            } else {
                this.scrollToTop();
            }
            if (w.Triforce.config && w.Triforce.config.monitorEnabled) {
                w.Triforce.getMediator().trigger('triforce:monitorPageChange');
            }
            var priorities = this.layoutManager.startLayout();
            this.priorityManager.startRenderPriorities(priorities);
        },
        loadLegacyPage: function () {
            var priorities = this.layoutManager.fetchLegacyPriorities();
            if (priorities) {
                this.priorityManager.startRenderPriorities(priorities);
            }
        },
        queueFeedLoad: function (feedURL, module) {
            this.feedManager.queueFeedLoad(feedURL, module);
        },
        registerFeedLoaded: function (feedURL, feedData, module) {
            this.feedManager.registerFeedLoaded(feedURL, feedData, module);
        },
        getFeedData: function (feedURL) {
            return this.feedManager.getFeedData(feedURL);
        },
        queueJavascript: function (scripts, module, hashes) {
            this.scriptManager.queueJavascript(scripts, module, hashes);
        },
        moduleTimeout: function (module) {
            var message = 'Module ' + module.data('tfdriver') + ' failed rendering in zone ' + module.data('zone');
            this.getMediator().trigger('triforce:message', {'type': 'warning', 'message': message});
        },
        scrollToTop: function () {
            var doScroll = true,
                eventObject = {
                    preventDefault: function () {
                        doScroll = false;
                    }
                };

            this.getMediator().trigger('triforce:pageScrollToTop', eventObject);

            if (doScroll) {
                $(window).scrollTop(0);
            }
        },

        abortAllRequests: function () {
            this.scriptManager.abortAllFeedRequests();
            this.scriptManager.unqueueAllScripts();
        }
    });
})(jQuery, window);

$(document).ready(function () {
    window.Triforce = new $Crabapple.Triforce();
    window.Triforce.init();
});
/**
 * Crabapple Ads/Reporting master library.
 *
 * DO NOT EDIT!
 * PLEASE CONTACT JOHN SATERFIEL IF CHANGES ARE NEEDED
 *
 * EVENTS:
 * codaLoaded - fired at the point in the ad/reporting setup process (after repoLoaded event) even if coda was already loaded
 * repoLoaded - fired first after we've gotten the data from repo.cc.com
 * adLoaded - fired when loading ads one at a time.  Data returned: {adSize:"", keyValues:"", element:DomElement}
 *
 * SOURCE POINT:
 * Override the function $Crabapple.repo.getSourcePointData on the site level to handle source point configuration
 * expected object returned:
 *  {
 *  	enabled: true/false (default)
 *		detectionMessage: "" (html or if blank default message. must contain element with id 'AB_DURATION' if you want the countdown
 *		detectionMessageDuration: 20 (default value and in seconds)
 *		messageStyle: (styles added to the default message?)
 *		messageBackgroundStyle:  (styles added to the background)
 *  }
 */
if (typeof $Crabapple == "undefined") $Crabapple = {};

var vmn_page_data = {};

$Crabapple.repo = {
    _tag: "REPO: ",
    _codaUrl: false,
    _repoUrl: false,
    _repoData: false,
    _adsSelector: "[data-adsize][data-ad-sizes]",
    _extraKeyValues: [],
    _staticAds: true,
    _queryStringValues: {},
    _doubleClickEnabled: true,
    _hideAdBeforeLoaded: /970x66|200x31/,
    _disableAdsIfHidden: ['200x31','140x70','728x90', '300x50'],
    _trackingPixelClass: "repo_tracking_pixel",

    _log: function (msg) {
        if (typeof console != "undefined") {
            if (typeof console.debug === "function") {
                console.debug($Crabapple.repo._tag + msg);
            } else {
                console.log($Crabapple.repo._tag + msg);
            }
        }
    },

    _error: function (msg) {
        if (typeof console != "undefined") {
            console.error($Crabapple.repo._tag + msg);
        }
    },

    init: function (codaUrl, repoUrl, isStaticAds, repoData) {
        $.ajaxSetup({cache: true});
        $Crabapple.repo._log("init called");
        $Crabapple.repo._codaUrl = codaUrl;
        $Crabapple.repo._repoUrl = repoUrl;
        $Crabapple.repo._staticAds = (typeof isStaticAds == "undefined" ? true : isStaticAds);
        $Crabapple.repo._repoData = repoData;

        //parse query string for add on rules
        var queryString = location.search.substr(1).split("&");
        for (var i in queryString) {
            var pair = queryString[i];
            if (pair === "") continue;
            var parts = pair.split("=");
            $Crabapple.repo._queryStringValues[parts[0]] = decodeURIComponent(parts[1].replace(/\+/g, " "));
        }

        //check if testmode was passed
        if ($Crabapple.repo._queryStringValues.testmode != null) {
            $Crabapple.repo.addKeyValue("testmode", $Crabapple.repo._queryStringValues.testmode);
        }
        var _this = this;
        $('body').on('adLoaded', function (event, data) {
            if (data && data.element && $(data.element).attr('data-adhidden') == 'true') {
                setTimeout(function () {
                    _this.checkAdVisibility(data);
                }, 500);
            }
        });
    },

    checkAdVisibility: function (data) {
        if (data && data.element) {
            var adEl = $(data.element), _this = this;
            if (adEl.attr('data-adhidden')) {
                if (adEl.find('div > div > iframe').length && adEl.find('div > div > iframe').attr('height')) {
                    setTimeout(function () {
                        _this.showAd(adEl);
                    }, 750);
                } else {
                    setTimeout(function () {
                        _this.checkAdVisibility(data);
                    }, 500);
                }
            }
        }
    },

    showAd: function (adEl) {
        adEl.removeAttr('data-adhidden').removeAttr('style');
    },


    loadCoda: function () {
        $Crabapple.repo._log("loadCoda called");

        if (typeof btg != "undefined" &&  btg.isCoreLoaded === true) {
            //coda was already loaded so this is a pushstate page load so we need to refire tracking
            $Crabapple.repo._fireTracking();
            $('body').trigger('codaLoaded');
            return;
        }
        $('body').append('<script src="' + $Crabapple.repo._codaUrl + '" type="text/javascript"></script>');
        //$('body').append('<script id="coda_script" src="'+$Crabapple.repo._codaUrl+'" type="text/javascript"></script>');
        $Crabapple.repo._codaWait = 1;
        $Crabapple.repo._codaCallback();
    },

    _codaCallback: function () {
        $Crabapple.repo._codaWait++;
        if (typeof btg == "undefined" || btg.isCoreLoaded != true) {
            if ($Crabapple.repo._codaWait > 60) {
                $Crabapple.repo._error("gave up waiting for coda");
                return;
            }
            setTimeout($Crabapple.repo._codaCallback, 250);
            $Crabapple.repo._log("waiting on coda");
            return;
        }
        $Crabapple.repo._log("coda loaded");
        $('body').trigger('codaLoaded');
    },

    _fireTracking: function () {
        if (btg.Object.isConfigDefined(btg.config.Omniture) && btg.Omniture) {
            new btg.Omniture(btg.config.Omniture);
        }
        if (btg.Object.isConfigDefined(btg.config.Nielsen) && btg.Nielsen) {
            new btg.Nielsen(btg.config.Nielsen);
        }
        if (btg.Object.isConfigDefined(btg.config.QuantCast) && btg.QuantCast) {
            btg.ReportingManager.isScriptIncluded.quantcast = false;
            (new btg.QuantCast(btg.config.QuantCast)).sendPageCall();
        }
        if (btg.Object.isConfigDefined(btg.config.ComScore) && btg.ComScore) {
            btg.ReportingManager.isScriptIncluded.comscore = false;
            new btg.ComScore(btg.config.ComScore);
        }
        if (btg.config.ChoiceStream && btg.config.ChoiceStream.enabled && btg.ChoiceStream) {
            new btg.ChoiceStream(btg.config.ChoiceStream);
        }
        if (btg.Object.isConfigDefined(btg.config.ChoiceStream) && btg.ChoiceStream) {
            new btg.ChoiceStream(btg.config.ChoiceStream);
        }
        if (btg.Object.isConfigDefined(btg.config.Demdex) && btg.Demdex) {
            btg.Demdex.init();
            btg.Demdex.sendIdSyncCall();
        }
    },

    _loadRepo: function () {
        $Crabapple.repo._log("_loadRepo called");
        $Crabapple.repo._repoData
        var parseResponse = function (data) {
            $Crabapple.repo._log("_loadRepo response");
            $Crabapple.repo._repoData = data;

            $Crabapple.repo._parseRepoResponse();

            $('body').trigger('repoLoaded');
            $Crabapple.repo.loadCoda();
        };
        if($Crabapple.repo._repoData){
            parseResponse($Crabapple.repo._repoData);
        }else {
            $.ajax({
                dataType: "jsonp",
                url: $Crabapple.repo._repoUrl,
                jsonpCallback: 'repoLoad',
                success: parseResponse
            });
        }
    },

    loadRepoResponseFromData: function (data) {
        $Crabapple.repo._repoData = data;
        $Crabapple.repo._repoUrl = '[manual repo data load]';
        $Crabapple.repo._parseRepoResponse();
    },

    _parseRepoResponse: function () {
        if (typeof $Crabapple.repo._repoData != "object") {
            $Crabapple.repo._error("Bad response from Repo url call: " + $Crabapple.repo._repoUrl);
            return;
        }

        $Crabapple.repo._configDFPP();

        //coda init setup must be done before coda lib is loaded
        if (typeof MTVN == "undefined") MTVN = {};
        if (typeof MTVN.config == "undefined") MTVN.config = {};
        if (typeof MTVN.config.btg == "undefined") MTVN.config.btg = {};
        if (typeof MTVN.config.btg.DoubleClick == "undefined") MTVN.config.btg.DoubleClick = {};
        if (typeof MTVN.config.btg.AdSettings == "undefined") MTVN.config.btg.AdSettings = {};
        if (typeof MTVN.config.btg.AdSettings.DoubleClick == "undefined") MTVN.config.btg.AdSettings.DoubleClick = {};
        if (typeof MTVN.config.btg.ReportSettings == "undefined") MTVN.config.btg.ReportSettings = {};
        if (typeof MTVN.config.btg.ReportSettings.Omniture == "undefined") MTVN.config.btg.ReportSettings.Omniture = {};

        //ensures ads are not automatically loaded on coda load
        MTVN.config.btg.DoubleClick.auto = false;

        $Crabapple.repo._configReporting();
        $Crabapple.repo._configAds();
        $Crabapple.repo._configWebsite();
        $Crabapple.repo._configSourcePoint();
        $Crabapple.repo._configLegacy();

        $Crabapple.repo._extraKeyValues = [];
        $Crabapple.repo._log("_parseRepoResponse ended");
    },

    loadRepo: function () {
        if ($Crabapple.repo._repoUrl == false) {
            throw new Error("repo init() has not been called yet");
        }
        $Crabapple.repo._log("loadRepo called");
        $.ajax({
            dataType: "jsonp",
            url: $Crabapple.repo._repoUrl,
            jsonpCallback: 'repoLoad',
            success: function (data) {
                $Crabapple.repo._log("loadRepo response");
                $Crabapple.repo._repoData = data;
                $Crabapple.repo._parseRepoResponse();
                $('body').trigger('repoLoaded');
            }
        });

    },

    _configDFPP: function () {
        $Crabapple.repo._log("_configDFPP called");

        //add in any extra key values
        if ($Crabapple.repo._extraKeyValues) {
            for (var i in $Crabapple.repo._extraKeyValues) {
                $Crabapple.repo._repoData.doubleClick.keyValues[i] = $Crabapple.repo._extraKeyValues[i];
            }
        }

        window.vmn_page_data = {
            "metadata": $Crabapple.repo._repoData.doubleClick.metadata,
            "mappings": {
                "ad-unit": $Crabapple.repo._repoData.doubleClick.adUnits,
                "exclusion-categories": $Crabapple.repo._repoData.doubleClick.exclusionCategories
            },
            "settings": {
                "reload": $Crabapple.repo._repoData.doubleClick.adReloadable,
                "reload_interval": $Crabapple.repo._repoData.doubleClick.adReloadTime,
                "autoRefreshByVisibility": $Crabapple.repo._repoData.doubleClick.autoRefreshByVisibility
            }
        };
        if ($Crabapple.repo._staticAds) {
            window.vmn_page_data.mappings['key-values'] = $Crabapple.repo._repoData.doubleClick.keyValues;
        }
    },

    _configReporting: function () {
        $Crabapple.repo._log("_configReporting called");
        //Omniture Setup
        MTVN.config.btg.ReportSettings.Omniture.dynamicAccountList = $Crabapple.repo._repoData.omniture.dynamicAccountList;
        MTVN.config.btg.ReportSettings.Omniture.linkInternalFilters = $Crabapple.repo._repoData.omniture.linkInternalFilters;
        MTVN.config.btg.ReportSettings.Omniture.videoViewEventDisable = $Crabapple.repo._repoData.omniture.videoViewEventDisable;
        MTVN.config.btg.ReportSettings.Omniture.enableVisitorNamespace = $Crabapple.repo._repoData.omniture.enableVisitorNameSpace;
        MTVN.config.btg.ReportSettings.Omniture.defaultHier = $Crabapple.repo._repoData.omniture.defaultHier;
        MTVN.config.btg.ReportSettings.Omniture.dynamicAccountSelection = $Crabapple.repo._repoData.omniture.dynamicAccountSelection;
    },

    _configAds: function () {
        $Crabapple.repo._log("_configAds called");
        //Doubleclick Setup
        if ($Crabapple.repo._staticAds) {
            $Crabapple.repo._log("_configAds enabled ondemand ads");
            MTVN.config.btg.DoubleClick.onDemand = false;
        } else {
            $Crabapple.repo._log("_configAds setting doubleclick ads to be ondemand");
            MTVN.config.btg.DoubleClick.onDemand = true;
        }
        MTVN.config.btg.AdSettings.DoubleClick.auto = false;
        MTVN.config.btg.AdSettings.DoubleClick.autoDcopt = $Crabapple.repo._repoData.doubleClick.autoDcopt;
        MTVN.config.btg.AdSettings.DoubleClick.positionThreshold = $Crabapple.repo._repoData.doubleClick.positionThreshold;
        MTVN.config.btg.AdSettings.reloadableAds = $Crabapple.repo._repoData.doubleClick.adReloadable;
        MTVN.config.btg.AdSettings.reloadInterval = $Crabapple.repo._repoData.doubleClick.adReloadTime;
        $Crabapple.repo._doubleClickEnabled = $Crabapple.repo._repoData.doubleClick.enabled;
        if (!$Crabapple.repo._doubleClickEnabled) {
            $Crabapple.repo._log("_configAds doubleclick disabled");
        }
        //added to allow for a page template to disable poe calls
        if (true === $Crabapple.repo._repoData.doubleClick.disablePOE) {
            $Crabapple.repo._log("_configAds doubleclick disable POE call");
            MTVN.config.btg.enablePOE = false;
        }
    },

    _configWebsite: function () {
        $Crabapple.repo._log("_configWebsite called");
        window.siteSectionId = $Crabapple.repo._repoData.website.videoSiteSectionId;
        window.useSurveyString = $Crabapple.repo._repoData.website.adCall1x2;
        window.adCall6x6 = false;
        $("[data-ad-sizes=1x2]").remove();
        //add in the 1x2 ad div if required and is missing
        if ($Crabapple.repo._repoData.website.adCall1x2) {
            $('body').append('<div id="survey_ad1x2" data-adsize="1x2" data-ad-sizes="1x2" data-ad-keyvalues="" data-ad-reload-interval="-1" />');
        }
    },

    _configSourcePoint: function () {
        $Crabapple.repo._log("_configSourcePoint called");
        var data = $Crabapple.repo.getSourcePointData();
        if (null == data) {
            $Crabapple.repo._log("_configSourcePoint not configured");
            return;
        }

        MTVN.config.btg.SourcePoint = data;
    },

    //remove once all the sites are on dfpp or we've killed off the old repo code usage
    _configLegacy: function () {
        if ($Crabapple.repo._repoData.omniture.contextData) return;

        $Crabapple.repo._log("_configLegacy called");

        window.repCallObject = {
            pageName: $Crabapple.repo._repoData.omniture.pageName,
            channel: $Crabapple.repo._repoData.omniture.channel,
            prop8: $Crabapple.repo._repoData.omniture.values['prop8'],
            eVar6: $Crabapple.repo._repoData.omniture.values['eVar6'],
            events: "event16"
        };

        // Vars used for ad calls, reporting and, site section Id
        window.pageName = $Crabapple.repo._repoData.omniture.pageName;
        window.exclusionString = '';
        window.allKeyString = MTVN.config.btg.AdSettings.DoubleClick.keyValues;
    },

    trackPage: function () {
        if ($Crabapple.repo._repoData == false) {
            $Crabapple.repo._error("repo data has not been loaded yet");
            return;
        }
        $Crabapple.repo._log("trackPage called");
        //Send Reporting call
        btg.Controller.sendPageCall($Crabapple.repo.getReportingObject());
    },

    getReportingObject: function () {
        if ($Crabapple.repo._repoData == false) {
            $Crabapple.repo._error("repo data has not been loaded yet");
            return {};
        }
        $Crabapple.repo._log("getReportingObject called");

        var repCallObject = {
            pageName: $Crabapple.repo._repoData.omniture.pageName,
            channel: $Crabapple.repo._repoData.omniture.channel
        };
        if ($Crabapple.repo._repoData.omniture.values) {
            for (var i in $Crabapple.repo._repoData.omniture.values) {
                repCallObject[i] = $Crabapple.repo._repoData.omniture.values[i];
            }
            repCallObject.events = 'event16';
        }
        if ($Crabapple.repo._repoData.omniture.contextData) {
            repCallObject.contextData = {};
            for (var i in $Crabapple.repo._repoData.omniture.contextData) {
                repCallObject.contextData[i] = $Crabapple.repo._repoData.omniture.contextData[i];
            }
        }

        $Crabapple.repo._parseTempReportingValues(repCallObject);
        return repCallObject;
    },

    trackSharing: function (moduleName, shareService, linkValue, contentId, moduleAction, contentURL) {
        $Crabapple.repo._log("trackSharing called");

        if ($Crabapple.repo._repoData == false) {
            $Crabapple.repo._error("repo data has not been loaded yet");
            return;
        }

        var repoValues = {
            linkName: linkValue,
            linkType: 'o'
        };

        var parseContextData = function (contextData) {
            repoValues.contextData = contextData;
            //clean up values we shouldn't have
            delete repoValues.contextData["v.channel"];

            repoValues.contextData["v.activity"] = "sharedItem";
            repoValues.contextData["v.socMethod"] = 'share_' + shareService;
            repoValues.contextData["v.actName"] = moduleAction;
            repoValues.contextData["v.actPageName"] = $Crabapple.repo._repoData.omniture.pageName;
        };
        if ($Crabapple.repo._repoData.omniture.contextData) {
            if (typeof contentURL != "undefined" && window.location.href == contentURL) {
                parseContextData($Crabapple.repo._repoData.omniture.contextData);
            } else {
                $Crabapple.repo._log("trackSharing fetching additional repo data");

                //generate new url from passed in url (hate that we have to do this)
                var parser = document.createElement('a');
                parser.href = $Crabapple.repo._repoUrl;

                var q = parser.search;

                var qp = q.split('&');

                var itemIdFound = false;
                for (var i in qp) {
                    if (qp.indexOf('itemId') === 0) {
                        qp[i] = 'itemId=' + contentId;
                        itemIdFound = true;
                    }
                    if (qp.indexOf('url') === 0) {
                        qp[i] = 'url=' + encodeURI(contentURL);
                    }
                }
                if (!itemIdFound) {
                    qp.push('itemId=' + contentId);
                }

                parser.search = qp.join('&');

                $.ajax({
                    dataType: "jsonp",
                    url: parser.href,
                    jsonpCallback: 'repoLoad',
                    success: function (repoData) {
                        if (!repoData || !repoData.omniture || !repoData.omniture.contextData) {
                            $Crabapple.repo._log("trackSharing failed because repo data for contentId didn't return omniture.contextData");
                            $Crabapple.repo._log(parser.href);
                            return;
                        }
                        parseContextData(repoData.omniture.contextData);
                        if (null == repoValues.linkName) {
                            repoValues.linkName = moduleName;
                        }

                        $Crabapple.repo._parseTempReportingValues(repoValues);
                        if (typeof(mtvn) != 'undefined') {
                            mtvn.btg.Controller.sendLinkEvent(repoValues);
                        }
                    }
                });

                return;
            }

        } else {
            repoValues.events = "event84";
            repoValues.eVar60 = $Crabapple.repo._repoData.omniture.pageName;
            repoValues.eVar51 = 'share_' + shareService;
            repoValues.eVar16 = moduleAction || 'share tracking';
            if (typeof(contentId) != "undefined") {
                repoValues.eVar65 = contentId;
            }
        }

        if (null == repoValues.linkName) {
            repoValues.linkName = moduleName;
        }

        $Crabapple.repo._parseTempReportingValues(repoValues);
        if (typeof(mtvn) != 'undefined') {
            mtvn.btg.Controller.sendLinkEvent(repoValues);
        }
    },

    trackModuleAction: function (moduleName, moduleAction, additionalValues, additionalContextDataValues) {
        $Crabapple.repo._log("trackModuleAction called");

        if ($Crabapple.repo._repoData == false) {
            $Crabapple.repo._error("repo data has not been loaded yet");
            return;
        }

        var repoValues = {};

        if (null == repoValues.linkName) {
            repoValues.linkName = moduleName;
        }
        repoValues.linkType = 'o';
        if ($Crabapple.repo._repoData.omniture.contextData) {
            repoValues.contextData = $Crabapple.repo._repoData.omniture.contextData;
            if (typeof additionalContextDataValues != 'undefined') {
                for (var i in additionalContextDataValues) {
                    repoValues.contextData[i] = additionalContextDataValues[i];
                }
            }
            //added this because module click actions don't have an activity atm
            delete repoValues.contextData["v.activity"];

            if (!repoValues.contextData["v.destURL"]) {
                repoValues.contextData["v.destURL"] = 'no destination';
            }
            repoValues.contextData["v.actPageName"] = $Crabapple.repo._repoData.omniture.pageName;
            repoValues.contextData["v.actName"] = moduleAction;
            if ($Crabapple.repo._repoData.omniture.contextData["v.pageType"]) {
                repoValues.contextData["v.pageType"] = $Crabapple.repo._repoData.omniture.contextData["v.pageType"];
            }
            repoValues.contextData["v.modname"] = moduleName;
        } else {
            if (typeof additionalValues != 'undefined') {
                for (var i in additionalValues) {
                    repoValues[i] = additionalValues[i];
                }
            }
            repoValues.prop8 = $Crabapple.repo._repoData.omniture.values.prop8;
            repoValues.prop25 = moduleName;
            repoValues.prop26 = moduleName + '|' + $Crabapple.repo._repoData.omniture.pageName;
            if (!repoValues.prop27) {
                repoValues.prop27 = 'no destination';
            }
            if ($Crabapple.repo._repoData.omniture.values.prop28) {
                repoValues.prop28 = $Crabapple.repo._repoData.omniture.values.prop28;
            }
            if (!repoValues.eVar5) {
                repoValues.eVar5 = 'no destination';
            }
            repoValues.eVar6 = $Crabapple.repo._repoData.omniture.values.eVar6;
            repoValues.eVar7 = moduleName;
            repoValues.eVar8 = moduleName + '|' + $Crabapple.repo._repoData.omniture.pageName;
            if (typeof moduleAction != 'undefined' && moduleAction) {
                repoValues.eVar16 = moduleAction;
            }
            repoValues.eVar9 = $Crabapple.repo._repoData.omniture.pageName;
        }

        $Crabapple.repo._parseTempReportingValues(repoValues);
        if (typeof(mtvn) != 'undefined') {
            mtvn.btg.Controller.sendLinkEvent(repoValues);
        }
    },

    trackModuleClickThrough: function (moduleName, destinationURL, moduleAction, additionalValues, additionalContextDataValues) {
        $Crabapple.repo._log("trackModuleClickThrough called");
        var repoValues = {};
        var repoContextDataValues = {};

        if (typeof additionalContextDataValues != 'undefined') {
            repoContextDataValues = additionalContextDataValues;
        }

        //destination url
        var destinationURL = (typeof destinationURL != 'undefined' && destinationURL) ? destinationURL : 'no destination';
        if (destinationURL) {
            if (destinationURL.substr(0, 1) == '/') {
                destinationURL = window.location.protocol + "//" + window.location.host + destinationURL;
            }

            repoValues.eVar5 = destinationURL;
            repoValues.prop27 = destinationURL;
            repoContextDataValues["v.destURL"] = destinationURL;
        }

        if (typeof additionalValues != 'undefined') {
            repoValues = additionalValues;
        }

        var clickModuleAction = 'click tracking';
        if (typeof moduleAction != 'undefined' && null !== moduleAction) {
            clickModuleAction = moduleAction;
        }

        $Crabapple.repo.trackModuleAction(moduleName, clickModuleAction, repoValues, repoContextDataValues);
    },

    _parseTempReportingValues: function (repoData) {
        if (!repoData) {
            return;
        }
        var data = repoData;
        if (data && data.omniture) {
            data = data.omniture;
        }
        if (data.contextData) {
            //temp mapping for bento values that will eventually be passed
            var date = new Date();
            if (data.contextData["v.uuid"]) {
                data.contextData["v.uuid"] = $.cookie('vmn_uuid')
            }
            if (data.contextData["v.dayW"]) {
                var dow = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                data.contextData["v.dayW"] = dow[date.getDay()];
            }
            if (data.contextData["v.hourD"]) {
                var hours = date.getHours();
                var minutes = date.getMinutes();
                var ampm = 'AM';
                if (hours > 12) {
                    hours = hours % 12;
                    ampm = 'PM';
                }
                if (hours == 0) {
                    hours = 12
                }
                if (minutes < 30) {
                    minutes = 0;
                }
                if (minutes > 30) {
                    minutes = 30;
                }
                if (minutes < 10) {
                    minutes = '0' + minutes;
                }
                data.contextData["v.hourD"] = hours + ':' + minutes + ampm;
            }
        }
    },

    doFullPageLoad: function (doStaticAds) {
        $Crabapple.repo._log("doPageLoad called");
        if ($Crabapple.repo._repoUrl == false) {
            throw new Error("repo init() has not been called yet");
        }
        //fire off the on coda loaded event to auto load the ads and send out the page tracking
        $('body').one('codaLoaded', function () {
            $Crabapple.repo.trackPage();
            $Crabapple.repo.loadAds(doStaticAds);
            $Crabapple.repo.fireTrackingPixels();
        });
        $Crabapple.repo._loadRepo();
    },

    doFullPageLoadWithCustomAdFunc: function (func) {
        $Crabapple.repo._log("doFullPageLoadWithCustomAdFunc called");
        if ($Crabapple.repo._repoUrl == false) {
            throw new Error("repo init() has not been called yet");
        }
        //fire off the on coda loaded event to auto load the ads and send out the page tracking
        $('body').one('codaLoaded', function () {
            if (!$Crabapple.repo._staticAds) {
                btg.DoubleClick.resetSlotCounter();
            }
            $Crabapple.repo.trackPage();
            func();
            $Crabapple.repo.fireTrackingPixels();
        });
        $Crabapple.repo._loadRepo();
    },

    addKeyValue: function (key, value) {
        $Crabapple.repo._extraKeyValues[key] = value;
    },

    loadAds: function () {
        $Crabapple.repo._log("loadAds called");

        $Crabapple.repo._checkAdsCanRun();

        if (!$Crabapple.repo._doubleClickEnabled) return;

        if ($Crabapple.repo._staticAds) {
            $Crabapple.repo._log("loading all ads");
            btg.DoubleClick.createAdsFromMarkup();
        } else {
            $($Crabapple.repo._adsSelector).each(function (index, element) {
                $Crabapple.repo._log("loading ad: " + index);
                $Crabapple.repo.loadSingleAd(element);
            });
        }
    },

    fireTrackingPixels: function () {
        $Crabapple.repo._log("fireTrackingPixels called");

        $Crabapple.repo._removeTrackingPixels();

        if (!$Crabapple.repo._repoData.trackingPixels) return;

        var i = 0;

        for (i in  $Crabapple.repo._repoData.trackingPixels.floodlight) {
            $Crabapple.repo._floodlightTrackingPixel($Crabapple.repo._repoData.trackingPixels.floodlight[i]);
        }

        for (i in  $Crabapple.repo._repoData.trackingPixels.tapAd) {
            $Crabapple.repo._tapAdTrackingPixel($Crabapple.repo._repoData.trackingPixels.tapAd[i]);
        }

        for (i in  $Crabapple.repo._repoData.trackingPixels.googleAdWords) {
            $Crabapple.repo._googleAdWordsTrackingPixel($Crabapple.repo._repoData.trackingPixels.googleAdWords[i]);
        }

        for (i in  $Crabapple.repo._repoData.trackingPixels.mediaMath) {
            $Crabapple.repo._mediaMathTrackingPixel($Crabapple.repo._repoData.trackingPixels.mediaMath[i]);
        }

        for (i in $Crabapple.repo._repoData.trackingPixels.facebook) {
            $Crabapple.repo._facebookTrackingPixel($Crabapple.repo._repoData.trackingPixels.facebook[i]);
        }
    },

    _removeTrackingPixels: function () {
        $Crabapple.repo._log("_removeTrackingPixels called");
        $('.' + $Crabapple.repo._trackingPixelClass).remove();
    },

    _floodlightTrackingPixel: function (val) {
        $Crabapple.repo._log("_floodlightTrackingPixel called value: " + val);

        var floodlightTag = document.createElement('iframe');

        var pageName = encodeURIComponent($Crabapple.repo._repoData.omniture.pageName);
        var url = val.replace('[Page Name]', pageName) + ';ord=' + Math.floor((Math.random() * 100000000000));
        floodlightTag.className = $Crabapple.repo._trackingPixelClass;
        floodlightTag.width = 1;
        floodlightTag.height = 1;
        floodlightTag.frameBorder = 0;
        floodlightTag.style = 'display:none;';
        floodlightTag.src = url;

        document.body.appendChild(floodlightTag);
    },

    _googleAdWordsTrackingPixel: function (val) {
        $Crabapple.repo._log("_googleAdWordsTrackingPixel called value: " + val);

        var i = document.createElement('img');
        i.src = val;
        i.width = 1;
        i.height = 1;
        i.setAttribute('style', 'display:none');
        i.className = $Crabapple.repo._trackingPixelClass;
        document.body.appendChild(i);
    },

    _tapAdTrackingPixel: function (val) {
        $Crabapple.repo._log("_tapAdTrackingPixel called value: " + val);
        var i = document.createElement('img');
        i.src = val;
        i.width = 1;
        i.height = 1;
        i.setAttribute('style', 'display:none');
        i.className = $Crabapple.repo._trackingPixelClass;
        document.body.appendChild(i);
    },

    _mediaMathTrackingPixel: function (val) {
        $Crabapple.repo._log("_mediaMathTrackingPixel called value: " + val);
        var script = document.createElement('script');
        script.src = val;
        script.async = true;
        script.className = $Crabapple.repo._trackingPixelClass;
        document.body.appendChild(script);
    },

    _facebookTrackingPixel: function (val) {
        $Crabapple.repo._log("_facebookTrackingPixel called value: " + val);
        var script = document.createElement('script');
        script.className = $Crabapple.repo._trackingPixelClass;
        script.innerHTML = "!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,document,'script','https://connect.facebook.net/en_US/fbevents.js');" +
            "fbq('init', '" + val + "');fbq('track', 'PageView');";
        document.body.appendChild(script);
    },

    _checkAdsCanRun: function () {
        $Crabapple.repo._log("_checkAdsCanRun called");

        $($Crabapple.repo._adsSelector).each(function () {
            var size = $(this).attr("data-ad-sizes");
            //checking if the 1x2 can run
            //checking to make sure we actually have a valid ad size as all sizes are numbers separated by 'x'
            if (( $Crabapple.repo._repoData.website.adCall1x2 == false && size == "1x2")
                || null === size
                || size.indexOf('x') == -1) {
                //disable these from running
                $(this).removeAttr("data-ad-sizes");
            }
        });
    },

    _createAdObject: function (element) {
        //call the method to create new ad with the ad data values param and the container id param to inject the ad into
        var adData = {
            "size": $(element).attr("data-ad-sizes"),
            "keyValues": ""
        };
        var customKeyValues = [];
        if ($(element).attr("data-ad-keyvalues")) {
            //split them a part and ensure we're only setting the unique list of key values
            var keys = $(element).attr("data-ad-keyvalues").split(';');
            var keyValues = [];
            for (var j in keys) {
                var value = keys[j].split('=');
                customKeyValues[value[0]] = value[1];
            }
        }

        //add in custom key values
        if (customKeyValues) {
            for (var k in customKeyValues) {
                adData.keyValues += k + '=' + customKeyValues[k] + ';';
            }
        }
        for (var i in $Crabapple.repo._repoData.doubleClick.keyValues) {
            if (customKeyValues[i] == null) {
                adData.keyValues += i + '=' + $Crabapple.repo._repoData.doubleClick.keyValues[i] + ';';
            }
        }

        if ($(element).attr("data-ad-reload-interval")) {
            var reloadInterval = ($(element).attr("data-ad-reload-interval") * 1);
            if (parseFloat(reloadInterval) !== +reloadInterval) {
                if (reloadInterval == 0) {
                    reloadInterval = -1; //apparently they don't check 0
                }
                adData.reloadInterval = reloadInterval;
            }
        }

        return adData;
    },

    loadSingleAd: function (element) {
        $Crabapple.repo._log("loadSingleAd called");

        if (!$Crabapple.repo._doubleClickEnabled) return;

        if ($Crabapple.repo._repoData == false) {
            $Crabapple.repo._error("repo data has not been loaded yet");
            return;
        }
        if (typeof element == "undefined" || !element) {
            throw new Error("element does not exist that was passed to loadSingleAd");
        }
        if (null == $(element).attr("id")) {
            $(element).attr('id', 'ad_' + Math.floor(Math.random() * 100000000));
        }
        //turn off the annoying js errors from the ads
        $(element).bind('onError', function () {
            return false;
        });

        //disable these ads if they're not visible
        var size = $(element).attr("data-ad-sizes");
        if ($.inArray(size, $Crabapple.repo._disableAdsIfHidden) !== -1 && $(element).is(":hidden")) {
            return;
        }

        $Crabapple.repo._log("loading ad size: " + size);
        if ($(element).find('div').length) {
            // dont create duplicate ads if there's already a child
            $Crabapple.repo._log("Hitting race condition, tried to load an ad into something with a child ad");
            return;
        }

        //checking if the 1x2 can run
        //checking to make sure we actually have a valid ad size as all sizes are numbers separated by 'x'
        if (( $Crabapple.repo._repoData.website.adCall1x2 == false && size == "1x2")
            || null === size
            || size.indexOf('x') == -1) {
            //disable these from running
            $(element).removeAttr("data-ad-sizes");
            return;
        }

        //some fix for homepage banner and other ads that make page to jump
        if (size.match(this._hideAdBeforeLoaded)) {
            $(element).css({
                'height': '0',
                'overflow': 'hidden'
            }).attr('data-adhidden', 'true');
        } else {
            $(element).show();
        }

        //render the ad
        btg.DoubleClick.createAd($Crabapple.repo._createAdObject(element), element);
        //callback event for things like native ads that use a 7x7 call
        $('body').trigger('adLoaded', {
            adSize: size,
            keyValues: $(element).attr("data-ad-keyvalues"),
            element: element
        });
    },

    clearAds: function () {
        $($Crabapple.repo._adsSelector).children().remove();
    },

    onLoad: function (func) {
        $('body').one('codaLoaded', function () {
            func();
        });
    },

    getSourcePointData: function () {
        //Override this function on the site level to handle source point configuration
        //expected object returned:
        //{
        //	enabled: true/false (default)
        //	detectionMessage: "" (html or if blank default message. must contain element with id 'AB_DURATION' if you want the countdown
        //	detectionMessageDuration: 20 (default value and in seconds)
        //	messageStyle: (styles added to the default message?)
        // 	messageBackgroundStyle:  (styles added to the background)
        // }
        return null;
    }
};
(function(){var g=function(e,h,f,g){
this.get=function(a){for(var a=a+"=",c=document.cookie.split(";"),b=0,e=c.length;b<e;b++){for(var d=c[b];" "==d.charAt(0);)d=d.substring(1,d.length);if(0==d.indexOf(a))return d.substring(a.length,d.length)}return null};
this.set=function(a,c){var b="",b=new Date;b.setTime(b.getTime()+6048E5);b="; expires="+b.toGMTString();document.cookie=a+"="+c+b+"; path=/; "};
this.check=function(){var a=this.get(f);if(a)a=a.split(":");else if(100!=e)"v"==h&&(e=Math.random()>=e/100?0:100),a=[h,e,0],this.set(f,a.join(":"));else return!0;var c=a[1];if(100==c)return!0;switch(a[0]){case "v":return!1;case "r":return c=a[2]%Math.floor(100/c),a[2]++,this.set(f,a.join(":")),!c}return!0};
this.go=function(){if(this.check()){var a=document.createElement("script");a.type="text/javascript";a.src=g+ "&t=" + (new Date()).getTime();document.body&&document.body.appendChild(a)}};
this.start=function(){var a=this;window.addEventListener?window.addEventListener("load",function(){a.go()},!1):window.attachEvent&&window.attachEvent("onload",function(){a.go()})}};
try{(new g(100,"r","QSI_S_ZN_d4FFpJTjOeL0lN3","//znd4ffpjtjoel0ln3-viacom.siteintercept.qualtrics.com/WRSiteInterceptEngine/?Q_ZID=ZN_d4FFpJTjOeL0lN3&Q_LOC="+encodeURIComponent(window.location.href))).start()}catch(i){}})();function entitlementLoaded(){TVEAuth.Service.loaded(),TVEAuth.AEcallback&&(TVEAuth.AEcallback(),delete TVEAuth.AEcallback)}function setConfig(){TVEAuth.Service.ready()}function setToken(e,t){TVEAuth.Service.setToken(e,t)}function tokenRequestFailed(e,t){TVEAuth.Service.failedToken(e,t)}function setAuthenticationStatus(e,t){TVEAuth.Service.setStatus(e,t)}function createIFrame(e,t){TVEAuth.Service.iframe(e,t)}function destroyIFrame(){}function sendTrackingData(e,t){TVEAuth.Service.dataTracker(e,t)}function displayProviderDialog(e){TVEAuth.Service.providersDialog(e)}function selectedProvider(e){TVEAuth.Service.providerSelected(e)}function adobeErrorLogger(e){TVEAuth.Service.error(e)}var TVEAuthOptions={},TVEAuthElvisObject={},TVEAuth=function(){var e,t,i={ver:"4.6.0",build:201708250515,status:!1,urls:{ae:{dev:"https://entitlement.auth-staging.adobe.com/entitlement/js/AccessEnabler.js",live:"https://entitlement.auth.adobe.com/entitlement/js/AccessEnabler.js"},tve:{dev:"https://tve.mtvnservices-q.mtvi.com/tveauth/html5/",live:"https://tve.mtvnservices.com/tveauth/html5/"},options:{dev:"https://tve.mtvnservices-q.mtvi.com/tveauth/v2/html5/",live:"https://tve.mtvnservices.com/tveauth/v2/html5/"},xbox:{dev:"https://xbox.mtvnservices-q.mtvi.com/fpservice/special/html5/",live:"https://xbox.mtvnservices.com/fpservice/special/html5/"},fp:{dev:"https://xbox.mtvnservices-q.mtvi.com/fpservice/",live:"https://xbox.mtvnservices.com/fpservice/"},whiteList:{tve:"/extendedProvidersList?callback=TVEAuth.updProvidersList",intl_dev:"https://xbox.mtvnservices-q.mtvi.com/tveauth/v1/html5/%reqID%/getProvidersList?callback=TVEAuth.updProvidersList",intl_live:"https://xbox.mtvnservices.com/tveauth/v1/html5/%reqID%/getProvidersList?callback=TVEAuth.updProvidersList"},iui:{js_dev:e&&e.proxy?"/js/identity-ui.min-qa-no-jquery.js":"/js/identity-ui.min-qa.js",js_live:e&&e.proxy?"/js/identity-ui.min-live-no-jquery.js":"/js/identity-ui.min.js",css:"/css/identity-ui.css"}},reqID:null,resID:null,wrapObj:null,hiddenObj:null,AE:function(){return"undefined"!=typeof ae?ae:null},isAEReady:!1,isAEAppended:!1,isAEWaitingFor:!1,MVPD:null,MVPD_ID:null,Helper:null,Subscriber:{isLoggedIn:!1,provider:null,token:""},settings:{freePreview:{html:'<div class="tveapp_getfp"><p>For now, get a one time pass to access more full episodes for 24 hours</p><button class="tveapp_24h">Start 24-hour viewing pass</button></div>',expiredMessage:"<span>Your preview has ended. Sign in with your TV provider for full access</span>",logoUrl:"http://mtv.mtvnimages.com/uri/mgid:file:gsp:kids-assets:/tve/fps_black.png",trySignInMessage:'<button class="tveapp_24h">Start now</button><span>No sign in? Get a one time 24-hour viewing pass</span>',remainTimeMessage:'<span>Your preview will end in</span><span class="fp-timer">23:59</span>',loginMessage:"To start your one time 24-hour viewing pass, please sign in with one of the following:"}},initialize:function(e){if(i.reqID||i.resID)return!1;if(!e)return i.Error.showMess("Wrong Init Params"),!1;var t,r,a;if(i.settings.wrapContainer="body","string"==typeof e?(i.settings.customCSS=arguments[2]||!1,t=arguments[3],a=arguments[0],i.reqID=arguments[0],i.resID=arguments[1]||arguments[0]):(i.settings.customCSS=e.customCSS||!1,t=e.dev,a=e.brand||e.requestor,e.wrapContainer&&(i.settings.wrapContainer=e.wrapContainer),i.settings.locale=r=e.locale&&"en_US"!==e.locale?e.locale:null,i.reqID=e.requestor,i.resID=e.resource||e.requestor),i.settings.brand=a,!i.reqID||!i.resID)return i.Error.showMess("Wrong RequestorID/ResourceID"),!1;i.Debug.init(),i.Debug.info("initialization started",e),i.MegaBeacon.init("object"!=typeof e||e.megaBeaconReporting!==!1),i.MegaBeacon.startCount("initialization");var s=i.urls;t||/mtvnservices-[dq]\.mtvi\.com/.test(window.location.hostname)?(i.baseUrl=s.tve.dev,i.baseXboxUrl=s.xbox.dev,i.aeUrl=s.ae.dev,i.fpUrl=s.fp.dev,t=!0,i.awsUrl=location.protocol+"//tvejs.mtvnservices-q.mtvi.com/"+i.ver,i.iuiJSUrl=i.awsUrl+s.iui.js_dev,i.optionsUrl=s.options.dev,i.environment="staging"):(i.baseUrl=s.tve.live,i.baseXboxUrl=s.xbox.live,i.aeUrl=s.ae.live,i.fpUrl=s.fp.live,i.awsUrl=location.protocol+"//tvejs.mtvnservices.com/"+i.ver,i.iuiJSUrl=i.awsUrl+s.iui.js_live,i.optionsUrl=s.options.live,i.environment="production"),i.settings.isDev=t,i.whiteListUrl=i.baseUrl+i.reqID.toLowerCase()+s.whiteList.tve;var o=this.optionsUrl+this.ver+"/"+a,n="";i.set("RequestorID",i.reqID),i.set("ResourceID",i.resID),n=o+"/options?callback=TVEAuth.initBrand",r&&(document.body.className+=" tveint_"+r,n+="&locale="+r,i.aeUrl=i.awsUrl+"/intl/intlPassEnabler.min.js",t?i.whiteListUrl=s.whiteList.intl_dev.replace("%reqID%",i.reqID.toLowerCase())+"&locale="+r+"&deviceType=tablet":i.whiteListUrl=s.whiteList.intl_live.replace("%reqID%",i.reqID.toLowerCase())+"&locale="+r+"&deviceType=tablet"),this.jsonp(n),i.MVPD_ID=i.get("MVPD_ID")||i.get("CURRENT_PROVIDER_ID"),i.get("ELVIS_ISLOGGEDIN")?(i.isAEWaitingFor=!1,i.Auth.ready=!0):(i.isAEWaitingFor=!0,this.appendAE()),window.preauthorizedResources=function(e){var t=e&&e[0]===TVEAuthOptions.requestorID;i.triggerCallback("checkPFAcompleted",[{name:"isAuthorized",data:t}])}},appendFiles:function(e,r,a){function s(e){var r=document.createElement("script"),s=function(){};if(r.onerror=function(){i.Error.showMess("Internal TVE Services Error")},r.type="text/javascript","object"==typeof e){if(!e.src)return;e.onload&&(s=e.onload),a&&(e.src+="&tvev="+i.ver),t.extend(r,e)}else a?r.src=e+"&tvev="+i.ver:r.src=e;r.onload=function(){s(),a&&l.removeChild(r)},l.appendChild(r)}function o(e){var t=document.createElement("link");t.rel="stylesheet",t.href=e,l.appendChild(t)}var n,l=document.getElementsByTagName("head")[0];if(e instanceof Array)for(n=0;n<e.length;n++)s(e[n]);else s(e);if(r)if(r instanceof Array)for(n=0;n<r.length;n++)o(r[n]);else o(r)},jsonp:function(e){var t;if("object"==typeof e){if(t=e.data,e.src+=e.src.indexOf("?")===-1?"?":"&",t){for(var r in t)e.src+=r+"="+t[r]+"&";delete e.data}e.callback&&(e.src+="callback="+e.callback,delete e.callback)}i.appendFiles(e,null,!0)},initBrand:function(r){var a;i.Debug.info("config received",r),TVEAuthOptions=!r||r.error?{layout:{},freePreview:{}}:r,i.Vip.identityBrand=r.identityBrand,i.Vip.identityApp=r.identityApp,i.Vip.identityFBAppID=r.identityFBAppID,i.Vip.identityTheme=r.identityTheme||null,i.settings.customCSS||(i.brandCSS=a=i.awsUrl+"/"+TVEAuthOptions.requestorID+"/css/tveauth.overlays.css",i.iuiCSSUrl=i.awsUrl+"/css/identity-ui.css",this.appendFiles([],a)),r.emailTriggerImage?i.Vip.emailTriggerImage=i.awsUrl+r.emailTriggerImage:i.Vip.emailTriggerImage=i.awsUrl+"/images/email_button.png",t.extend(!0,i.settings.layout,TVEAuthOptions.layout),t.extend(!0,i.settings.freePreview,TVEAuthOptions.freePreview),i.settings.FPisActive=TVEAuthOptions.FPisActive;var s=setInterval(function(){if(i.Providers.ready&&i.Auth.ready&&!i.isAEWaitingFor){clearInterval(s),i.status=!0,i.MegaBeacon.report({beaconType:"kpi",name:"initialization"}),i.triggerCallback("componentLoaded");var e,t=window.location.search,r={};if(~t.search("resetToken")){t=t.replace("?",""),t=t.split("&");for(var a=0,o=t.length;a<o;a++)e=t[a].split("="),e[0]&&(r[e[0]]=e[1]);i.Vip.identityResetToken=r.resetToken,i.Vip.resetToken()}}},100);t(document).ready(function(){var r='<div class="tveapp_back" style="display:none;"></div><div id="tveapp_wrap" class="tveapp_wrap" style="display:none;"><div id="AccessEnablerDiv"></div><input id="selectedProvider" type="hidden"/></div>';i.wrapObj=e(r).appendTo(i.settings.wrapContainer),i.hiddenObj=e("#tveAuthObj"),i.Overlay.init(),i.Providers.init(),i.Elvis.init(),i.Error.init(i.settings.isDev),i.MegaBeacon.saveStepDuration("configuration"),/Android/i.test(navigator.userAgent)&&t(window).resize(function(){var e=t("#tveapp_wrap .tveapp_container").css("opacity",.9);setTimeout(function(){e.css("opacity",1)},5)})})},isReady:function(){return i.status===!1&&i.Error.showMess("The Component Is Not Loaded"),i.status},triggerCallback:function(e,t){var r,a=[];"function"==typeof window.Event?r=new window.Event("TVE:"+e):(r=window.document.createEvent("Event"),r.initEvent("TVE:"+e,!0,!1)),t=t||[];for(var s=0,o=t.length;s<o;s++)r[t[s].name]=t[s].data,a.push(t[s].data);i.Debug.callback(e,a),TVEAuth.Callback&&TVEAuth.Callback[e]&&TVEAuth.Callback[e](a[0],a[1]),window.document.dispatchEvent(r)},appendAE:function(e,t){if(!i.isAEReady){i.Debug.info("accessEnabler download started"),i.wrapObj&&i.Overlay.show("pleaseWait");var r=setTimeout(function(){i.isAEReady||i.Error.showMess("AccessEnabler Initialization Error")},3e4);e&&(TVEAuth.AEcallback=e),i.isAEAppended||(i.isAEAppended=!0,i.appendFiles({src:i.aeUrl,onload:function(){i.isAEReady=!0,clearTimeout(r),i.Debug.info("accessEnabler download completed")},onerror:function(){i.Error.showMess("AccessEnabler Initialization Error")}}))}},checkUserAgent:function(e){return e.test(navigator.userAgent)}};return function(){function e(){"undefined"!=typeof i.Error&&"undefined"!=typeof TVEAuth.Callback?i.Error.showMess("LocalStorage Is Unavailable"):setTimeout(e,100)}var r=function(){try{return localStorage.setItem("TVEAuth_ls","localStorage is available"),localStorage.removeItem("TVEAuth_ls"),!0}catch(e){return!1}};r()?(i.set=function(e,t){if("string"==typeof e)"object"==typeof t&&(t=JSON.stringify(t)),localStorage.setItem("TVEAuth_"+e,t);else if("object"==typeof e)for(var i in e)e.hasOwnProperty(i)&&("object"==typeof e[i]&&(e[i]=JSON.stringify(e[i])),localStorage.setItem("TVEAuth_"+i,e[i]))},i.get=function(e,t){var r=localStorage.getItem("TVEAuth_"+e);if(!t)return r;try{return JSON.parse(r)}catch(a){return i.erase(e),null}},i.erase=function(e){if("string"==typeof e)localStorage.removeItem("TVEAuth_"+e);else if("object"==typeof e)for(var t=e.length;t--;)localStorage.removeItem("TVEAuth_"+e[t])}):(e(),i.set=function(e,t,i){var r=new Date,a=i||5,s=864e5*a+r.getTime();if(r.setTime(s),"string"==typeof e)"object"==typeof t&&(t=JSON.stringify(t)),document.cookie="TVEAuth_"+e+"="+escape(t)+";expires="+r.toGMTString();else if("object"==typeof e)for(var o in e)e.hasOwnProperty(o)&&("object"==typeof e[o]&&(e[o]=JSON.stringify(e[o])),document.cookie="TVEAuth_"+o+"="+escape(e[o])+";expires="+r.toGMTString())},i.get=function(e){var i=document.cookie.split(";");e="TVEAuth_"+e+"=";for(var r=0;r<i.length;r++)if(i[r]=t.trim(i[r]),0===i[r].indexOf(e))return unescape(i[r].substring(e.length));return null},i.erase=function(e){if("string"==typeof e)i.set(e,"",-1);else if("object"==typeof e)for(var t=e.length;t--;)i.set(e[t],"",-1)}),i.storage={set:function(e,t,r){return e=e.replace(/^TVEAuth_/,""),i.set(e,t,r)},get:function(e){return e=e.replace(/^TVEAuth_/,""),i.get(e)},erase:function(e){return e=e.replace(/^TVEAuth_/,""),i.erase(e)}},window.setTimeout(function(){i.triggerCallback("apiReady")},1)}(),i.Auth={reset:function(){i.MVPD=null,i.MVPD_ID=null,i.Subscriber={isLoggedIn:!1,provider:null,token:null}},set:function(){if(i.get("ELVIS_ISLOGGEDIN"))i.Auth.ready=!0;else if(i.AE()){i.isAEWaitingFor=!1;var e={callSetConfig:!0,backgroundLogin:!0,backgroundLogout:!0,locale:i.settings.locale||"",deviceType:"tablet"};i.checkUserAgent(/FBAN|FBAV/i)&&i.checkUserAgent(/iphone|ipad/i)&&(e.backgroundLogin=!1),"undefined"!=typeof i.AE().bind&&i.AE().bind("errorEvent","adobeErrorLogger"),i.AE().setRequestor(TVEAuthOptions.requestorID||i.reqID,null,e)}else i.Error.showMess("Auth.set")},get:function(){"true"==i.get("ELVIS_ISLOGGEDIN")?(i.Elvis.Helper="checkAZ",i.Elvis.check()):(i.set({checkAZ:"true",getAZ:"true"}),i.AE().getAuthorization(TVEAuthOptions.resourceID),i.MegaBeacon.report({beaconType:"action",name:"login"}))},check:function(e){"24h"==i.get("signedInWith")?(i.MegaBeacon.startCount("authorization"),i.Vip.uninit(),i.Vip.init()):"true"==i.get("ELVIS_ISLOGGEDIN")?(i.Elvis.Helper="checkStatus",i.MegaBeacon.startCount("authorization"),i.Elvis.check()):i.AE()?(e&&(i.set("checkAZ","true"),i.AE().checkPreauthorizedResources([TVEAuthOptions.requestorID])),i.MegaBeacon.startCount("authentication"),i.AE().checkAuthentication()):i.Error.showMess("AE Is Not Loaded")},getMediaToken:function(){"24h"==i.get("signedInWith")?(i.Vip.uninit(),i.Vip.init()):"true"==i.get("ELVIS_ISLOGGEDIN")?(i.Elvis.Helper="checkStatus",i.Elvis.check()):i.AE().checkAuthorization(TVEAuthOptions.resourceID)},setMediaToken:function(e){i.getMediaTokenCallback?i.getMediaTokenCallback(e):i.triggerCallback("setMediaToken",[{name:"tokenObject",data:e}])},setANStatus:function(e,t){var r={name:"authentication",beaconType:"kpi",data:{service:i.MegaBeacon.service,provider:e?i.MVPD&&i.MVPD.displayName:null}};if("24h"===i.get("signedInWith")&&(r.name="authorization",r.data={service:"fps",provider:"fps"}),i.MegaBeacon.report(r),1==e){if(!i.MVPD)return i.AE().getSelectedProvider(),void(i._waitMVPD=!0);var a=i.MVPD;i.Subscriber.isLoggedIn=!0,i.Subscriber.provider={id:a.id||"",displayName:a.displayName||"",pickerLogoUrl:a.pickerLogoUrl||"",cobrandingLogoUrl:a.cobrandingLogoUrl||"",logoutLogoUrl:a.logoutLogoUrl||"",defaultLogoUrl:a.defaultLogoUrl||""},i.triggerCallback("checkStatusCompleted",[{name:"TVESubscriber",data:i.Subscriber}])}else i.erase(["MVPD_ID","checkAZ"]),this.reset(),"24h"!==i.get("signedInWith")?i.triggerCallback("checkStatusCompleted",[{name:"TVESubscriber",data:i.Subscriber}]):i.MVPD={displayName:"FPS",id:"FPS",defaultLogoUrl:i.settings.freePreview.logoUrl,cobrandingLogoUrl:i.settings.freePreview.logoUrl,pickerLogoUrl:i.settings.freePreview.logoUrl,logoutLogoUrl:i.settings.freePreview.logoUrl};TVEAuthOptions.waitScreen&&i.Overlay.hide("waitScreen")},setToken:function(e,t){var r,a=i.Overlay,s=i.Subscriber,o=i.MVPD||{};if("getMediaToken"===i.Helper){var n={status:"authorized",token:t};return void i.Auth.setMediaToken(n)}return i.token=s.token=t,i.MVPD?(s.isLoggedIn=!0,s.provider={id:o.id||"",displayName:o.displayName||"",pickerLogoUrl:o.pickerLogoUrl||"",cobrandingLogoUrl:o.cobrandingLogoUrl||"",logoutLogoUrl:o.logoutLogoUrl||"",defaultLogoUrl:o.defaultLogoUrl||""},void((i.get("checkAZ")||i.get("getAZ"))&&(i.get("getAZ")?i.MegaBeacon.report({beaconType:"action",name:"user_funnel"}):i.MegaBeacon.report({beaconType:"kpi",name:"authorization",data:i.MegaBeacon.getInfo()}),i.triggerCallback("checkStatusCompleted",[{name:"TVESubscriber",data:s}]),"true"==i.get("MVPD_Selected")&&(i.erase("MVPD_Selected"),i.triggerCallback("loginCompleted",[{name:"status",data:!0},{name:"mvpdId",data:i.MVPD.id}]),TVEAuthOptions.successScreen?a.show("successMessage"):TVEAuthOptions.waitScreen?a.hide("waitScreen"):a.hide(),"24h"==i.get("signedInWith")&&null==i.MVPD_ID?(a.show("fpSuccess"),i.triggerCallback("freePreviewLoginCompleted")):r={service:i.MegaBeacon.service,provider:i.MVPD&&i.MVPD.displayName},i.MegaBeacon.report({beaconType:"event",name:"login_completed",data:i.MegaBeacon.getInfo(r)})),i.erase(["checkAZ","getAZ","onLoad"])))):(i.AE().getSelectedProvider(),void(i._waitMVPD=!0))},tokenRequestFailed:function(e,t,r){if("getMediaToken"===i.Helper){var a={status:"not-authorized",token:""};return void i.Auth.setMediaToken(a)}var s,o=i.get,n=i.erase,l=i.MegaBeacon.service,c=i.MVPD&&i.MVPD.displayName||null;return i.MegaBeacon.report({beaconType:"kpi",name:"authorization",data:{service:l,provider:c}}),!o("ELVIS_ISLOGGEDIN")&&"setupElvis"!==o("onLoad")&&("vipElvis"===o("signedInWith")?(n(["signedInWith"]),!1):(i.token="","true"==o("getAZ")?(s="User not Authorized Error"===t||"User Not Authenticated Error"===t?"not_authorized":"generic",i.MegaBeacon.report({beaconType:"event",name:"login_failed",data:{reason:s,service:l,provider:c}}),n(["checkAZ","getAZ","onLoad","MVPD_Selected"]),i.Error.showMess(t),i.AE().logout(),!1):(o("checkAZ")&&(n(["checkAZ","getAZ","onLoad"]),i.Error.showMess(t)),void i.Overlay.hide("waitScreen"))))},dataTracker:function(e,t){if("mvpdSelection"==e){var r=t[0]||null;i.triggerCallback("providerSelected",[{name:"mvpdId",data:r}]),i.MVPD_ID=r,i.set({MVPD_ID:r,MVPD_Selected:"true"}),i.Providers.getProviderInfo(),i.erase(["LAST_PROVIDER_ID","LAST_PROVIDER_NAME"])}else"authorizationDetection"===e&&t[0]?("24h"===i.get("signedInWith")&&(i.erase("signedInWith"),i.set("isFPexpired","true"),i.fp.expire()),i.set({CURRENT_PROVIDER_ID:t[1],CURRENT_PROVIDER_NAME:t[1],MVPD_ID:t[1],LAST_PROVIDER_ID:t[1],LAST_PROVIDER_NAME:i.MVPD&&i.MVPD.displayName})):"authenticationDetection"===e&&t[0]&&i.set({CURRENT_PROVIDER_ID:t[1],CURRENT_PROVIDER_NAME:t[1],MVPD_ID:t[1],LAST_PROVIDER_ID:t[1]});i.Helper=null},signOut:function(e){var t;return i.erase(["CURRENT_PROVIDER_ID","CURRENT_PROVIDER_NAME","MVPD_ID"]),"24h"!==i.get("signedInWith")&&i.MegaBeacon.startCount("logout"),i.MegaBeacon.report({beaconType:"action",name:"logout",data:i.MegaBeacon.getInfo()}),"24h"==i.get("signedInWith")?void(e&&(i.Auth.signOutClearFlags(),i.Vip.uninit(),this.reset(),i.triggerCallback("logoutCompleted"))):void("true"==i.get("ELVIS_ISLOGGEDIN")?(i.Vip.uninit(),i.Elvis.signOut()):(t=i.Subscriber&&i.Subscriber.isLoggedIn,i.MegaBeacon.report({beaconType:"kpi",name:"logout",data:i.MegaBeacon.getInfo()}),this.reset(),i.isSetANStatusSkip=!0,i.AE()?i.AE().logout():i.Error.showMess("Auth.signOut"),t?i.triggerCallback("logoutCompleted"):i.Error.showMess("User Not Authenticated Error")))},signOutClearFlags:function(){i.erase(["getAZ","MVPD_ID","ELVIS_INFO","ELVIS_STATUS","signedInWith","ELVIS_METHOD","ELVIS_SUCCESS","ELVIS_NONSOCIAL","ELVIS_ISLOGGEDIN","CURRENT_PROVIDER_ID","CURRENT_PROVIDER_NAME","ELVIS_CURRENT_MVPD_ID","ELVIS_CURRENT_MVPD_NAME"])},onLoad:function(){var e=i.get("onLoad")||"none",t=i.erase;switch(e){case"User not Authorized Error":t("onLoad"),i.Error.showMess(e);break;case"setupElvis":t("onLoad"),i.Elvis.getRoadBlocker();break;default:t("onLoad")}i.get("ELVIS_SUCCESS")&&i.Overlay.show("elvisSuccess")}},i.Providers={list:null,whiteList:[],_set:function(e){if(i.checkUserAgent(/FBAN|FBAV/i)&&i.checkUserAgent(/iphone|ipad/i))return void i.AE().setSelectedProvider(e);var t,r,a=document.createElement("a");a.href=window.location.href,"undefined"!=typeof TVEAuthMVPDWindow&&TVEAuthMVPDWindow.close(),TVEAuthMVPDWindow=window.open("about:blank","mvpdwindow"),i.AE().setSelectedProvider(e),i.MegaBeacon.saveUserPath("provider_login"),t=window.setInterval(function(){TVEAuthMVPDWindow.closed&&(window.clearInterval(t),i.MegaBeacon.report({beaconType:"action",name:"user_funnel"}),window.removeEventListener("message",r))},10),r=function(e){"LOGIN_COMPLETE"===e.data&&(window.clearInterval(t),window.removeEventListener("message",r))},window.addEventListener("message",r)},saveList:function(e){return"undefined"==typeof e?void i.Error.showMess("Providers.saveList"):(this.list=e||[],i.set("MVPD_LIST",e),i.erase("providers_update"),void(e.length&&i.set("providers_update",(new Date).getTime()+36e5)))},loadList:function(){var e=i.get("MVPD_LIST",!0);return e?e:i.Error.showMess("Providers.loadList")},getMvpdCompleted:function(e){e&&e.mvpdList?(delete e.mvpdList.duration,i.MVPD=e.mvpdList,i.set({CURRENT_PROVIDER_ID:e.mvpdList.id,CURRENT_PROVIDER_NAME:e.mvpdList.displayName}),i._waitMVPD&&(i._waitMVPD=!1,i.get("getAZ")||i.get("checkAZ")?setToken(i.reqID,i.token):i.Auth.setANStatus(1,""))):(i.MVPD=null,i.erase(["CURRENT_PROVIDER_ID","CURRENT_PROVIDER_NAME"]))},loadWhiteList:function(e){var t=this;i.appendFiles([{src:i.whiteListUrl,error:function(){i._ITSEflag?(i.Error.showMess("Internal TVE Services Error"),delete i._ITSEflag):i._ITSEflag=!0}}]),setTimeout(function(){if(!i.isWLLoaded)if(e){var r=t.loadList();r?t.updProvidersList(r):i.Error.showMess("Can Not Load The White List")}else t.loadWhiteList(!0)},5e3)},updProvidersList:function(e){if(!i.isWLLoaded&&(i.MegaBeacon.saveStepDuration("whitelist"),this.whiteList=e.mvpdList||[],this.ready=!0,i.Auth.onLoad(),i.Debug.info("whitelist received"),i.isWLLoaded=!0,i.settings.locale&&(this.saveList(e.providersList||[]),!i.MVPD)))if(i.AE())i.AE().getSelectedProvider();else var t=window.setInterval(function(){i.AE()&&(window.clearInterval(t),i.AE().getSelectedProvider())},100)},verifyWhiteList:function(e){if(this.listIsActual())return this.list;var t=this.whiteList,r={},a={};if(t&&t.length){for(var s=[],o=[],n="",l=0,c=e.length;l<c;l++)e[l].ID||(e[l].ID=e[l].id||""),r[e[l].ID.toLowerCase()]=e[l];for(var l=0,c=t.length;l<c;l++)n=t[l].id.toLowerCase(),r[n]&&(t[l].pickerLogoUrl=t[l].pickerLogoUrl||r[n].logoURL||"",a={id:r[n].ID,displayName:t[l].displayName||r[n].displayName||"",pickerLogoUrl:t[l].pickerLogoUrl||null,isPrimary:t[l].isPrimary||!1,altName:t[l].altName||""},t[l].isExtended&&(a.isExtended=t[l].priority),s.push(a)),1==t[l].isSpecialProvider&&(t[l].pickerLogoUrl=t[l].pickerLogoUrl||"",o.push({id:t[l].id,displayName:t[l].displayName||"",pickerLogoUrl:t[l].pickerLogoUrl||null,isPrimary:t[l].isPrimary||!1,altName:t[l].altName||"",isSpecialProvider:!0}));s=s.concat(o)}else i.Error.showMess("Providers.verifyWhiteList"),i.erase("MVPD_LIST");return this.saveList(s),this.list},getProviderInfo:function(){if(!i.MVPD_ID)return void this.getMvpdCompleted(null);if(i.settings.locale&&i.Providers.list){for(var e=0,t=i.Providers.list.length;e<t;e++)if(i.Providers.list[e].id===i.MVPD_ID){var r={mvpdList:i.Providers.list[e]};return void this.getMvpdCompleted(r)}this.getMvpdCompleted(null)}else{if("24h"===i.get("signedInWith")&&"true"!==i.get("MVPD_Selected"))return void i.Providers.getMvpdCompleted({mvpdList:{id:"FPS",displayName:"FPS"}});i.jsonp({src:i.baseUrl+i.reqID.toLowerCase()+"/providerInfo/"+i.MVPD_ID,callback:"TVEAuth.getMvpdCompleted"})}},listIsActual:function(){return!!(!i.settings.locale&&this.list&&this.list.length&&i.get("providers_update")&&i.get("providers_update")>(new Date).getTime())},init:function(){var e=i.get("MVPD_LIST");if(e)try{e=JSON.parse(e)}catch(t){e=[]}else e=[];this.list=e,this.getProviderInfo(),this.listIsActual()&&e.length?(this.ready=!0,i.MegaBeacon.saveStepDuration("whitelist"),i.Debug.info("whitelist taken from cache")):this.loadWhiteList()}},i.settings.layout={base_html:'<div id="{id}" class="tveapp_container {addClass}"><div class="tveapp_header">{header}</div><div class="tveapp_content">{content}</div>{footer}{append}</div>',base_part:{btn_close:'<a class="tveapp_button tveapp_close">Cancel</a>',btn_back:'<a class="tveapp_button tveapp_goBack">Back</a>',btn_faq:'<a class="tveapp_button tveapp_learnMore">How this works</a>',elvis_btns:'<p>Please let %displayName% know you would like access to more %reqID% full episodes</p><ul class="tveapp_elvis_buttons_list"><li><a class="tveapp_elvis_button tveapp_button_facebook" href="https://www.facebook.com/" target="_blank">Facebook</a></li><li><a class="tveapp_elvis_button tveapp_button_twitter" href="https://twitter.com/" target="_blank">Twitter</a></li><li><a class="tveapp_elvis_button tveapp_button_mail" href="mailto:sample.example.com">Contact</a></li></ul>',text_dontSeeProvider:"Don&#8217;t see Your Provider?"},selectProvider:{id:"tveapp_selectProvider",header:"%btn_back%%btn_close%",content:'<ol class="tveapp_actions"><li class="tveapp_active">1. Select provider</li> <li>2. Sign In</li> <li>3. Watch</li></ol><p class="tveapp_description">Get access to more full episodes by signing in with your TV provider <a class="tveapp_button tveapp_learnMore">ⓘ</a></p><div id="tveapp_searchBox" class="tveapp_searchBox"><span class="tveapp_wrapSearch"><label class="placeholder" for="tveapp_search">Type in provider name</label><input name="search" type="text" id="tveapp_search" class="tveapp_search" autocomplete="off" value="" /></span><a class="tveapp_searchButton">GO</a></div>',footer:'<div id="providersWrapper"></div><div id="extraMvpdWrapper"></div><div class="tveapp_footbutton"><div class="viewAllProviders">View all providers</div></div><div class="tveapp_footmessage"></div>'},dontSeeUrMvpd:{id:"tveapp_dontSeeUrMvpd",header:"%btn_back%%btn_close%",content:"<div class=\"tveapp_dontSeeUrMvpdMessage\"><h5>If your provider is not listed, don't panic.</h5><p>We're working hard to get all tv providers to participate.</p></div>"},successMessage:{id:"tveapp_success",header:"%btn_close%",content:'<div class="tveapp_successMessage"><h5>CONGRATULATIONS!</h5><p><strong>You are now signed in with</strong></p><div id="tveapp_mvpdLogo"></div><p>You now have access to watch all your favorite shows.</p><p><a class="tveapp_button tveapp_close tveapp_watchNow" tvecallback="startWatching">Watch Now</a><a class="tveapp_button tveapp_signOut" onclick="TVEAuth.API.logout();">Sign Out</a></p></div>'},signOut:{id:"tveapp_signOut",header:"%btn_close%",content:'<div class="tveapp_successMessage"><h5>CONGRATULATIONS!</h5><p><strong>You are now signed in with</strong></p><div id="tveapp_signOutMvpdLogo"></div><p>You now have access to watch all your favorite shows.</p><p><a class="tveapp_button tveapp_signOut" onclick="TVEAuth.API.logout();">Sign Out</a></p></div>'},error:{id:"tveapp_error",header:"<h4>Sorry</h4>%btn_close%",content:'<p id="tveapp_error_mess"></p>'},learnMore:{id:"tveapp_learnMore",header:"<h4>Login with your provider to unlock more full episodes!</h4>%btn_close%",content:'<h5>To get these full episodes, follow the steps below.</h5><div class="tveapp_faq"></div>',footer:'<a class="tveapp_button tveapp_close">Get started</a>',append:""},pleaseWait:{id:"tveapp_pleaseWait",header:"%btn_close%",content:"Please wait..."},iframeWrapper:{id:"tveapp_iframeWrap",addClass:"mvpdWrapBox",header:"%btn_back%<h4>log in</h4>%btn_close%"},elvisLogin:{id:"tveapp_elvisLogin",header:"%btn_back%%btn_close%",content:'<h5>Please sign in with one of the following:</h5><ul class="tveapp_elvis_buttons_list"><li><a class="tveapp_elvis_button" elvisby="facebook">Facebook</a></li><li><a class="tveapp_elvis_button" elvisby="twitter">Twitter</a></li><li><a class="tveapp_elvis_button" elvisby="mail">Sign In / Register</a></li></ul>',footer:"Viacom reserves the right to discontinue access at any time"},elvisSuccess:{id:"tveapp_elvisSuccess",header:"%btn_close%",content:'<h5>Congratulations!</h5><p>You have successfully signed in</p><ul class="tveapp_elvis_buttons_list"><li><a class="tveapp_button tveapp_close tveapp_watchNow" tvecallback="startWatching">Watch Now</a></li><li><a class="tveapp_button tveapp_signOut" onclick="TVEAuth.API.logout();">Sign Out</a></li></ul>',footer:"Viacom reserves the right to discontinue access at any time"},elvisSignOut:{id:"tveapp_elvisSignOut",header:"%btn_close%",content:'<h5>Congratulations!</h5><p>You have successfully signed in</p><ul class="tveapp_elvis_buttons_list"><li><a class="tveapp_button tveapp_close tveapp_watchNow">Watch Now</a></li><li><a class="tveapp_button tveapp_signOut" onclick="TVEAuth.API.logout();">Sign Out</a></li></ul>',footer:"Viacom reserves the right to discontinue access at any time"},elvisEnded:{id:"tveapp_elvisEnded",header:"%btn_close%",content:'<h5>Your full access has ended.</h5><p>Don\'t panic. We are working hard to get %displayName% to participate.</p><div class="tveapp_buttons_row"><a class="tveapp_button tveapp_close">OK</a></div>',footer:"%elvis_btns%"},elvisTerminated:{id:"tveapp_elvisTerminated",header:"%btn_close%",content:'<p><strong>At the request of %displayName%, %reqID% is no longer able to provide %displayName% customers with full access to the %reqID% website.</strong></p><p>We are working hard to restore your full access.</p><div class="tveapp_buttons_row"><a class="tveapp_button tveapp_close">OK</a></div>',footer:"%elvis_btns%"},vipLogin:{id:"tveapp_vipLogin",header:"%btn_back%%btn_close%",content:'<div id="iui-component"></div>',footer:"Viacom reserves the right to discontinue access at any time"},fpSuccess:{id:"tveapp_fpSuccess",header:"%btn_close%",content:'<div style="text-align:center;"><p>Your 24-hour viewing pass has now started</p><p class="tveapp_fpexpires">When your viewing pass expires, sign in with your tv provider username and password for unlimited access to all full episodes</p><p class="tveapp_footmessage"><span class="">Your preview will end in</span><span class="fp-timer">23:59</span></p><p><a class="tveapp_close tveapp_watchNow" tvecallback="startWatching">Watch now</a></p></div>',footer:""},fpSignOut:{id:"tveapp_fpSignOut",header:"%btn_close%",content:'<div style="text-align:center;"><p>You have active Free Preview access!</p><p>Free Preview will end in <span class="fp-timer">23:59</span></p><p><a class="tveapp_close" tvecallback="startWatching">Watch videos</a> or <a class="tveapp_close" onclick="TVEAuth.API.logout();">Sign Out</a></p></div>',footer:""}},i.Overlay={isClosedByUser:!0,list:{},get:function(r,a){if(this.list[r])return this.list[r];var s,o="<!-- TVEAuth.Overlay: "+r+" -->",n=TVEAuthOptions,l=i.settings.layout,c=i.MVPD;switch(o=l[r]?this.render(l[r]):o,r){case"selectProviderNew":if(o=="<!-- TVEAuth.Overlay: "+r+" -->"){var p,d=JSON.parse(i.get("MVPD_LIST")),u='<div class="getFullMvpdListButtonWrapper"><a id="getFullMvpdListButton" class="getFullMvpdListButton">see all providers</a></div>',v='<div class="tveapp_getFreePreviewButtonWrapper"></div>';TVEAuthOptions.FPisActive;s=this.getList(d,"inlineView")||[],o=e('<div id="primaryListWrapper" class="primaryListWrapper"></div>').append(s[1]).add(e(u+v)),p=e('<div id="tveapp_pickerWrapper" class="mvpdPickerWrapper"></div>').append(o),this.attachEvents(o,r),i.Providers.list.length&&(this.list[r]=o)}return o;case"selectProvider":o=t(o),s=this.getList(i.Providers.list,"defaultView")||[],o.find("#providersWrapper").append(s[0]),n.primaryList!==!1&&o.find("#extraMvpdWrapper").append(s[1]).find(".tveapp_ePL-link").append("<i></i>"),i.Providers.list.length&&(this.list[r]=o);break;case"learnMore":if(o=t(o),"object"!=typeof TVEAuthFAQ)return this.hide(),!1;var h="<dl>"+TVEAuthFAQ.items.map(function(e){return"<dt>"+e[0]+"</dt><dd>"+e[1]+"</dd>"}).join("")+"</dl>";o.find(".tveapp_faq").html(h),TVEAuthFAQ.toggleable&&o.find(".tveapp_faq").addClass("toggleable"),this.list[r]=o;break;case"dontSeeUrMvpd":if(i.settings.freePreview){var g=l[r].content;"24h"===i.get("signedInWith")||"true"===i.get("isFPexpired")?l[r].content+='<div class="tveapp_footmessage"></div>':i.Elvis.isNonSocial()||(l[r].content+=i.settings.freePreview.html),o=t(this.render(l[r])),l[r].content=g}else o=t(this.render(l[r]));break;case"signOut":case"successMessage":var f=a&&a.logoutLogoUrl?a.logoutLogoUrl:c&&c.logoutLogoUrl?c.logoutLogoUrl:"",E=a&&a.displayName?a.displayName:c&&c.displayName?c.displayName:"",m=a&&a.id?a.id:c&&c.id?c.id:"",_=f?'<img src="'+f+'" alt="'+m+'" title="'+E+'" />':"";o=t(o),"successMessage"===r?(o.find("#tveapp_mvpdLogo").html(_),o.find("#tveapp_mvpdName").text(E)):o.find("#tveapp_signOutMvpdLogo").html(_);break;case"elvisEnded":case"elvisTerminated":var E=a&&a.displayName?a.displayName:c?c.displayName:"Your provider";o=o.replace(/%displayName%/g,E),o=o.replace(/%reqID%/g,i.reqID),o=t(o),this.list[r]=o;break;case"fpSuccess":case"fpSignOut":o=t(o),i.Overlay.timer(o.find(".fp-timer")),this.list[r]=o;break;case"error":var b=a||"";o=t(o),o.find("#tveapp_error_mess").html(b),this.list[r]=o;break;default:o=t(o),this.list[r]=o}return"#comment"!==o[0].nodeName&&i.Overlay.attachEvents(o,r),o.appendTo(t("#tveapp_wrap"))},render:function(e){function t(e,t){for(var i in t)e=e.replace(new RegExp("{"+i+"}","g"),t[i]);return e}function r(e,t){for(var i in t)e=e.replace(new RegExp("%"+i+"%","g"),t[i]);return e}var a=i.settings.layout,s={id:e.id,addClass:e.addClass||"",header:e.header||"",content:e.content||"",footer:e.footer?'<div class="tveapp_footer">'+e.footer+"</div>":"",append:e.append||""};return r(t(a.base_html,s),a.base_part)},init:function(){var e="click.tveevent",r=i.Overlay;i.Overlay.dragging=!1,i.settings.layout.base_part.base_url_ver=i.awsUrl,TVEAuthOptions.fullScreenActivated&&t("html").addClass("tveapp_fullScreenActivated"),t("#tveapp_wrap").on("mouseup.tveevent touchend.tveevent",function(e){t(e.target).closest("#tveapp_search, #providersWrapper").length||(i.isGFLBP||(t("#tveapp_selectProvider").removeClass("tveapp_searchActivated"),(!i.get("isFPexpired")||i.get("isFPexpired")&&i.get("FPexpiresDate"))&&t("#tveapp_selectProvider .tveapp_footmessage").show()),
t("#tveapp_search").blur()),t(e.target).closest("#providersWrapper").length&&!t(e.target).closest(".tveapp_pL-link").length&&(e.preventDefault(),e.stopPropagation())}).on("touchmove",function(){i.Overlay.dragging=!0}).on("touchstart",function(){i.Overlay.dragging=!1}).on(e,function(e){var a=e.target.classList,s=i.erase,o=t(e.target).closest(".tveapp_container")[0];if(o)if(o=o.id,a.contains("tveapp_close")){switch(o){case"tveapp_selectProvider":r.clearSearchField(),s(["MVPD_Selected","onLoad","getAZ","CURRENT_PROVIDER_ID","CURRENT_PROVIDER_NAME"]);break;case"tveapp_elvisLogin":r.clearSearchField(),s(["MVPD_Selected","onLoad","getAZ","ELVIS_CURRENT_MVPD_ID","ELVIS_CURRENT_MVPD_NAME"]),i.set("isSetANStatusSkip","true");break;case"tveapp_pleaseWait":s("onLoad");break;case"tveapp_elvisSuccess":s(["onLoad","ELVIS_SUCCESS"]);break;case"tveapp_elvisEnded":s("ELVIS_ENDEDMESSAGE");break;case"tveapp_elvisTerminated":s("ELVIS_TERMINATEDMESSAGE");break;case"tveapp_iframeWrap":r.clearSearchField(),r.closeIFrame(),s(["MVPD_Selected","onLoad","getAZ"]),i.set("isSetANStatusSkip","true");break;case"tveapp_dontSeeUrMvpd":s(["MVPD_Selected","onLoad","getAZ"]);break;case"tveapp_fpSuccess":r.clearSearchField(),i.Vip.uninit();break;case"tveapp_vipLogin":var n=i.Vip.flow;"24h"==n?(r.clearSearchField(),i.Vip.uninit()):"vipElvis"==n?(r.clearSearchField(),i.Vip.uninit(),r.show("selectProvider"),s(["MVPD_Selected","onLoad","getAZ","ELVIS_CURRENT_MVPD_ID","ELVIS_CURRENT_MVPD_NAME"])):"resetToken"==n?i.Vip.updateUrl():i.Error.showMess("Error happend when was closed #tveapp_vipLogin")}switch(o){case"tveapp_selectProvider":case"tveapp_elvisLogin":case"tveapp_elvisEnded":case"tveapp_elvisTerminated":case"tveapp_dontSeeUrMvpd":case"tveapp_vipLogin":i.MegaBeacon.report({beaconType:"action",name:"user_funnel"})}r.hide()}else if(a.contains("tveapp_goBack"))switch(o){case"tveapp_selectProvider":r.clearSearchField();break;case"tveapp_iframeWrap":r.clearSearchField(),i.erase(["ELVIS_CURRENT_MVPD_ID","ELVIS_CURRENT_MVPD_NAME"]),r.show("selectProvider"),r.forceHideKeyboard();break;case"tveapp_elvisLogin":r.clearSearchField(),r.show("selectProvider");break;case"tveapp_dontSeeUrMvpd":r.show("selectProvider");break;case"tveapp_learnMore":TVEAuthFAQ.backOverlay&&i.settings.layout[TVEAuthFAQ.backOverlay]?(r.show(TVEAuthFAQ.backOverlay),TVEAuthFAQ.backOverlay=null):r.hide();break;case"tveapp_vipLogin":var n=i.Vip.flow;r.clearSearchField(),i.Vip.uninit(),r.show("selectProvider"),i.erase(["MVPD_ID","MVPD_Selected","ELVIS_CURRENT_MVPD_ID","ELVIS_CURRENT_MVPD_NAME"]),"resetToken"==i.Vip.flow&&i.Vip.updateUrl()}else a.contains("tveapp_signOut")?r.mark(t(e.target)):a.contains("tveapp_24h")&&(e.preventDefault(),i.Vip.flow="24h",i.MVPD={id:"FPS",displayName:"FPS"},i.set("MVPD_Selected","true"),i.MegaBeacon.report({beaconType:"action",name:"select_provider",data:{service:"fps",provider:"fps"}}),i.triggerCallback("freePreviewWasStarted"),i.Vip.init())}),i.Overlay.noblur=!1},clearSearchField:function(){if(i.Overlay.list.selectProvider){var e=i.Overlay.list.selectProvider;i.isGFLBP||e.removeClass("tveapp_quickSearch tveapp_searchActivated"),e.find("#tveapp_search").val("").blur(),i.Overlay.list.selectProvider.find(".tveapp_pL-item").removeAttr("style"),t("#tveapp_selectProvider .tveapp_footmessage").show()}},attachEvents:function(r,a){var s=i.Overlay,o="click.tveevent";return"selectProviderNew"===a?(r.on(o,function(e){var t;if(e.preventDefault(),!i.Overlay.dragging){if(e.target.classList.contains("tveapp_24h"))return e.preventDefault(),i.Helper="getAZ",i.Vip.flow="24h",i.set({MVPD_Selected:"true",checkAZ:"true",getAZ:"true"}),void i.Vip.init();if(e.target.hasAttribute("mvpdid"))t=e.target;else{if(!e.target.parentNode.hasAttribute("mvpdid"))return;t=e.target.parentNode}i.Auth.get(),i.Providers._set(t.getAttribute("mvpdid")),i.Overlay.hide()}}),r.find("a[elvismvpd]").on(o,function(t){if(t.preventDefault(),!i.Overlay.dragging){s.clearSearchField();var r=e(this),a=r.attr("elvismvpd"),o=r.find("img").attr("alt")||r.find("span").text();i.MVPD={id:a,displayName:o},i.Helper="getAZ",i.Vip.flow="vipElvis",i.Elvis.mvpdSelected()}}),r.find("#getFullMvpdListButton").on(o,function(e){e.preventDefault(),e.stopPropagation(),i.Overlay.dragging||(s.clearSearchField(),i.API.login(),i.isGFLBP=!0)}),!1):("selectProvider"===a?(r.find("#tveapp_search").on("touchstart",function(e){this!==document.activeElement&&(e.preventDefault(),this.focus())}).on("focus",function(){i.Overlay.noblur=!0,setTimeout(function(){i.Overlay.noblur=!1},400),t(this).closest(".tveapp_container").find(".placeholder").hide(),t("#tveapp_selectProvider").addClass("tveapp_searchActivated")}).on("blur",function(){return i.Overlay.noblur?void t(this).focus():void(""===this.value&&t(this).closest(".tveapp_container").find(".placeholder").show())}).on("change.tveevent input.tveevent keydown.tveevent",function(e){var i=" "+t.trim(this.value.toLowerCase()),r="",a=t("#providersWrapper"),s=a.find(".tveapp_pL-item");1===i.length?s.show():s.each(function(){r=" "+t(this).find(".tveapp_pL-link").attr("tveapp_alt").toLowerCase().replace(/,/g," "),t(this).toggle(r.indexOf(i)!==-1)}),s=s.add(a.find(".tveapp_pL-item-extra"));var n=0;t(window).height()===t("#tveapp_selectProvider").height()&&(n=0,parseInt(t(".tveapp_footer").css("margin-top"),10)&&(n+=parseInt(t(".tveapp_footer").css("margin-top"),10)),parseInt(t(".tveapp_footer").css("border-top-width"),10)&&(n+=parseInt(t(".tveapp_footer").css("border-top-width"),10)));var l=s.filter(".highlight");if(38===e.keyCode||40===e.keyCode){e.preventDefault();var c,p=a.offset().top+n,d=a.height();40===e.keyCode?l.length?l.nextAll(":visible:first").length&&l.removeClass("highlight").nextAll(":visible:first").addClass("highlight"):s.filter(":visible:first").addClass("highlight"):38===e.keyCode&&l.prevAll(":visible:first").length&&l.removeClass("highlight").prevAll(":visible:first").addClass("highlight"),c=s.filter(".highlight").offset().top,c>p+d/2?a.scrollTop(a.scrollTop()+c-p-d/2):c<p&&a.scrollTop(a.scrollTop()+c-p)}else 13===e.keyCode?l.find("a").trigger(o):e.keyCode&&(l.removeClass("highlight"),a.scrollTop(0))}),r.find("#tveapp_searchBox .placeholder").on("touchstart",function(e){e.preventDefault(),e.stopPropagation(),t(this).hide(),t("#tveapp_search").focus()}),r.find(".tveapp_searchButton").on(o,function(){s.clearSearchField()}),r.on("mouseover.tveevent",function(e){(e.target.classList.contains("tveapp_pL-link")||e.target.parentNode.classList.contains("tveapp_pL-link"))&&(t(e.target).closest("ul").find(".highlight").removeClass("highlight"),t(e.target).closest("li").addClass("highlight"))}),r.find(".tveapp_close, #tveapp_providerNotListed").on(o,function(){i.triggerCallback("selectProviderPickerClosed")}),r.find("#tveapp_providerNotListed").on(o,function(){s.clearSearchField(),s.show("dontSeeUrMvpd"),i.triggerCallback("providerNotListedButtonSelected")}),r.on(o,function(e){var r,a;if(e.preventDefault(),!i.Overlay.dragging){if(e.target.hasAttribute("mvpdid"))r=e.target;else{if(!e.target.parentNode.hasAttribute("mvpdid"))return;r=e.target.parentNode}a=t(r).find("img").attr("alt")||t(r).find("span").html(),i.MegaBeacon.report({beaconType:"action",name:"select_provider",data:{provider:a,service:i.MegaBeacon.service}}),s.mark(t(r)),"checkAZ"!==i.Helper&&"checkAN"!==i.Helper||i.set("onLoad",i.Helper),s.clearSearchField(),i.Providers._set(r.getAttribute("mvpdid")),i.Overlay.hide()}}),r.find("a[elvismvpd]").on(o,function(e){if(e.preventDefault(),!i.Overlay.dragging){s.clearSearchField();var r=t(this),a=r.attr("elvismvpd"),o=r.find("img").attr("alt")||r.find("span").text();i.MVPD={id:a,displayName:o},i.Helper="getAZ",i.Vip.flow="vipElvis",i.Elvis.mvpdSelected()}}),r.find(".viewAllProviders").on(o,function(){t(this).closest(".tveapp_container").addClass("tveapp_searchActivated"),t("#tveapp_search").focus(),t("#tveapp_selectProvider .tveapp_footmessage").hide(),i.MegaBeacon.saveUserPath("all_providers"),i.isGFLBP=null}),r.find(".tveapp_button.tveapp_learnMore").on(o,function(){if(i.MegaBeacon.report({beaconType:"action",name:"more_info"}),i.triggerCallback("learnMoreButtonClicked"),"object"==typeof TVEAuthFAQ){var e=t(this).closest(".tveapp_container").attr("id");for(var r in i.settings.layout)i.settings.layout[r].id===e&&(TVEAuthFAQ.backOverlay=r);s.show("learnMore")}})):"vipLogin"===a?r.on("click",function(e){var t,r=(e.target.getAttribute("alt")||"").toLowerCase(),a=e.target.classList;if("twitter"===r||"facebook"===r)t=r;else{if(!a.contains("iui-ape-login-btn")&&!a.contains("iui-ape-signup-btn"))return;t="mail"}i.set("ELVIS_METHOD",t),i.MegaBeacon.report({beaconType:"action",name:"start_fps",data:i.MegaBeacon.getInfo({social_media:t})}),"24h"===i.Vip.flow?i.triggerCallback("freePreviewPickedMethod",[{name:"method",data:t},{name:"mvpdObj",data:i.MVPD}]):i.triggerCallback("specialPreviewPickedMethod",[{name:"method",data:t},{name:"mvpdObj",data:i.MVPD}])}):"elvisLogin"===a&&r.find("a[elvisby]").on(o,function(){var e=t(this).attr("elvisby");s.mark(t(this)),i.Elvis.signIn(e)}),r.find("[tvecallback=startWatching]").on(o,function(){i.triggerCallback("startWatchingNowButtonClicked")}),r.find("[tvecallback=mvpdPickerClosed]").on(o,function(){i.triggerCallback("mvpdPickerClosed")}),void r.find(".tveapp_faq.toggleable").on(o,function(e){"dt"===e.target.nodeName.toLowerCase()&&t(e.target).next("dd").slideToggle()}))},mark:function(e){i.wrapObj.find(".tveapp_inaction-holder").removeClass("tveapp_inaction-holder").find(".tveapp_inaction").remove(),e&&e.addClass("tveapp_inaction-holder").append('<span class="tveapp_inaction"></span>')},show:function(r,a){var s;if("selectProviderNew"!==r){i.wrapObj.show(),t("html, body").addClass("tveapp_modalOpened");var o=t(".tveapp_container:visible");if("current"===r){if(o.length)return;r="selectProvider"}this.mark(),o.hide()}else this.mark();if(i.isGFLBP)this.get(r,a).show(),e("#tveapp_selectProvider").closest(".tveapp_container").addClass("tveapp_searchActivated"),e("#tveapp_search").focus(),e("#tveapp_selectProvider .tveapp_footmessage").hide();else if("selectProviderNew"==r){var n=this.get(r,a);i.fpExpires=i.fpExpires||i.get("FPexpiresDate"),e("#"+a).append(n).show(),i.getMvpdPickerCallback(i.Subscriber)}else this.get(r,a).show();switch("selectProvider"!==r&&"dontSeeUrMvpd"!==r&&"selectProviderNew"!==r&&"fpSuccess"!==r||this.updFPMessage(r,a),r){case"selectProvider":s="top_providers";break;case"successMessage":s="provider_success";break;case"dontSeeUrMvpd":s="provider_not_listed";break;case"elvisSuccess":s="sfps_success";break;case"elvisEnded":s="sfps_ended";break;case"elvisTerminated":s="sfps_terminated";break;case"fpSuccess":s="fps_success";break;case"vipLogin":s="24h"===i.Vip.flow?"fps_login":"sfps_login"}s&&i.MegaBeacon.saveUserPath(s)},updFPMessage:function(r,a){var s="fp24Ready",a=a||i.getMvpdPickerId;if(!i.settings.FPisActive||i.Elvis.isNonSocial())t(".tveapp_footmessage, .tveapp_getfp, .tveapp_24h, .tveapp_getFreePreviewButtonWrapper").remove(),s="fp24Disabled";else if("24h"==i.get("signedInWith"))t(".tveapp_footmessage, .tveapp_getFreePreviewButtonWrapper").html(i.settings.freePreview.remainTimeMessage),i.Overlay.timer(e(".fp-timer")),s="fp24Started";else if("true"===i.get("isFPexpired")){var o=i.fpExpires||+i.get("FPexpiresDate");o&&new Date<o+6048e5?(t(".tveapp_footmessage, .tveapp_getFreePreviewButtonWrapper").html(i.settings.freePreview.expiredMessage),s="fp24Expired"):(i.erase("FPexpiresDate"),t(".tveapp_footmessage, .tveapp_getFreePreviewButtonWrapper").hide(),s="fp24Disabled")}else t(".tveapp_footmessage, .tveapp_getFreePreviewButtonWrapper").html(i.settings.freePreview.trySignInMessage),s="fp24Ready";e("#"+a).attr("data-tvefp24",s),"selectProvider"===r&&i.triggerCallback("signInPageCompleted")},hide:function(e){function r(){t("html, body").removeClass("tveapp_modalOpened"),i.Overlay.forceHideKeyboard(),i.wrapObj.hide()}function a(e){e=e[0];var t=window.getComputedStyle(e);return"none"!==t.display&&!/display:\s?none/.test(e.getAttribute("style"))}var s,o;if(e){if("string"==typeof e)o=this.list[e],o&&a(o)&&(o.hide(),s=!0);else for(var n=0,l=e.length;n<l;n++)o=this.list[e[n]],o&&a(o)&&(o.hide(),s=!0);s&&r()}else{for(var c in this.list)"selectProviderNew"!==c&&this.list[c].hide();r()}},forceHideKeyboard:function(){/iphone|ipad/i.test(navigator.userAgent)&&(t("body").append('<input id="tveHiddenInput" type="text" style="position:absolute;top:-9999px;font-size:20px;" />'),t("#tveHiddenInput").focus().blur().remove())},getList:function(e,t){var r=e?e.length:0,a=[],s=[],o="",n=function(e){var t=e.isSpecialProvider===!0?"elvismvpd":"mvpdid";return'<li class="tveapp_ePL"><a '+t+'="'+e.id+'" class="tveapp_ePL-link"><img src="'+e.pickerLogoUrl+'" alt="'+e.displayName+'" /></a></li>'};if(!r)return void i.Error.showMess("Providers.getList");for(var l=0;l<r;l++)o=e[l].isSpecialProvider===!0?"elvismvpd":"mvpdid",e[l].altName.replace(", ","; "),a[l]='<li class="tveapp_pL-item"><a '+o+'="'+e[l].id+'" class="tveapp_pL-link" tveapp_alt="'+e[l].displayName+", "+e[l].altName+'"><span>'+e[l].displayName+"</span></a></li>",e[l].isPrimary===!0&&s.push(n(e[l]));if(s.length<12){for(var c=e.filter(function(e){return"number"==typeof e.isExtended}).sort(function(e,t){return e.isExtended-t.isExtended}).slice(0,12-s.length),l=0;l<c.length;l++)c[l]=n(c[l]);s=s.concat(c)}return['<ul class="tveapp_providersList">'+a.join("")+'<li class="tveapp_pL-item-extra"><a id="tveapp_providerNotListed" class="tveapp_pL-link">'+i.settings.layout.base_part.text_dontSeeProvider+"</a></li></ul>",'<ul class="tveapp_extraMvpdList" tveapp-index="'+s.length+'">'+s.join("")+"</ul>"]},timer:function(e){function t(){if(i.fp.duration<1&&"24h"==i.get("signedInWith"))return i.erase("signedInWith"),i.set("isFPexpired","true"),i.Overlay.updFPMessage(),void i.fp.fpExpired();var a=i.fp.duration,s=Math.floor(a/60/60),o=a-60*s*60,n=Math.floor(o/60);o=Math.floor(o-60*n);var l=r(s)+":"+r(n);e?"function"==typeof e.html?e.html(l):e.innerHTML=l:console.log(l),setTimeout(t,1e3)}function r(e){return e>9?e:"0"+e}t()},createIFrame:function(e,i){var r=t(window).width();r<e&&(e=r),this.get("iframeWrapper").css({"margin-left":-e/2,width:320});var a=t('<iframe id="mvpdframe" name="mvpdframe"></iframe>').css({width:e,height:i,background:"#fff",frameborder:0,border:0,display:"block"});t("#mvpddivWrap").length?t("#mvpddivWrap").html(a):t("#tveapp_iframeWrap .tveapp_content").html(a),this.show("iframeWrapper"),this.isClosedByUser=!1,"undefined"!=typeof TVEAuthMVPDWindow&&TVEAuthMVPDWindow.close()},closeIFrame:function(){this.isClosedByUser=!0,t("#mvpdframe").remove(),this.hide("iframeWrapper")}},i.Elvis={isLoggining:!1,isLogUidEnabled:!0,Helper:"",mvpdId:null,ucid:null,MVPD:{id:"sfps",displayName:"SFPS"},setupFlag:!1,save:function(){i.set("ELVIS_INFO",TVEAuthElvisObject)},init:function(){TVEAuthElvisObject=i.get("ELVIS_INFO",!0)||{},TVEAuthElvisObject["function"]="runFromCache",this.mvpdId=i.get("ELVIS_CURRENT_MVPD_ID")},isNonSocial:function(){return"NICK"===i.reqID||"NICKJR"===i.reqID},mvpdSelected:function(){i.jsonp({src:i.baseUrl+i.reqID.toLowerCase()+"/providerInfo/"+i.MVPD.id,callback:"TVEAuth.getElvisMvpdCompleted",data:i.Elvis.getData()}),i.set({MVPD_ID:i.MVPD.id,ELVIS_CURRENT_MVPD_ID:i.MVPD.id,ELVIS_CURRENT_MVPD_NAME:i.MVPD.displayName}),i.MegaBeacon.report({beaconType:"action",name:"select_provider",data:{service:"sfps",provider:i.MVPD&&i.MVPD.displayName+":sfps"}}),i.triggerCallback("providerSelected",[{name:"mvpdId",data:i.MVPD.id+":sfps"}]),i.Overlay.show("pleaseWait"),this.isNonSocial()?this.signIn("nonSocial"):i.Vip.init()},getMvpdCompleted:function(e){e.mvpdList&&(delete e.mvpdList.duration,delete e.mvpdList.endDate,t.extend(TVEAuthElvisObject,e.mvpdList),this.save())},check:function(){if(TVEAuthElvisObject.expiredDate>(new Date).getTime())TVEAuthElvisObject["function"]="runFromCache",i.Debug.info("SFPS check started from cache"),this.requestCompleted(TVEAuthElvisObject);else{i.reqID;this.isNonSocial()?this.checkStatusWithoutSocial():this.checkStatus()}},checkStatus:function(){var e=i.Elvis.getData({uuid:TVEAuthElvisObject.ucid});i.Debug.info("SFPS check started"),i.jsonp({src:i.fpUrl+"special/html5/checkelvis",data:e,callback:"TVEAuth.elvisRequest"}),i.set("ELVIS_STATUS","isActive")},checkStatusWithoutSocial:function(){var e=TVEAuthElvisObject,t=(i.reqID,i.get("ELVIS_NONSOCIAL",!0)||{}),r=(new Date).getTime();i.set("ELVIS_STATUS","isActive"),t.accessDuration>r?(e["function"]="runFromCache",e.expiredDate=(new Date).getTime()+432e5,this.requestCompleted(e)):t.refreshDuration>r?(i.Debug.info("SFPS check started"),i.jsonp({src:i.fpUrl+"special/html5/checkelvis",data:i.Elvis.getData({providerId:t.mvpdid}),callback:"TVEAuth.elvisRequest"})):(i.erase(["MVPD_ID","ELVIS_INFO","ELVIS_METHOD","ELVIS_SUCCESS","ELVIS_NONSOCIAL","ELVIS_ISLOGGEDIN","ELVIS_CURRENT_MVPD_ID","ELVIS_CURRENT_MVPD_NAME"]),TVEAuthElvisObject={},i.Elvis.save(),i.Auth.check(!0))},requestCompleted:function(e){var r=e||{},a=TVEAuthElvisObject,s=(this.MVPD,i.Elvis),o=i.get("ELVIS_METHOD")||i.Vip.method;switch(r["function"]){case"setupDevice":if(i.Debug.info("SFPS setup completed"),"success"===r.status)if(a.token=r.token||"",a.duration=parseInt(r.duration)||0,a.isActive=r.isActive||!1,a.expiredDate=(new Date).getTime()+r.tokenTTL,i.MVPD={id:a.id,displayName:a.displayName},s.MVPD={id:a.id+":sfps",displayName:a.displayName+":SFPS"},r.duration<1)i.set("ELVIS_ENDEDMESSAGE","true"),i.triggerCallback("specialPreviewExpiredWithProvider",[{name:"mvpdObj",data:s.MVPD}]),i.Elvis.signOut(),a.isWarnMessShowed=!0;else if(r.isActive){"24h"==i.get("signedInWith")&&(i.set("isFPexpired","true"),i.fp.expire()),i.set({CURRENT_PROVIDER_ID:a.id,CURRENT_PROVIDER_NAME:a.displayName,ELVIS_ISLOGGEDIN:"true",ELVIS_SETUP:"true",MVPD_ID:a.id,signedInWith:"vipElvis"}),i.Subscriber={isLoggedIn:!0,provider:{id:"sfps",displayName:"SFPS"},token:r.token},"checkStatus"!=i.Helper&&"getAZ"!=i.Helper||i.triggerCallback("checkStatusCompleted",[{name:"TVESubscriber",data:i.Subscriber}]),i.erase("ELVIS_HELPER"),i.triggerCallback("specialPreviewSucceedLoginForMethod",[{name:"method",data:o},{name:"mvpdObj",data:s.MVPD}]),TVEAuthOptions.elvisSuccessScreen?(i.Overlay.show("elvisSuccess"),i.set("ELVIS_SUCCESS","on")):i.Overlay.hide(["elvisLogin","pleaseWait","elvisSuccess"]);var n={isLoggedIn:!0,isLoggedOut:!1};if(t.extend(a,n),this.isNonSocial()){var l={token:r.token,mvpdid:a.id,reqID:i.reqID,accessDuration:r.accessDuration,refreshDuration:r.refreshDuration};i.set("ELVIS_NONSOCIAL",l)}i.MegaBeacon.report({beaconType:"event",name:"login_completed",data:{service:"sfps",provider:a.displayName+":sfps"}}),i.MegaBeacon.report({beaconType:"action",name:"user_funnel"})}else a.terminatedServiceMessageAvailable&&(i.Overlay.show("elvisEnded"),i.set("ELVIS_ENDEDMESSAGE","true"),i.triggerCallback("specialPreviewLockedWithProvider",[{name:"mvpdObj",data:s.MVPD}]),i.Elvis.signOut());else i.MegaBeacon.report({beaconType:"event",name:"login_failed",data:i.MegaBeacon.getInfo({reason:"generic"})}),i.Error.showMess(r.error),i.erase("ELVIS_SETUP");i.erase("onLoad");break;case"checkDevice":if(i.Debug.info("SFPS check completed"),i.MegaBeacon.report({beaconType:"kpi",name:"authorization",data:i.MegaBeacon.getInfo()}),"success"===r.status)if(r.providers&&r.providers.length){for(var c=0,p=r.providers.length;c<p;c++)if(1==r.providers[c].isLoggedIn){if(a.token=r.providers[c].token||"",a.duration=r.providers[c].duration||0,a.isActive=r.providers[c].isActive||!1,a.expiredDate=(new Date).getTime()+r.providers[c].tokenTTL,a.id=i.get("ELVIS_CURRENT_MVPD_ID"),a.displayName=i.get("ELVIS_CURRENT_MVPD_NAME"),i.set({ELVIS_ISLOGGEDIN:"true",CURRENT_PROVIDER_ID:a.id,CURRENT_PROVIDER_NAME:a.displayName,signedInWith:"vipElvis"}),i.MVPD={id:a.id,displayName:a.displayName},s.MVPD={id:a.id+":sfps",displayName:a.displayName+":SFPS"},r.providers[c].duration<1)i.set("ELVIS_ENDEDMESSAGE","true"),i.Overlay.show("elvisEnded"),i.triggerCallback("specialPreviewExpiredWithProvider",[{name:"mvpdObj",data:s.MVPD}]),i.API.logout();else if(a.isActive){if("checkStatus"==i.Helper||"getAZ"==i.Helper)i.Subscriber={isLoggedIn:!0,provider:{id:"SFPS",displayName:"SFPS"},token:a.token},i.triggerCallback("checkStatusCompleted",[{name:"TVESubscriber",data:i.Subscriber}]);else if("getMediaToken"==i.Helper){var d={status:"authorized",token:a.token};i.Auth.setMediaToken(d)}}else i.set("ELVIS_TERMINATEDMESSAGE","true"),i.Overlay.show("elvisTerminated"),a.terminatedServiceMessageAvailable=!1,i.triggerCallback("specialPreviewLockedWithProvider",[{name:"mvpdObj",data:s.MVPD}]),i.API.logout();var n={isLoggedIn:!0,isLoggedOut:!1};if(i.get("ELVIS_SUCCESS")&&i.Overlay.show("elvisSuccess"),t.extend(a,n),this.isNonSocial()){var l={token:r.providers[c].token,mvpdid:a.id,reqID:i.reqID,accessDuration:r.providers[c].accessDuration,refreshDuration:r.providers[c].refreshDuration};i.set("ELVIS_NONSOCIAL",l)}break}}else if("getMediaToken"==i.Helper){var d={status:"not-authorized",token:""};i.Auth.setMediaToken(d)}else i.triggerCallback("checkStatusCompleted",[{name:"TVESubscriber",data:null}]);else i.Error.showMess(r.error),i.erase("ELVIS_ISLOGGEDIN");break;case"logoutDevice":i.Debug.info("SFPS logout completed"),i.Overlay.hide(["elvisSuccess","elvisSignOut"]),this.setupFlag=!1,i.MegaBeacon.report({beaconType:"kpi",name:"logout",data:i.MegaBeacon.getInfo()}),i.Auth.signOutClearFlags(),i.triggerCallback("logoutCompleted"),"success"!==r.status?i.Error.showMess(r.error):i.get("ELVIS_ENDEDMESSAGE")?(i.Overlay.show("elvisEnded"),i.erase("ELVIS_ENDEDMESSAGE")):i.get("ELVIS_TERMINATEDMESSAGE")&&(i.Overlay.show("elvisTerminated"),i.erase("ELVIS_TERMINATEDMESSAGE")),i.Auth.reset(),TVEAuthElvisObject={};break;case"runFromCache":if(i.MVPD={id:a.id||i.get("CURRENT_PROVIDER_ID"),displayName:a.displayName||i.get("CURRENT_PROVIDER_NAME")},s.MVPD={id:i.MVPD.id+":sfps",displayName:i.MVPD.displayName+":SFPS"},i.MegaBeacon.report({beaconType:"kpi",name:"authorization",data:i.MegaBeacon.getInfo()}),a.isActive)if(a.duration<1)i.set("ELVIS_ENDEDMESSAGE","true"),i.Overlay.show("elvisEnded"),i.triggerCallback("specialPreviewExpiredWithProvider",[{name:"mvpdObj",data:s.MVPD}]),i.API.logout();else if("checkStatus"==i.Helper||"getAZ"==i.Helper)i.Subscriber={isLoggedIn:!0,provider:{id:"sfps",displayName:"SFPS"},token:a.token},i.triggerCallback("checkStatusCompleted",[{name:"TVESubscriber",data:i.Subscriber}]);else if("getMediaToken"==i.Helper){var d={status:"authorized",token:a.token};i.Auth.setMediaToken(d)}else console.log("Elvis Error: Helper is missed");else i.set("ELVIS_TERMINATEDMESSAGE","true"),i.Overlay.show("elvisTerminated"),a.terminatedServiceMessageAvailable=!1,i.triggerCallback("specialPreviewLockedWithProvider",[{name:"mvpdObj",data:s.MVPD}]),i.API.logout()}i.Helper=null,this.setupFlag=!1,this.save(),i.set("ELVIS_STATUS","isNotActive"),i.erase("onLoad")},setup:function(e){var t=i.Elvis,r=t.mvpdId=i.get("ELVIS_CURRENT_MVPD_ID");t.setupFlag=!0;var a=i.Elvis.getData({providerId:r,uuid:e});i.Debug.info("SFPS setup started"),i.jsonp({src:i.fpUrl+"special/html5/setupdevice",data:a,callback:"TVEAuth.elvisRequest",onerror:function(){i.MegaBeacon.report({beaconType:"event",name:"login_failed",data:i.MegaBeacon.getInfo({reason:"generic"})})}}),t.isLoggining=!1,i.MVPD={displayName:"SFPS",id:"SFPS"}},setupWithoutSocial:function(){var e=i.get("ELVIS_CURRENT_MVPD_ID");i.set({onLoad:"setupElvis",ELVIS_METHOD:"nonSocial"}),i.Debug.info("SFPS setup started"),i.jsonp({src:i.fpUrl+"special/html5/setupdevice",data:i.Elvis.getData({providerId:e}),callback:"TVEAuth.elvisRequest"}),this.isLoggining=!1,i.MVPD={displayName:"SFPS",id:"SFPS"}},signIn:function(e){return"nonSocial"===e?(this.setupWithoutSocial(),!1):(e=e||"auto",this.isLoggining=!0,void i.set({ELVIS_METHOD:e,onLoad:"setupElvis"}))},signOut:function(){if(this.isNonSocial()){var e={status:"success"};e["function"]="logoutDevice",this.requestCompleted(e)}else i.jsonp({src:i.fpUrl+"special/html5/logoutdevice",data:i.Elvis.getData({uuid:TVEAuthElvisObject.ucid}),callback:"TVEAuth.elvisRequest",onerror:function(){var e={status:"success","function":"logoutDevice"};i.Elvis.requestCompleted(e)}});i.erase("ELVIS_ISLOGGEDIN")},getData:function(e){return e=e||{},e.deviceType="web",e.requestorId=i.reqID,e}},i.Vip={flow:null,tmCheck:null,init:function(){if("undefined"==typeof IUI)return i.Overlay.show("vipLogin"),i.Vip.flow?i.Overlay.show("pleaseWait"):i.Overlay.hide(),i.Debug.info("VIP download started"),void i.appendFiles({src:i.iuiJSUrl,onload:i.Vip.init},i.iuiCSSUrl);i.Vip.flow&&i.Vip.onReady(function(){i.Debug.info("VIP is ready"),i.Vip.flow&&(i.Overlay.show("vipLogin"),"24h"===i.Vip.flow&&t("#tveapp_vipLogin .iui-title").html(i.settings.freePreview.loginMessage).addClass("iui-fp"))});var e=i.get("signedInWith");"24h"!=e&&"vipElvis"!=e||(i.Vip.tmCheck&&clearTimeout(i.Vip.tmCheck),i.Vip.tmCheck=setTimeout(function(){i.Auth.signOut(),"checkStatus"===i.Helper&&i.Auth.setANStatus(0)},2e3)),i.Debug.info("VIP initialization started"),IUI.init({fb:{appId:i.Vip.identityFBAppID,loadAndInitSDK:!0},brandId:i.Vip.identityBrand,appId:i.Vip.identityApp,theme:{name:i.Vip.identityTheme},login:{emailTriggerImg:i.Vip.emailTriggerImage},signUp:{emailTriggerImg:i.Vip.emailTriggerImage},staticImages:{fb:{button:i.awsUrl+"/images/fb_button.png"},tw:{button:i.awsUrl+"/images/tw_button.png"},loader:i.awsUrl+"/images/loader.gif"},callbacks:{loginSuccess:function(t){i.Debug.info("VIP login success"),i.Vip.uninit(),clearTimeout(i.Vip.tmCheck);var r=i.get("fakeId")||t.brandProfileId;if(i.Vip.method=t.auth&&t.auth.authProvider,"ape"===i.Vip.method&&(i.Vip.method="mail"),"checkStatus"===i.Helper||"getMediaToken"===i.Helper)"vipElvis"==e?(TVEAuthElvisObject.ucid=i.Elvis.ucid=r,i.Elvis.save(),i.Elvis.checkStatus(r),i.jsonp({src:i.fpUrl+"/special/html5/checkelvis",data:{requestorId:i.reqID,uuid:r},callback:"TVEAuth.elvisRequest"})):"24h"==e?i.fp.check(r):"vip"==i.get("signedInWith")&&console.log("--------- just received ID "+t.brandProfileId+" . Hm, check Just VIP!");else if("getAZ"===i.Helper&&"resetToken"!==i.Vip.flow)i.Overlay.show("pleaseWait"),"vipElvis"===i.Vip.flow?(TVEAuthElvisObject.ucid=i.Elvis.ucid=r,i.Elvis.save(),i.Elvis.setup(r)):"24h"===i.Vip.flow?i.fp.setup(r):"vip"===i.Vip.flow&&console.log("--------- just received ID "+t.brandProfileId+" . Hm, setup Just VIP!"),i.Vip.flow=null;else if("resetToken"===i.Vip.flow){var a=(i.Vip.flow,i.Overlay);a.clearSearchField(),i.Vip.uninit(),a.show("selectProvider"),i.erase(["MVPD_ID","MVPD_Selected","ELVIS_CURRENT_MVPD_ID","ELVIS_CURRENT_MVPD_NAME"]),i.Vip.updateUrl()}},loginFailure:function(e){i.Debug.info("VIP login failed"),i.MegaBeacon.report({beaconType:"event",name:"login_failed",data:i.MegaBeacon.getInfo({reason:"generic"})}),console.log("Oops!",e)},loginCancel:function(){console.log("Cancelled")},resetPasswordSent:function(e){console.log("Reset password sent",e),i.Debug.info("VIP reset password sent")},fbInitFailure:function(e){console.log("FB init error",e)}}})},updateUrl:function(){if(history.pushState){var e=window.location.protocol+"//"+window.location.host+window.location.pathname;window.history.pushState({path:e},"",e)}},resetToken:function(){i.Vip.flow="resetToken",i.Vip.init()},uninit:function(){delete IUI,t(".iui-component-overlay").remove(),t("#iui-component").html("")},onReady:function(e){function i(){t("#iui-component").children().length&&(t("#iui-component > .container").not(":first").hide(),window.clearInterval(a),e())}function r(){t("#iui-component").children().length&&(t("#iui-component").children().not(":first").hide(),window.clearInterval(a),e())}var a;a=navigator.userAgent.match(/msie\s9/i)?window.setInterval(r,50):window.setInterval(i,50)}},i.vipElvis={check:function(e){"string"==typeof e?i.jsonp({src:i.fpUrl+"special/html5/checkelvis",data:{requestorId:i.reqID,uuid:e},callback:"TVEAuth.elvisRequest"}):e&&"success"===e.status&&!e.isExpired?(i.token=i.Subscriber.token=e.token,i.fpExpires=(new Date).getTime()+1e3*e.duration,i.MVPD={id:"sfps",displayName:"SFPS"},"getAZ"===i.Helper?(i.set("signedInWith","vipElvis"),i.Overlay.show("elvisSuccess"),i.Auth.setToken(1,e.token)):i.Auth.setANStatus(1)):"getAZ"===i.Helper?(i.Auth.tokenRequestFailed(1,"User not Authorized Error"),e.isExpired&&(i.fp.fpExpired(),setTimeout(function(){i.set("isFPexpired","true"),i.Overlay.show("selectProvider")},10))):i.Auth.setANStatus(0)},setup:function(e){"string"==typeof e?i.jsonp({src:i.fpUrl+"special/html5/setupdevice",data:{requestorId:i.reqID,providerId:"xfinity",uuid:e,deviceType:"web"},callback:"TVEAuth.elvisRequest",onerror:function(){i.vipElvis.check(e)}}):(e&&"success"===e.status&&!e.isExpired?(i.set("signedInWith","vipElvis"),i.token=e.token,i.fpExpires=e.startDate+864e5,i.MVPD={id:"sfps",displayName:"SFPS"},i.Overlay.show("elvisSuccess"),i.Auth.setToken(1,e.token)):i.Auth.tokenRequestFailed(1,"User not Authorized Error"),i.vipElvis.requestCompleted(e))}},i.fp={check:function(e){if(e)if("string"==typeof e)i.Debug.info("FPS check started"),i.jsonp({src:i.fpUrl+"html5/checkdevice",data:{requestorId:i.reqID,uuid:e},callback:"TVEAuth.checkFPrCompleted"}),i.fp.uuid=e;else if(i.Debug.info("FPS check completed"),e&&"success"===e.status)if(this.duration=e.duration,this.timer(),e.isExpired)i.erase("signedInWith"),i.fp.expire(),i.set("isFPexpired","true"),"checkStatus"===i.Helper&&(i.Auth.setANStatus(0),null===i.Helper);else if(i.token=i.Subscriber.token=e.token,i.fpExpires=(new Date).getTime()+1e3*e.duration,i.set("FPexpiresDate",i.fpExpires),i.MVPD={displayName:"FPS",id:"FPS",defaultLogoUrl:i.settings.freePreview.logoUrl,cobrandingLogoUrl:i.settings.freePreview.logoUrl,pickerLogoUrl:i.settings.freePreview.logoUrl,logoutLogoUrl:i.settings.freePreview.logoUrl},"getMediaToken"===i.Helper){var t={status:"authorized",token:e.token};i.Auth.setMediaToken(t)}else"getAZ"===i.Helper?"true"===i.get("MVPD_Selected")&&(i.set("signedInWith","24h"),i.Overlay.show("fpSuccess"),i.Auth.setToken(1,e.token)):i.Auth.setANStatus(1);else if("getAZ"===i.Helper)i.MegaBeacon.report({beaconType:"event",name:"login_failed",data:i.MegaBeacon.getInfo({reason:"generic"})}),i.Auth.tokenRequestFailed(1,"User not Authorized Error"),i.set("FPexpiresDate",(new Date).getTime()+1e3*e.duration),e.isExpired&&(i.fp.fpExpired(),setTimeout(function(){i.set("isFPexpired","true"),i.Overlay.show("selectProvider")},10));else if("getMediaToken"===i.Helper){var t={status:"not-authorized",token:""};i.Auth.setMediaToken(t)}else i.MegaBeacon.report({beaconType:"event",name:"fps_disabled",data:i.MegaBeacon.getInfo({},null,!0)}),i.Auth.setANStatus(0);else console.log("FP24 Error: data is missed")},setup:function(e){"string"==typeof e?(i.Debug.info("FPS setup started"),i.set("VIP_ID",e),i.jsonp({src:i.fpUrl+"html5/setupdevice",data:{requestorId:i.reqID,uuid:e},callback:"TVEAuth.setupFPrCompleted",onerror:function(){i.MegaBeacon.report({beaconType:"event",name:"login_failed",data:i.MegaBeacon.getInfo({reason:"generic"})})}}),i.fp.uuid=e):(i.Debug.info("FPS setup completed"),e&&"error"===e.status?i.fp.check(i.get("VIP_ID")):e&&"success"===e.status&&!e.isExpired?(i.set("signedInWith","24h"),i.token=e.token,i.fpExpires=e.startDate+864e5,this.duration=86399,this.timer(),i.set("FPexpiresDate",i.fpExpires),i.MVPD={displayName:"FPS",id:"FPS",defaultLogoUrl:i.settings.freePreview.logoUrl,cobrandingLogoUrl:i.settings.freePreview.logoUrl,pickerLogoUrl:i.settings.freePreview.logoUrl,logoutLogoUrl:i.settings.freePreview.logoUrl},i.Overlay.show("fpSuccess"),i.Auth.setToken(1,e.token)):i.Auth.tokenRequestFailed(1,"User not Authorized Error"))},timer:function(){i.fp.timerId&&window.clearInterval(i.fp.timerId),i.fp.timerId=window.setInterval(function(){i.fp.duration--},1e3)},expire:function(){i.Overlay.updFPMessage("selectProviderNew"),i.jsonp({src:i.fpUrl+"html5/stopdevice",data:{requestorId:i.reqID,uuid:i.fp.uuid},callback:"TVEAuth.expiredFPrCompleted"})},fpExpired:function(e){i.MegaBeacon.report({
beaconType:"event",name:e?"fps_ended":"fps_expired",data:i.MegaBeacon.getInfo({},!0)}),i.Vip.uninit(),i.triggerCallback("freePreviewExpired")}},i.Error={isDebugOn:!1,init:function(e){this.isDebugOn=e,window.console||(console={log:function(e){}})},showMess:function(e){this.isDebugOn&&("undefined"!=typeof e?(console.log("Error: "+this.list[e]),console.log("Error: "+e)):console.log("Error: N/A")),i.triggerCallback("errorHappened",[{name:"errorCode",data:this.list[e]},{name:"errorMessage",data:e}]),i.Debug.error(e,this.list[e])},list:{Ready:"DebugMode is running","The Component Is Not Loaded":"TVEErrorCannotInitialize","Wrong Init Params":"TVEErrorCannotInitialize","Wrong RequestorID/ResourceID":"TVEErrorCannotInitialize","Auth.set":"TVEErrorGeneric","Auth.signOut":"TVEErrorGeneric","Providers.saveList":"TVEErrorGeneric","Providers.loadList":"TVEErrorGeneric","Providers.getList":"TVEErrorGeneric","Providers.verifyWhiteList":"TVEErrorGeneric","AE Is Not Loaded":"TVEErrorGeneric","Can Not Load The White List":"TVEErrorGeneric","Adobe.displayProviders":"TVEErrorGeneric","Internal TVE Services Error":"TVEErrorGeneric","Internal VIP Services Error":"TVEErrorGeneric","LocalStorage was changed":"TVEErrorGeneric","Generic Authentication Error":"TVEErrorUserNotAuthorized","Internal Authentication Error":"TVEErrorUserNotAuthorized","User Not Authenticated Error":"TVEErrorUserNotAuthorized","Generic Authorization Error":"TVEErrorUserNotAuthorized","Internal Authorization Error":"TVEErrorUserNotAuthorized","User not Authorized Error":"TVEErrorUserNotAuthorized","AccessEnabler Initialization Error":"TVEErrorAdobeLibraryFailedToInit","Multiple Authentication Requests Error":"TVEErrorGeneric","Internal Error":"TVEErrorGeneric","Provider not Selected Error":"TVEErrorGeneric","Provider not Available Error":"TVEErrorGeneric",adobeErrorLogger:"TVEErrorGeneric","LocalStorage Is Unavailable":"TVEErrorLocalStorage"}},i.Debug={text:"TVELOG::",init:function(){this.isActive=/tvedebug/.test(location.href)},error:function(e,t){var i={message:e+"::"+t,type:"error"};this.log(i)},info:function(e,t){var i={message:e,type:"info",data:t};this.log(i)},callback:function(e,t){var i={message:e,type:"callback"};t&&t.length&&(i.data=t),this.log(i)},warning:function(e){var t={message:e,type:"warning"};this.log(t)},color:{error:"#880A0A",info:"#06650A",callback:"#0F206B",warning:"#C88200"},log:function(e){var t,i;this.isActive&&(t="%c"+this.text+e.type,i="--> "+e.message,e.data&&(i+="::"+JSON.stringify(e.data)),console.log(t,"font-weight: bold; color:"+this.color[e.type],i))}},i.API={init:function(e,t,r,a){i.Helper="initialize",i.initialize(e,t,r,a)},checkStatus:function(e){return i.Debug.info("checkStatus started"),!!i.isReady()&&void(i.get("ELVIS_ISLOGGEDIN")||i.isAEReady?(i.Overlay.hide("pleaseWait"),i.Helper="checkStatus",i.Auth.check(e)):i.appendAE(i.API.checkStatus,e))},login:function(){if(!i.isReady())return!1;if(i.Debug.info("login start"),"24h"===i.get("signedInWith")&&i.fp.check(i.get("VIP_ID")),i.get("ELVIS_ISLOGGEDIN")||i.isAEReady){if("setupElvis"!=i.get("onLoad")){i.Helper="getAZ",i.Auth.get();var e=i.get("LAST_PROVIDER_ID"),t=i.get("CURRENT_PROVIDER_ID")||null;e&&!t&&(i.Providers._set(e),i.MegaBeacon.report({beaconType:"event",name:"mvpd_recall",data:i.MegaBeacon.getInfo({provider:i.get("LAST_PROVIDER_NAME")||null})}))}}else i.appendAE(i.API.login)},logout:function(e){return!!i.isReady()&&(i.Helper="logout",void i.Auth.signOut(e))},getLogoutScreen:function(){if(!i.isReady())return!1;i.Helper="getScreen:SignOut";var e=(i.get("signedInWith"),"true"==i.get("ELVIS_ISLOGGEDIN")?"elvisSignOut":"24h"==i.get("signedInWith")?"selectProvider":"signOut");i.Overlay.show(e)},getMediaToken:function(e){return!!i.isReady()&&(i.Helper="getMediaToken",i.Debug.info("getMediaToken started"),i.getMediaTokenCallback=e,void i.Auth.getMediaToken())},getMvpdPicker:function(e,t){if(!i.isReady())return!1;if("undefined"==typeof ae&&!i.isAEWaitingFor)return i.isAEWaitingFor=!0,i.appendAE(function(){i.API.getMvpdPicker(e,t)}),void i.Overlay.hide();i.getMvpdPickerCallback=t||function(){},i.getMvpdPickerId=e||"tveapp_undefined_element";var r=!1,a=setInterval(function(){var t=JSON.parse(i.get("MVPD_LIST"));t&&i.Providers.listIsActual()?(window.clearInterval(a),i.Overlay.show("selectProviderNew",e)):r||(r=!0,i.AE().getAuthorization(TVEAuthOptions.resourceID))},100)}},i.Service={loaded:function(){i.MegaBeacon.saveStepDuration("accessEnabler"),i.Auth.set()},ready:function(){i.Auth.ready=!0,i.isAEReady=!0},setToken:function(e,t){if(i.Auth.setToken(e,t),i.erase("tempPassLogin"),i.MVPD&&i.MVPD.id){var r=document.createElement("img");r.src="http://media.mtvnservices.com/pmt/e1/mvpd/setCookie.esi?MVPDID="+i.MVPD.id}},failedToken:function(e,t){i.Auth.tokenRequestFailed(e,t)},setStatus:function(e,t){i.isSetANStatusSkip?i.isSetANStatusSkip=!1:"true"==i.get("checkAZ")&&e?(i.MegaBeacon.startCount("authorization"),i.AE().checkAuthorization(TVEAuthOptions.resourceID)):i.Auth.setANStatus(e,t),e||i.erase(["CURRENT_PROVIDER_ID","CURRENT_PROVIDER_NAME"]),i.get("ELVIS_ENDEDMESSAGE")||"true"==i.get("checkAZ")?i.erase("ELVIS_ENDEDMESSAGE"):i.get("tempPassLogin")&&!e?(i.Overlay.show("error","Your 24 hour free preview session has already expired."),i.set("tempPassExpired","true"),i.erase("tempPassLogin")):i.Overlay.hide()},iframe:function(e,t){i.Overlay.createIFrame(e,t)},dataTracker:function(e,t){i.Auth.dataTracker(e,t)},providersDialog:function(e){if(null!=e){var t,r=i.Providers;r.listIsActual()||i.settings.locale||r.verifyWhiteList(e),"getAN"!=i.Helper&&"getAZ"!=i.Helper||(t=i.get("LAST_PROVIDER_ID"),t||i.Overlay.show("selectProvider"))}else i.Error.showMess("Adobe.displayProviders")},providerSelected:function(e){"true"==i.get("ELVIS_ISLOGGEDIN")&&(e.MVPD=i.get("ELVIS_CURRENT_MVPD_ID"),e.AE_State="User Authenticated"),i.MVPD_ID=e.MVPD,i.Providers.getProviderInfo()},error:function(e){var t={type:"Adobe",subType:"CFG100",developerMessage:"The client machine Date / Time / Timezone is not set correctly. This will likely lead to authentication / authorization errors. See http://tve.helpdocsonline.com/error-reporting",userMessage:"Your system time and/or date appears to be incorrect, which may be causing an login issue. Please check/update your settings, then try to login in again."},r={type:"Adobe",subType:"SEC412",developerMessage:"Device ID does not match. This can happen whenever the underlying platform changes its Device ID. In this case the existing tokens will be cleared and the user will not be authenticated anymore. Client IP is part of the Device ID. See http://tve.helpdocsonline.com/error-reporting",userMessage:"It seems like you may have changed networks, please try logging in again."};switch(e.errorId){case"SEC412":i.triggerCallback("warning",[{name:"data",data:r}]),i.Debug.warning("SEC412");break;case"CFG100":i.triggerCallback("warning",[{name:"data",data:t}]),i.Debug.warning("CFG100")}}},i.MegaBeacon={timeStart:{},startCount:function(e){this.timeStart[e]=+new Date},getDuration:function(e){var t=+new Date-this.timeStart[e];return delete this.timeStart[e],t},saveStepDuration:function(e){this.stepDuration=this.stepDuration||{},this.stepDuration[e]=+new Date-this.timeStart.initialization},saveUserPath:function(e){this.isActive&&this.userPath.push(e)},getInfo:function(e){var r,a,s;return"24h"===i.get("signedInWith")||"24h"===i.Vip.flow?(r="fps",a="fps"):"vipElvis"===i.get("signedInWith")||"vipElvis"===i.Vip.flow||"true"===i.get("ELVIS_ISLOGGEDIN")?(r="sfps",a=(i.MVPD&&i.MVPD.displayName||"")+":sfps"):(r=i.MegaBeacon.service,a=i.MVPD&&i.MVPD.displayName||null),s={provider:a,service:r},"service"===e?{service:r}:"provider"===e?{provider:a}:("object"==typeof e&&null!==e&&t.extend(s,e),s)},init:function(e){var r=this.getBrowserInfo(),a=i.settings.locale||"en_US",s=i.environment;if(this.isActive=e,this.isActive){var o=i.get("MEGABEACON_SESSION_EXPIRE")||0,n=i.get("MEGABEACON_SESSION");n&&(o-new Date>0?this.session=n:i.erase("MEGABEACON_SESSION")),i.erase("MEGABEACON_SESSION_EXPIRE"),t(window).on("beforeunload",function(){i.set("MEGABEACON_SESSION_EXPIRE",+new Date+6e4)}),this.service="en_US"===a?"domestic":"international",/mtvnservices-d\.mtvi\.com/.test(window.location.hostname)&&(s="development"),this.reportData={client:"web",beaconVersion:"1.0",session:this.getSession(),data:{browser:{version:r[2],name:r[1],os:this.getPlatformInfo()},tve:{brand:i.reqID,language:a.slice(0,2),country:a.slice(3),environment:s,version:i.ver}}},this.stepDuration={},this.userPath=[]}},getSession:function(){var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";if(this.session)return this.session;for(var r=0;r<24;r++)e+=r%5===4?"-":t.charAt(Math.floor(Math.random()*t.length));return i.set("MEGABEACON_SESSION",e),e},getBrowserInfo:function(){var e,t=navigator.userAgent,i=t.match(/(firefox|msie|safari|chrome|criOS|OPR)[\/\:\s]?(\d+\.\d*)?[\d\.]*/i);if(i)e=i[1].toLowerCase(),"msie"===e?i[1]="IE":"crios"===e?i[1]="Chrome":"opr"===e&&(i[1]="Opera");else{if(i=t.match(/(trident).*rv\:(\d+\.\d*)/i))return i[1]="IE",i;if(/FBAN|FBAV/.test(t))return["","facebook app browser","unknown"];i=["","unknown","unknown"]}return i},getPlatformInfo:function(){var e,t=function(e){return e.test(navigator.userAgent)};return e=t(/(iphone|ipad|ipod)/i)?"iOS":t(/Windows/i)?"Windows":t(/macintosh/i)?"Mac":t(/android/i)?"Android":t(/linux/i)?"Linux":"unknown"},addZero:function(e){return e>9?e:"0"+e},add2Zero:function(e){return e<10?"00"+e:e>99?e:"0"+e},generateTimestamp:function(){return+new Date},report:function(e){var i,r,a=t.extend(!0,{},this.reportData,e);if(this.isActive){if(a.timestamp=this.generateTimestamp(),"kpi"===a.beaconType){if(!this.timeStart[a.name])return;a.data.duration=this.getDuration(a.name),"initialization"===a.name&&(t.extend(a.data,this.stepDuration),delete this.stepDuration)}"user_funnel"===a.name&&(a.data.user_path=this.userPath),i=new XMLHttpRequest,a={events:[a]},r=JSON.stringify(a),i.open("POST","https://mb.mtvnservices.com/data/collect/v1/?__t=vmn_tve&__mb_addHeader=true",!0),i.setRequestHeader("Content-type","application/json; charset=utf-8"),i.send(r)}}},function(){function i(t){var i,r,s;"object"==typeof t&&t.nodeType||t===window?r=[t]:"string"==typeof t?(t=e.trim(t),"<"===t[0]&&">"===t[t.length-1]?"!"===t[1]?r=[document.createComment(t.slice(4,-3))]:(i=document.createElement("div"),i.innerHTML=t,r=i.children):(t.indexOf(":visible")!==-1&&(t=t.replace(":visible",""),s=!0),r=document.querySelectorAll(t),s&&(r=[].filter.apply(r,[function(e){return a(e)}])))):r=t;for(var o=0;o<r.length;o++)this[o]=r[o];this.length=r.length}function r(e,t){var i=["width","height","margin","padding"],r=i.filter(function(t){return e.indexOf(t)!==-1});return r.length&&("number"==typeof t||"string"==typeof t&&!/px$/.test(t))&&(t+="px"),t}function a(e){var t=window.getComputedStyle(e);return 0!==t.width&&0!==t.height&&0!==t.opacity&&"none"!==t.display&&"hidden"!==t.visibility}function s(t,i){var r=e(i),a=!1;return r.each(function(e,i){if(i===t)return a=!0,!1}),a}function o(t,i,r){var a,s,o,n,l,c;return u(t)?t.document.documentElement["client"+i]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+i],a["scroll"+i],t.body["offset"+i],a["offset"+i],a["client"+i])):(s=t["client"+i],o=getComputedStyle(t),i=i.toLowerCase(),"width"===i?(n=parseInt(o.paddingLeft)+parseInt(o.paddingRight),l=parseInt(o.borderLeftWidth)+parseInt(o.borderRightWidth)):(l=parseInt(o.borderTopWidth)+parseInt(o.borderBottomWidth),n=parseInt(o.paddingTop)+parseInt(o.paddingBottom)),c="border-box"===o.boxSizing,void 0===r?s-n:(c&&(r+=n+l),void e(t).css(i,r)))}function n(e){var t,i=["span","a","strong","label"];return c(i,function(i,r){if(e===r)return t=!0,!1}),t}function l(e){var t,i=["img","button","input"];return c(i,function(i,r){if(e===r)return t=!0,!1}),t}function c(e,t){if(p(e))for(var i=0;i<e.length&&t(i,e[i])!==!1;i++);else for(i in e)if(t(i,e[i])===!1)break}function p(e){return e instanceof Array}function d(e){return"object"==typeof e&&null!==e}function u(e){return null!=e&&e===e.window}t=e=function(e){return new i(e)},e.trim=function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},i.prototype.html=function(e){return void 0!==e?(this.each(function(t,i){if("string"==typeof e)i.innerHTML=e;else{i.innerHTML="";for(var r=0;r<e.length;r++)i.appendChild(e[r])}}),this):this[0]&&this[0].innerHTML},i.prototype.text=function(e){var t="";return void 0===e?(this.each(function(e,i){t+=i.innerHTML}),t):(this.each(function(t,i){i.innerHTML=e}),this)},i.prototype.trigger=function(e){e.indexOf(".")!==-1&&(e=e.split(".")[0]),this.each(function(t,i){if(i.dispatchEvent){var r="";switch(e){case"click":case"mousedown":case"mouseup":r="MouseEvents";break;case"focus":case"change":case"blur":case"select":r="HTMLEvents";break;default:throw"fireEvent: Couldn't find an event class for event '"+e+"'."}var a=document.createEvent(r);a.initEvent(e,!0,!0),i.dispatchEvent(a,!0)}else if(i.fireEvent){var a=document.createEventObject();i.fireEvent("on"+e,a)}})},i.prototype.click=function(){return this.each(function(e,t){t.click()}),this},i.prototype.blur=function(){return this.each(function(e,t){t.blur()}),this},i.prototype.focus=function(){return this.each(function(e,t){t.focus()}),this},i.prototype.css=function(e,t){if("string"==typeof e){if(void 0===t){var i=getComputedStyle(this[0]),a=i[e];return/\d+\.\d+px$/.test(a)&&(a=Math.round(parseFloat(a))+"px"),a}this.each(function(i,a){a.style[e]=r(e,t)})}else this.each(function(t,i){for(var a in e)i.style[a]=r(a,e[a])});return this},i.prototype.hide=function(){return this.each(function(e,t){t.style&&(t.style.display="none")}),this},i.prototype.show=function(){return this.each(function(e,t){var i=t.nodeName.toLowerCase();"div"===i?t.style.display="block":n(i)?t.style.display="inline":l(i)?t.style.display="inline-block":"#comment"!==i&&(t.style.display="block")}),this},i.prototype.addClass=function(e){return this.each(function(t,i){i.classList.add(e)}),this},i.prototype.removeClass=function(e){return e=e.split(" "),this.each(function(t,i){for(var r=0;r<e.length;r++)i.classList.remove(e[r])}),this},i.prototype.each=function(e){for(var t,i=0;i<this.length&&(t=this[i],e.call(t,i,t)!==!1);i++);return this},i.prototype.children=function(){var t=[];return this.each(function(e,i){for(var r=i.children,e=0;e<r.length;e++)t.push(r[e])}),e(t)},i.prototype.filter=function(t){var i=[];return this.each(function(e,r){s(r,t)&&i.push(r)}),e(i)},i.prototype.on=function(){var t,i,r,a,t=arguments[0];t.indexOf(".")!==-1&&(t=t.replace(/\.tveevent/g,"")),a=t.split(" ");for(var s=0;s<a.length;s++)3===arguments.length?(i=arguments[1],r=arguments[2],this.each(function(t,o){document.addEventListener(a[s],function(t){var a=e(t.target).closest(i);a.length&&(t.currentTarget=a[0],r.call(a[0],t))})})):2===arguments.length&&(r=arguments[1],this.each(function(e,t){t.addEventListener(a[s],r)}));return this},i.prototype.closest=function(t){var i=[];return this.each(function(e,r){for(var a=r;a&&a!==document.body;a=a.parentNode)if(s(a,t)){i.push(a);break}}),e(i)},i.prototype.nextAll=function(t){var i=[],r=t&&t.indexOf(":first")!==-1;return this.each(function(e,s){for(var o=s.nextSibling;null!=o;o=o.nextSibling)if(o instanceof HTMLElement)if(void 0===t)i.push(o);else if(t.indexOf(":visible")!==-1){if(a(o)&&(i.push(o),r))break}else if(t&&":first"===t){i.push(o);break}}),e(i)},i.prototype.prevAll=function(t){var i=[],r=t&&t.indexOf(":first")!==-1;return this.each(function(e,s){for(var o=s.previousSibling;null!=o;o=o.previousSibling)if(o instanceof HTMLElement)if(void 0===t)i.push(o);else if(t.indexOf(":visible")!==-1){if(a(o)&&(i.push(o),r))break}else if(t&&":first"===t){i.push(o);break}}),e(i)},i.prototype.prev=function(t){var i=[];return this.each(function(e,t){for(var r=t.previousSibling;null!=r;r=r.previousSibling)r instanceof HTMLElement&&i.push(r)}),e(i)},i.prototype.add=function(t){"string"==typeof t&&(t=e(t));for(var i=0;i<t.length;i++)this[this.length++]=t[i];return this},i.prototype.is=function(e){if(":focus"===e)return this[0]===document.activeElement},i.prototype.ready=function(e){"complete"===document.readyState||"interactive"===document.readyState?e():document.addEventListener("DOMContentLoaded",function(){e()})},i.prototype.find=function(t){var i=[];return this.each(function(e,r){for(var a=r.querySelectorAll(t),s=0;s<a.length;s++)i.push(a[s])}),e(i)},i.prototype.val=function(e){return void 0===e?this[0]?this[0].value:"":(this.each(function(t,i){i.value=e}),this)},i.prototype.attr=function(e,t){return void 0!=t?(this.each(function(i,r){r.setAttribute(e,t)}),this):this[0]&&this[0].getAttribute(e)},i.prototype.removeAttr=function(e){return this.each(function(t,i){i.removeAttribute(e)}),this},i.prototype.remove=function(t){var i=[];return this.each(function(e,t){var r=t.parentNode;r&&i.push(r.removeChild(t))}),e(i)},i.prototype.not=function(t){var i=[];if(":first"===t)for(var r=1;r<this.length;r++)i.push(this[r]);return e(i)},i.prototype.appendTo=function(t){"string"==typeof t&&(t=e(t));var i=this;return i.each(function(e,i){var r=0;t.each(function(e,t){r++&&(i=i.cloneNode(!0)),t.appendChild(i)})}),this},i.prototype.append=function(t){"string"==typeof t&&(t=e(t));var i=this;return t.each(function(e,t){var r=0;i.each(function(e,i){r++&&(t=t.cloneNode(!0)),i.appendChild(t)})}),this},i.prototype.toggle=function(e){return e===!0?this.show():e===!1&&this.hide(),this},i.prototype.slideToggle=function(e){var t,i=this.css("overflow","hidden"),r=i.height(),a=.05;if(r>0){var s=parseInt(this.css("margin-bottom"));r+=s,diff=a*r,this.css({"margin-bottom":"0px",height:r}),t=window.setInterval(function(){r-=diff,r<=0?(i.hide(),i.height(0),window.clearInterval(t)):i.height(r)},20)}else{i.show(),i[0].style.height="",i[0].style.marginBottom="",s=parseInt(i.css("margin-bottom")),i[0].style.marginBottom="0px",r=i.height()+s,i.height(0),diff=a*r;var o=0;t=window.setInterval(function(){o+=diff,o<=r?i.height(o):(i[0].style.height="",i[0].style.marginBottom=s+"px",window.clearInterval(t))},20)}return this},i.prototype.scrollTop=function(e){if(u(this[0])){if(void 0===e)return window.pageYOffset;window.scrollTo(0,e)}else{if(void 0===e)return this[0].scrollTop;this[0].scrollTop=e}return this},i.prototype.next=function(t){var i=[];return this.each(function(e,r){for(var a=r.nextSibling;null!=a;a=a.nextSibling)if(a instanceof HTMLElement&&s(a,t)){i.push(a);break}}),e(i)},i.prototype.width=function(e){return void 0===e?o(this[0],"Width"):void this.each(function(t,i){o(i,"Width",e)})},i.prototype.height=function(e){return void 0===e?o(this[0],"Height"):void this.each(function(t,i){o(i,"Height",e)})},e.extend=function(){function e(t,r){return c(r,function(r,a){i&&d(a)?t[r]=e(p(a)?[]:t[r]||{},a):t[r]=a}),t}var t=arguments[0]===!0?1:0,i=!!t,r=arguments[t];for(t++;t<arguments.length;t++)e(r,arguments[t]);return r},e.imitated=!0}(),{version:i.ver,settings:i.settings,API:i.API,Service:i.Service,show:function(e,t){i.Overlay.show(e,t)},hide:function(e){i.Overlay.hide(e)},updProvidersList:function(e){i.Providers.updProvidersList(e)},elvisRequest:function(e){i.Elvis.requestCompleted(e)},getMvpdCompleted:function(e){i.Providers.getMvpdCompleted(e)},getElvisMvpdCompleted:function(e){i.Elvis.getMvpdCompleted(e)},checkVipElvisCompleted:function(e){i.vipElvis.check(e)},setupVipElvisCompleted:function(e){i.vipElvis.setup(e)},checkFPrCompleted:function(e){i.fp.check(e)},setupFPrCompleted:function(e){i.fp.setup(e)},initBrand:function(e){i.initBrand(e)},expiredFPrCompleted:function(e){i.fp.fpExpired(e)},_get:function(e){if(e.indexOf(".")!==-1){var t=e.split(".");if("function"!=typeof i[t[0]][t[1]])return i[t[0]][t[1]]}else if("function"!=typeof i[e])return i[e]}}}();
(function (namespace) {
    /**
     * Represents a $Crabapple.TVE wrapper for TVEAuth
     *
     * @constructor
     * @param {object} parameters A parameters object with values to be used to initialize the TVEAuth library
     * @param {string} parameters.requestorID
     * @param {string} parameters.channelID
     * @param {string} parameters.isCustomCSS
     * @throws {Error} Will throw an error during initialization if no TVEAuth was found on the page
     */
    var TVE = function (parameters) {
        this.version = 'V2.0.1';

        this.tveStorageKey = 'tveStorage';
        this.tveStorageExpires = 3600;

        this.moduleName = "ENT_TVE_Wrapper: ";

        if (!window.TVEAuth) {
            throw new Error(this.moduleName+' no TVEAuth library loaded on the page');
        }

        this.TVEAuth = window.TVEAuth;

        this.bodyTveAuthClass = 'tve_auth';

        /**
         * Holds handlers for our events, that helper gonna fire
         *
         * @private
         * @type object
         */
        this._events = null;

        /**
         * Information about currently selected TV provider, which is provided by the TVEAuth library
         *
         * @type object
         */
        this.provider = null;

        /**
         * Is a flag that determines whether the TVEAuth library is ready to be used or not
         *
         * @type bool
         */
        this.isTVEAuthReady = false;

        /**
         * The token recieved during user Authorization
         *
         * @type string
         */
        this.token = null;

        /**
         * The latest TVEAuth status
         *
         * @type object
         */
        this.status = null;

        //check the parameters to ensure we have the required info
        if(typeof parameters == 'undefined'){
            throw new Error(this.moduleName+' no parameters passed');
        }
        if(!parameters.requestorID){
            throw new Error(this.moduleName+' missing requestorID');
        }
        if(!parameters.channelID){
            throw new Error(this.moduleName+' missing channelID');
        }

        this.config = this.buildConfig(parameters);

    };

    namespace.TVE = TVE;

    /**
     * Initializes the TVEAuth
     *
     */
    TVE.prototype.initialize = function () {

        this.setupTVEAuthCallbacks();

        console.debug(this.moduleName+' initialize');

        if (this.TVEAuth._get('status')) {
            this.onComponentReady();
        } else {
            this.TVEAuth.API.init(this.config.requestorID, this.config.channelID, this.config.isCustomCSS, this.config.isStaging);
        }
    };

    TVE.prototype.getVersion = function () {
        return this.TVEAuth._get('ver');
    };

    TVE.prototype.getTVEStorageKey = function(){
        return this.tveStorageKey;
    };

    TVE.prototype.getTVEStorageExpires = function(){
        return this.tveStorageExpires;
    };

    /**
     * Injects the MVPD picker into a target node by id attribute
     *
     * @param {string} targetId
     */
    TVE.prototype.showMvpdPicker = function(targetId) {
        this.TVEAuth.API.getMvpdPicker(targetId);
    };

    /**
     * Asks TVEAuth library to authorize the user, when it's ready
     *
     */
    TVE.prototype.login = function () {
        console.debug(this.moduleName+' login');
        if (this.isTVEAuthReady) {
            this.TVEAuth.API.login();
        }
    };

    /**
     * Asks TVEAuth library to logout the user, when it's ready
     *
     */
    TVE.prototype.logout = function () {
        console.debug(this.moduleName+' logout');
        if (this.isTVEAuthReady) {
            this.TVEAuth.API.getLogoutScreen();
        }
    };

    /**
     * Setups TVEAuth.Callbacks
     *
     */
    TVE.prototype.setupTVEAuthCallbacks = function () {
        this.TVEAuth.Callback = this.TVEAuth.Callback || {};

        this.TVEAuth.Callback.componentLoaded = this.onComponentReady.bind(this);

        this.TVEAuth.Callback.checkStatusCompleted = this.onCheckStatusCompleted.bind(this);

        this.TVEAuth.Callback.logoutCompleted = this.onLogoutCompleted.bind(this);

        this.TVEAuth.Callback.errorHappened = this.onErrorHappened.bind(this);

        this.TVEAuth.Callback.freePreviewExpired = this.onFreePreviewExpired.bind(this);
    };

    /** 
     *  Handles the error when a user has used up the 24 hour pass
     *  and tries to clear cookies and use it again 
     *
     */
    TVE.prototype.onFreePreviewExpired = function () {  
        this.trigger('freePreviewExpired'); 
    };

    /**
     * Handles stuff that should happen if the TVEAuth library is ready. In that case initiates check for authN
     *
     * @private
     */
    TVE.prototype.onComponentReady = function () {

        this.isTVEAuthReady = true;
        console.debug(this.moduleName+' onComponentReady');
        this.TVEAuth.API.checkStatus(true);

    };

    /**
     * Handles authentication check's result. If user has authN, we need to check if the authZ isn't expired yet.
     * Otherwise(if user isn't signed in) - we just report that he's not authorized yet.
     *
     * @private
     * @param {bool} status
     */
    TVE.prototype.onCheckStatusCompleted = function (status) {
        if (status) {
            this.status = status;

            if (status.provider) {
                this.provider = status.provider;
            }
            if (status.token) {
                this.token = status.token;
            }
            console.debug(this.moduleName + ' onCheckStatusCompleted:', this.provider);
            this.trigger('checkStatusCompleted', status);
            if (status.isLoggedIn === true) {
                $('body').addClass(this.bodyTveAuthClass);
            } else {
                $('body').removeClass(this.bodyTveAuthClass);
            }
        }
    };


    /**
     * Handles user's sign out. We remove the stored provider info, as it's not more useful. And report about sign out
     *
     * @private
     */
    TVE.prototype.onLogoutCompleted = function () {
        this.status = null;
        this.provider = null;
        console.debug(this.moduleName+' onLogoutCompleted');
        this.trigger('logoutCompleted');
        $('body').removeClass(this.bodyTveAuthClass);
    };

    /**
     * Handles error's reported by TVEAuth library
     *
     * @private
     * @param error
     */
    TVE.prototype.onErrorHappened = function (error) {
        console.debug(this.moduleName+' onErrorHappened:',error);
        this.trigger('errorHappened', error);
    };

    /**
     * Builds out config based on passed parameters
     *
     * @returns {object}
     */
    TVE.prototype.buildConfig = function (parameters) {
        return parameters;
    };

    /**
     * Adds a new handler for event provided
     *
     * @param {string} eventName Name of the event to which the event listener should be attached
     * @param {function} cb Callback, that's gonna be called when event is fired
     */
    TVE.prototype.on = function (eventName, cb) {
        this._events = this._events || {};
        this._events[eventName] = this._events[eventName] || [];

        this._events[eventName].push(cb);
    };

    /**
     * Triggers callbacks which are attached to the event
     *
     * @param {string} eventName Name of the event whose callbacks should be called
     */
    TVE.prototype.trigger = function (eventName) {
        var args = Array.prototype.slice.call(arguments, 1),
            event = this._events && this._events[eventName],
            i, len;

        if (event && event.length) {
            for (i = 0, len = event.length; i < len; i++) {
                if (typeof event[i] === 'function') {
                    try {
                        event[i].apply(null, args);
                    } catch (e) {
                        console.error(this.moduleName+' error in event ['+eventName+']:',e);
                    }
                }
            }
        }
    };

    /**
     * Reports about event
     *
     * @param reportingObject
     */
    TVE.prototype.reportEvent = function () {
        var controller = this,
            reTryCounter = 0,
            RE_TRY_MAX_COUNT = 5,
            reTryInterval;

        // If we were not able to make the reporting call, let's re try later
        if (!this.makeReportingCall()) {
            reTryInterval = setInterval(function () {
                if (controller.makeReportingCall() || reTryCounter++ < RE_TRY_MAX_COUNT) {
                    clearInterval(reTryInterval);
                }
            }, 1000);
        }
    };

    /**
     * Makes reporting call using Bento
     *
     * @param reportingObject
     * @returns {boolean}
     */
    TVE.prototype.makeReportingCall = function () {

        var pageFranchise = 'no-association';

        if ($Crabapple.repo._repoData.omniture && typeof Bento === 'object') {

            if (Bento !== null) {
                try {
                    if ($Crabapple.repo._repoData.omniture.values.eVar6) {
                        pageFranchise = $Crabapple.repo._repoData.omniture.values.eVar6;
                    }
                    Bento.onCustomData("channel", "TVE");
                    Bento.onCustomData("franchise", pageFranchise);
                    Bento.onTVEWelcome();
                    return true;
                } catch (e) {
                    return false;
                }
            }

        } else {
            return false;
        }

    };

})($Crabapple);
(function (namespace) {

    /**
     * Represents a $Crabapple.Player wrapper for MTVNPlayer
     *
     * @constructor
     * @param {HTMLElement} el - An element that will hold the player element
     * @param {object} parameters - Parameters object to be used to build the Player instance
     */
    var Player = function (el, parameters) {
            this._deferredEvents = [];
            this.instance = null;
            this.isInitialized = false;
            this.el = el;
            this.config = this.buildConfig(parameters);

            this.initialize();
        },
        _defaultConfig = {
            width: '100%',
            height: '100%',
            multiplayerSupport: true
        };

    namespace.Player = Player;

    /**
     *  Flag that indicates whether the current platform is supported for video playback
     *
     *  @type boolean
     */
    Player.isPlaybackSupported = (function () {
        var userAgent = navigator.userAgent,
            output = false,
            execResult;

        // test if that's an iOS device and above ios 6
        if (/iP(hone|ad)/.test(userAgent)) {
            execResult = /OS (\d+)[_\d]+? like Mac OS X/.exec(userAgent);
            output = 6 <= parseInt(execResult && execResult[1]);

            // test if that's an Android device and browser is Chrome and android os version is above 4.2
        } else if (/iPod/.test(userAgent)) {
            output = false;
        } else if (/Android/i.test(userAgent)) {
            if (/Chrome/i.test(userAgent)) {
                execResult = /Android\s([0-9\.]*)/.exec(userAgent);
                output = 4.43 <= getVersion(execResult && execResult[1]);
            }
            // test if that's an Windows Phone device, there's some cases because there's an ability to turn on desktop mode
        } else if (/Windows Phone|IEMobile|WPDesktop|XBLWP7/i.test(userAgent)) {
            output = false;
        } else if (/MSIE/.test(userAgent)) {
            execResult = /MSIE (\d+\.\d+);/.exec(userAgent);
            output = 10 <= parseInt(execResult && execResult[1]);
        } else {
            //wasn't an android/i/wp device so we have no tests for it and we default to true
            output = true;
        }

        // Converts a string like "4.4.3" to a float number 4.43, so we can compare the versions
        function getVersion(str) {
            if (str) {
                return parseFloat(str.replace(/(?!^\d+\.)((\d+)(\.))/g, "$2"));
            }

            return 0;
        }

        return output;
    }());

    /**
     * Initializes the Player Instance after checking if playback is supported on current platform and ensuring that
     * the player script is loaded on the page
     *
     * @throws {Error} Will throw an error if current platform is not supported for video playback
     */
    Player.prototype.initialize = function () {
        var player = this;

        if (!Player.isPlaybackSupported) {
            throw new Error('$Crabapple.Player: Playback is not supported on current platform');
        }

        this.ensurePlayerScriptIsLoaded(function () {
            player.initializePlayerInstance();
        });

        this.isInitialized = true;
    };

    /**
     * Initializes MTVNPlayer instance on element with built config and adds event listeners that were deferred
     *
     */
    Player.prototype.initializePlayerInstance = function () {
        this.instance = new window.MTVNPlayer.Player(this.el, this.config);
        this.addDeferredPlayerEventsListeners();
        this.fixOrientationChangeInFullScreenMode();
    };

    Player.prototype.fixOrientationChangeInFullScreenMode = function() {
        this.on("fullScreenChange", function (e) {
            document.body.style.backgroundColor = e.data ? "#000" : "";
        })
    };

    /**
     * Destroys MTVNPlayer instance
     * 
     */
    Player.prototype.destroy = function () {
        if (this.instance && this.instance.$el && typeof this.instance.destroy === 'function') {
            this.instance.destroy();
        }
        this.instance = null;
    };

    /**
     * Switches index on Player
     *
     * @param index
     */
    Player.prototype.playIndex = function (index) {
        if (this.instance && typeof this.instance.playIndex === 'function') {
            this.instance.playIndex(index);
        }
    };

    /**
     * Makes Player to play
     *
     */
    Player.prototype.play = function () {
        if (this.instance && typeof this.instance.play === 'function') {
            this.instance.play();
        }
    };

    /**
     * Pauses Player
     *
     */
    Player.prototype.pause = function () {
        if (this.instance && typeof this.instance.pause === 'function') {
            this.instance.pause();
        }
    };

    /**
     * Checks whether player is paused or not
     *
     * @returns {boolean}
     */
    Player.prototype.isPaused = function () {
        if (this.instance && typeof this.instance.isPaused === 'function') {
            return this.instance.isPaused();
        }
    };

    /**
     * Adds an event listener to the Player Instance. If Instance is not created yet - the addition of the listener is deferred
     *
     */
    Player.prototype.on = function () {
        if (!this.instance) {
            this._deferredEvents = this._deferredEvents || [];
            this._deferredEvents.push(arguments);
        } else {
            this.instance.on.apply(this.instance, arguments);
        }
    };

    /**
     * Adds any event listeners that were deferred(e.g. due to missing initialized Player Instance)
     *
     */
    Player.prototype.addDeferredPlayerEventsListeners = function () {
        var deferredEvents = this._deferredEvents,
            playerInstance = this.instance,
            i, len;

        if (deferredEvents && deferredEvents.length) {
            for (i = 0, len = deferredEvents.length; i < len; i++) {
                playerInstance.on.apply(playerInstance, deferredEvents[i]);
            }

            // We've processed all the deferred events - now let's clean up it
            this._deferredEvents = [];
        }
    };

    /**
     * Builds out config object based on the parameters passed and private default configuration
     *
     * @param {object} parameters
     * @returns {object} config
     */
    Player.prototype.buildConfig = function (parameters) {
        var config = $.extend({}, _defaultConfig),
            embedVars = {},
            flashVars = {},
            tveMvpdName = (parameters.tveMvpdName || 'none-selected').toLowerCase();

        config.uri = parameters.uri;

        /** embedVars **/
        if (parameters.freewheelFlashProfileId) {
            embedVars.freewheelFlashProfileId = parameters.freewheelFlashProfileId;
        }

        if (parameters.freewheelHTML5ProfileId) {
            embedVars.freewheelHTML5ProfileId = parameters.freewheelHTML5ProfileId;
        }

        config.embedVars = $.extend({}, config.embedVars, embedVars);

        /** flashVars **/
        flashVars.tveKeyValues = encodeURIComponent('tveAuthRequired=' + parameters.tveAuthRequired + ';tveMvpdName=' + tveMvpdName);

        config.flashVars = $.extend({}, config.flashVars, flashVars);

        config.tve = {
            tveAuthRequired: parameters.tveAuthRequired,
            tveMvpdName: tveMvpdName
        };

        if (typeof parameters.autoPlay === 'boolean') {
            config.autoPlay = parameters.autoPlay;
        }

        if (typeof parameters.startIndex !== 'undefined') {
            config.startIndex = parameters.startIndex;
        }

        if (typeof parameters.scoundrelMode === 'boolean') {
            config.scoundrelMode = parameters.scoundrelMode;
        }

        if (typeof parameters.noBento === 'boolean') {
            config.noBento = parameters.noBento;
        }

        if (typeof parameters.forceMute === 'boolean') {
            config.forceMute = parameters.forceMute;
        }

        if (typeof parameters.isLive === 'boolean') {
            config.isLive = parameters.isLive;
        }

        if (typeof parameters.isDVR === 'boolean') {
            config.isDVR = parameters.isDVR;
        }

        if (typeof parameters.mediaGenAuthCheck === 'boolean') {
            config.mediaGenAuthCheck = parameters.mediaGenAuthCheck;
        }

        if (typeof parameters.freewheelEnabled === 'boolean') {
            config.freewheelEnabled = parameters.freewheelEnabled;
        }

        if (typeof parameters.comScoreAdTracking === 'boolean') {
            config.comScoreAdTracking = parameters.comScoreAdTracking;
        }

        if (typeof parameters.comScoreEnabled === 'boolean') {
            config.comScoreEnabled = parameters.comScoreEnabled;
        }

        if (typeof parameters.nielsenReporterEnabled === 'boolean') {
            config.nielsenReporterEnabled = parameters.nielsenReporterEnabled;
        }

        if (typeof parameters.nielsenDprEnabled === 'boolean') {
            config.nielsenDprEnabled = parameters.nielsenDprEnabled;
        }

        if (typeof parameters.omnitureAdTracking === 'boolean') {
            config.omnitureAdTracking = parameters.omnitureAdTracking;
        }

        if (typeof parameters.omnitureEnabled === 'boolean') {
            config.omnitureEnabled = parameters.omnitureEnabled;
        }

        if (typeof parameters.omnitureMediaTracking === 'boolean') {
            config.omnitureMediaTracking = parameters.omnitureMediaTracking;
        }

        if (typeof parameters.simultaneousPlaybackEnabled === 'boolean') {
            config.simultaneousPlaybackEnabled = parameters.simultaneousPlaybackEnabled;
        }

        if (typeof parameters.demdexEnabled === 'boolean') {
            config.demdexEnabled = parameters.demdexEnabled;
        }

        if (typeof parameters.chromeless === 'boolean') {
            config.chromeless = parameters.chromeless;
        }

        return config;
    };

    /**
     * Ensures that player script is loaded(i.e. is available on the page) and calls the callback
     *
     * @param {function} cb - A callback function that's being called in case of player script being loaded on the page
     *
     * @throws {Error} Will throw an error if there's no src configured for player script
     */
    Player.prototype.ensurePlayerScriptIsLoaded = function (cb) {
        if (window.MTVNPlayer && typeof window.MTVNPlayer.Player === 'function') {
            if (typeof cb === 'function') {
                cb();
            }
        } else {
            var playerScriptSrc = this.getPlayerScriptSrc();

            if (playerScriptSrc) {
                this.loadScript(playerScriptSrc, cb);
            } else {
                // @TODO: Throw / or call the callback with information about the error?
                throw new Error('$Crabapple.Player: no source for player script is configured. Can not load the player');
            }
        }
    };

    /**
     * Loads script
     *
     * @param {string} src
     * @param {function} cb
     */
    Player.prototype.loadScript = function (src, cb) {
        var s = document.createElement('script');

        s.onload = function () {
            if (typeof cb === 'function') {
                cb();
            }
        };
        s.src = src;
        document.head.appendChild(s);
    };

    /**
     * Determines URL to the Player Script(based on some global configuration, e.g. Triforce Configuration)
     *
     * @returns {string}
     */
    Player.prototype.getPlayerScriptSrc = function () {

        var triforceConfig = window.TriforceConfiguration;
        var playerScript = triforceConfig.playerScript;

        // check for 'edge' url param to replace EdgePlayer version
        var scriptStr = 'edgeplayer-';
        var params = window.location.search;

        if (params) {

            try {
                params = JSON.parse('{"' + decodeURI(params.replace('?', '').replace(/&/g, "\",\"").replace(/=/g,"\":\"")) + '"}');

                for (var key in params){
                    if (params.hasOwnProperty(key) && key === 'edge') {
                        triforceConfig.playerScript = playerScript.split(scriptStr)[0] + scriptStr + params[key] + '.min.js';
                    }
                }
            } catch(e) {}

        }

        return triforceConfig && triforceConfig.playerScript;
    };

})($Crabapple);
/*!
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */



var Hogan = {};

(function (Hogan) {
  Hogan.Template = function (codeObj, text, compiler, options) {
    codeObj = codeObj || {};
    this.r = codeObj.code || this.r;
    this.c = compiler;
    this.options = options || {};
    this.text = text || '';
    this.partials = codeObj.partials || {};
    this.subs = codeObj.subs || {};
    this.buf = '';
  }

  Hogan.Template.prototype = {
    // render: replaced by generated code.
    r: function (context, partials, indent) { return ''; },

    // variable escaping
    v: hoganEscape,

    // triple stache
    t: coerceToString,

    render: function render(context, partials, indent) {
      return this.ri([context], partials || {}, indent);
    },

    // render internal -- a hook for overrides that catches partials too
    ri: function (context, partials, indent) {
      return this.r(context, partials, indent);
    },

    // ensurePartial
    ep: function(symbol, partials) {
      var partial = this.partials[symbol];

      // check to see that if we've instantiated this partial before
      var template = partials[partial.name];
      if (partial.instance && partial.base == template) {
        return partial.instance;
      }

      if (typeof template == 'string') {
        if (!this.c) {
          throw new Error("No compiler available.");
        }
        template = this.c.compile(template, this.options);
      }

      if (!template) {
        return null;
      }

      // We use this to check whether the partials dictionary has changed
      this.partials[symbol].base = template;

      if (partial.subs) {
        // Make sure we consider parent template now
        if (!partials.stackText) partials.stackText = {};
        for (var key in partial.subs) {
          if (!partials.stackText[key]) {
            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;
          }
        }
        template = createSpecializedPartial(template, partial.subs, partial.partials,
          this.stackSubs, this.stackPartials, partials.stackText);
      }
      this.partials[symbol].instance = template;

      return template;
    },

    // tries to find a partial in the current scope and render it
    rp: function(symbol, context, partials, indent) {
      var partial = this.ep(symbol, partials);
      if (!partial) {
        return '';
      }

      return partial.ri(context, partials, indent);
    },

    // render a section
    rs: function(context, partials, section) {
      var tail = context[context.length - 1];

      if (!isArray(tail)) {
        section(context, partials, this);
        return;
      }

      for (var i = 0; i < tail.length; i++) {
        context.push(tail[i]);
        section(context, partials, this);
        context.pop();
      }
    },

    // maybe start a section
    s: function(val, ctx, partials, inverted, start, end, tags) {
      var pass;

      if (isArray(val) && val.length === 0) {
        return false;
      }

      if (typeof val == 'function') {
        val = this.ms(val, ctx, partials, inverted, start, end, tags);
      }

      pass = !!val;

      if (!inverted && pass && ctx) {
        ctx.push(val);
      }

      return pass;
    },

    // find values with dotted names
    d: function(key, ctx, partials, returnFound) {
      var found,
          names = key.split('.'),
          val = names[0] === '' ? ctx[ctx.length - 1] : this.f(names[0], ctx, partials, returnFound),
          doModelGet = this.options.modelGet,
          cx = null;

      if (key !== '.') {
        for (var i = 1; i < names.length; i++) {
          found = findInScope(names[i], val, doModelGet);
          if (found !== undefined) {
            cx = val;
            val = found;
          } else {
            val = '';
          }
        }
      }

      if (returnFound && !val) {
        return false;
      }

      if (!returnFound && typeof val == 'function') {
        ctx.push(cx);
        val = this.mv(val, ctx, partials);
        ctx.pop();
      }

      return val;
    },

    // find values with normal names
    f: function(key, ctx, partials, returnFound) {
      var val = false,
          v = null,
          found = false,
          doModelGet = this.options.modelGet;

      for (var i = ctx.length - 1; i >= 0; i--) {
        v = ctx[i];
        val = findInScope(key, v, doModelGet);
        if (val !== undefined) {
          found = true;
          break;
        }
      }

      if (!found) {
        return (returnFound) ? false : "";
      }

      if (!returnFound && typeof val == 'function') {
        val = this.mv(val, ctx, partials);
      }

      return val;
    },

    // higher order templates
    ls: function(func, cx, ctx, partials, text, tags) {
      var oldTags = this.options.delimiters;

      this.options.delimiters = tags;
      this.b(this.ct(coerceToString(func.call(cx, text, ctx)), cx, partials));
      this.options.delimiters = oldTags;

      return false;
    },

    // compile text
    ct: function(text, cx, partials) {
      if (this.options.disableLambda) {
        throw new Error('Lambda features disabled.');
      }
      return this.c.compile(text, this.options).render(cx, partials);
    },

    // template result buffering
    b: function(s) { this.buf += s; },

    fl: function() { var r = this.buf; this.buf = ''; return r; },

    // method replace section
    ms: function(func, ctx, partials, inverted, start, end, tags) {
      var textSource,
          cx = ctx[ctx.length - 1],
          result = func.call(cx);

      if (typeof result == 'function') {
        if (inverted) {
          return true;
        } else {
          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;
          return this.ls(result, cx, ctx, partials, textSource.substring(start, end), tags);
        }
      }

      return result;
    },

    // method replace variable
    mv: function(func, ctx, partials) {
      var cx = ctx[ctx.length - 1];
      var result = func.call(cx);

      if (typeof result == 'function') {
        return this.ct(coerceToString(result.call(cx)), cx, partials);
      }

      return result;
    },

    sub: function(name, context, partials, indent) {
      var f = this.subs[name];
      if (f) {
        this.activeSub = name;
        f(context, partials, this, indent);
        this.activeSub = false;
      }
    }

  };

  //Find a key in an object
  function findInScope(key, scope, doModelGet) {
    var val;

    if (scope && typeof scope == 'object') {

      if (scope[key] !== undefined) {
        val = scope[key];

      // try lookup with get for backbone or similar model data
      } else if (doModelGet && scope.get && typeof scope.get == 'function') {
        val = scope.get(key);
      }
    }

    return val;
  }

  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {
    function PartialTemplate() {}
    PartialTemplate.prototype = instance;

    function Substitutions() {}
    Substitutions.prototype = instance.subs;

    function StackSubstitutions() {}
    StackSubstitutions.prototype = stackSubs || {};

    function StackPartials() {}
    StackPartials.prototype = stackPartials || {};

    var key;
    var partial = new PartialTemplate();
    partial.subs = new Substitutions();
    partial.subsText = {};  //hehe. substext.
    partial.buf = '';

    stackSubs = new StackSubstitutions();
    partial.stackSubs = stackSubs;
    partial.subsText = stackText;
    for (key in subs) {
      if (!stackSubs[key]) stackSubs[key] = subs[key];
    }
    for (key in stackSubs) {
      partial.subs[key] = stackSubs[key];
    }

    stackPartials = new StackPartials();
    partial.stackPartials = stackPartials;
    for (key in partials) {
      if (!stackPartials[key]) stackPartials[key] = partials[key];
    }
    for (key in stackPartials) {
      partial.partials[key] = stackPartials[key];
    }

    return partial;
  }

  var rAmp = /&/g,
      rLt = /</g,
      rGt = />/g,
      rApos = /\'/g,
      rQuot = /\"/g,
      hChars = /[&<>\"\']/;

  function coerceToString(val) {
    return String((val === null || val === undefined) ? '' : val);
  }

  function hoganEscape(str) {
    str = coerceToString(str);
    return hChars.test(str) ?
      str
        .replace(rAmp, '&amp;')
        .replace(rLt, '&lt;')
        .replace(rGt, '&gt;')
        .replace(rApos, '&#39;')
        .replace(rQuot, '&quot;') :
      str;
  }

  var isArray = Array.isArray || function(a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  };

})(typeof exports !== 'undefined' ? exports : Hogan);



(function (Hogan) {
  // Setup regex  assignments
  // remove whitespace according to Mustache spec
  var rIsWhitespace = /\S/,
      rQuot = /\"/g,
      rNewline =  /\n/g,
      rCr = /\r/g,
      rSlash = /\\/g,
      rLineSep = /\u2028/,
      rParagraphSep = /\u2029/;

  Hogan.tags = {
    '#': 1, '^': 2, '<': 3, '$': 4,
    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,
    '{': 10, '&': 11, '_t': 12
  };

  Hogan.scan = function scan(text, delimiters) {
    var len = text.length,
        IN_TEXT = 0,
        IN_TAG_TYPE = 1,
        IN_TAG = 2,
        state = IN_TEXT,
        tagType = null,
        tag = null,
        buf = '',
        tokens = [],
        seenTag = false,
        i = 0,
        lineStart = 0,
        otag = '{{',
        ctag = '}}';

    function addBuf() {
      if (buf.length > 0) {
        tokens.push({tag: '_t', text: new String(buf)});
        buf = '';
      }
    }

    function lineIsWhitespace() {
      var isAllWhitespace = true;
      for (var j = lineStart; j < tokens.length; j++) {
        isAllWhitespace =
          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||
          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);
        if (!isAllWhitespace) {
          return false;
        }
      }

      return isAllWhitespace;
    }

    function filterLine(haveSeenTag, noNewLine) {
      addBuf();

      if (haveSeenTag && lineIsWhitespace()) {
        for (var j = lineStart, next; j < tokens.length; j++) {
          if (tokens[j].text) {
            if ((next = tokens[j+1]) && next.tag == '>') {
              // set indent to token value
              next.indent = tokens[j].text.toString()
            }
            tokens.splice(j, 1);
          }
        }
      } else if (!noNewLine) {
        tokens.push({tag:'\n'});
      }

      seenTag = false;
      lineStart = tokens.length;
    }

    function changeDelimiters(text, index) {
      var close = '=' + ctag,
          closeIndex = text.indexOf(close, index),
          delimiters = trim(
            text.substring(text.indexOf('=', index) + 1, closeIndex)
          ).split(' ');

      otag = delimiters[0];
      ctag = delimiters[delimiters.length - 1];

      return closeIndex + close.length - 1;
    }

    if (delimiters) {
      delimiters = delimiters.split(' ');
      otag = delimiters[0];
      ctag = delimiters[1];
    }

    for (i = 0; i < len; i++) {
      if (state == IN_TEXT) {
        if (tagChange(otag, text, i)) {
          --i;
          addBuf();
          state = IN_TAG_TYPE;
        } else {
          if (text.charAt(i) == '\n') {
            filterLine(seenTag);
          } else {
            buf += text.charAt(i);
          }
        }
      } else if (state == IN_TAG_TYPE) {
        i += otag.length - 1;
        tag = Hogan.tags[text.charAt(i + 1)];
        tagType = tag ? text.charAt(i + 1) : '_v';
        if (tagType == '=') {
          i = changeDelimiters(text, i);
          state = IN_TEXT;
        } else {
          if (tag) {
            i++;
          }
          state = IN_TAG;
        }
        seenTag = i;
      } else {
        if (tagChange(ctag, text, i)) {
          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,
                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});
          buf = '';
          i += ctag.length - 1;
          state = IN_TEXT;
          if (tagType == '{') {
            if (ctag == '}}') {
              i++;
            } else {
              cleanTripleStache(tokens[tokens.length - 1]);
            }
          }
        } else {
          buf += text.charAt(i);
        }
      }
    }

    filterLine(seenTag, true);

    return tokens;
  }

  function cleanTripleStache(token) {
    if (token.n.substr(token.n.length - 1) === '}') {
      token.n = token.n.substring(0, token.n.length - 1);
    }
  }

  function trim(s) {
    if (s.trim) {
      return s.trim();
    }

    return s.replace(/^\s*|\s*$/g, '');
  }

  function tagChange(tag, text, index) {
    if (text.charAt(index) != tag.charAt(0)) {
      return false;
    }

    for (var i = 1, l = tag.length; i < l; i++) {
      if (text.charAt(index + i) != tag.charAt(i)) {
        return false;
      }
    }

    return true;
  }

  // the tags allowed inside super templates
  var allowedInSuper = {'_t': true, '\n': true, '$': true, '/': true};

  function buildTree(tokens, kind, stack, customTags) {
    var instructions = [],
        opener = null,
        tail = null,
        token = null;

    tail = stack[stack.length - 1];

    while (tokens.length > 0) {
      token = tokens.shift();

      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {
        throw new Error('Illegal content in < super tag.');
      }

      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {
        stack.push(token);
        token.nodes = buildTree(tokens, token.tag, stack, customTags);
      } else if (token.tag == '/') {
        if (stack.length === 0) {
          throw new Error('Closing tag without opener: /' + token.n);
        }
        opener = stack.pop();
        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
        }
        opener.end = token.i;
        return instructions;
      } else if (token.tag == '\n') {
        token.last = (tokens.length == 0) || (tokens[0].tag == '\n');
      }

      instructions.push(token);
    }

    if (stack.length > 0) {
      throw new Error('missing closing tag: ' + stack.pop().n);
    }

    return instructions;
  }

  function isOpener(token, tags) {
    for (var i = 0, l = tags.length; i < l; i++) {
      if (tags[i].o == token.n) {
        token.tag = '#';
        return true;
      }
    }
  }

  function isCloser(close, open, tags) {
    for (var i = 0, l = tags.length; i < l; i++) {
      if (tags[i].c == close && tags[i].o == open) {
        return true;
      }
    }
  }

  function stringifySubstitutions(obj) {
    var items = [];
    for (var key in obj) {
      items.push('"' + esc(key) + '": function(c,p,t,i) {' + obj[key] + '}');
    }
    return "{ " + items.join(",") + " }";
  }

  function stringifyPartials(codeObj) {
    var partials = [];
    for (var key in codeObj.partials) {
      partials.push('"' + esc(key) + '":{name:"' + esc(codeObj.partials[key].name) + '", ' + stringifyPartials(codeObj.partials[key]) + "}");
    }
    return "partials: {" + partials.join(",") + "}, subs: " + stringifySubstitutions(codeObj.subs);
  }

  Hogan.stringify = function(codeObj, text, options) {
    return "{code: function (c,p,i) { " + Hogan.wrapMain(codeObj.code) + " }," + stringifyPartials(codeObj) +  "}";
  }

  var serialNo = 0;
  Hogan.generate = function(tree, text, options) {
    serialNo = 0;
    var context = { code: '', subs: {}, partials: {} };
    Hogan.walk(tree, context);

    if (options.asString) {
      return this.stringify(context, text, options);
    }

    return this.makeTemplate(context, text, options);
  }

  Hogan.wrapMain = function(code) {
    return 'var t=this;t.b(i=i||"");' + code + 'return t.fl();';
  }

  Hogan.template = Hogan.Template;

  Hogan.makeTemplate = function(codeObj, text, options) {
    var template = this.makePartials(codeObj);
    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));
    return new this.template(template, text, this, options);
  }

  Hogan.makePartials = function(codeObj) {
    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};
    for (key in template.partials) {
      template.partials[key] = this.makePartials(template.partials[key]);
    }
    for (key in codeObj.subs) {
      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);
    }
    return template;
  }

  function esc(s) {
    return s.replace(rSlash, '\\\\')
            .replace(rQuot, '\\\"')
            .replace(rNewline, '\\n')
            .replace(rCr, '\\r')
            .replace(rLineSep, '\\u2028')
            .replace(rParagraphSep, '\\u2029');
  }

  function chooseMethod(s) {
    return (~s.indexOf('.')) ? 'd' : 'f';
  }

  function createPartial(node, context) {
    var prefix = "<" + (context.prefix || "");
    var sym = prefix + node.n + serialNo++;
    context.partials[sym] = {name: node.n, partials: {}};
    context.code += 't.b(t.rp("' +  esc(sym) + '",c,p,"' + (node.indent || '') + '"));';
    return sym;
  }

  Hogan.codegen = {
    '#': function(node, context) {
      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),' +
                      'c,p,0,' + node.i + ',' + node.end + ',"' + node.otag + " " + node.ctag + '")){' +
                      't.rs(c,p,' + 'function(c,p,t){';
      Hogan.walk(node.nodes, context);
      context.code += '});c.pop();}';
    },

    '^': function(node, context) {
      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,1),c,p,1,0,0,"")){';
      Hogan.walk(node.nodes, context);
      context.code += '};';
    },

    '>': createPartial,
    '<': function(node, context) {
      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};
      Hogan.walk(node.nodes, ctx);
      var template = context.partials[createPartial(node, context)];
      template.subs = ctx.subs;
      template.partials = ctx.partials;
    },

    '$': function(node, context) {
      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};
      Hogan.walk(node.nodes, ctx);
      context.subs[node.n] = ctx.code;
      if (!context.inPartial) {
        context.code += 't.sub("' + esc(node.n) + '",c,p,i);';
      }
    },

    '\n': function(node, context) {
      context.code += write('"\\n"' + (node.last ? '' : ' + i'));
    },

    '_v': function(node, context) {
      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
    },

    '_t': function(node, context) {
      context.code += write('"' + esc(node.text) + '"');
    },

    '{': tripleStache,

    '&': tripleStache
  }

  function tripleStache(node, context) {
    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '("' + esc(node.n) + '",c,p,0)));';
  }

  function write(s) {
    return 't.b(' + s + ');';
  }

  Hogan.walk = function(nodelist, context) {
    var func;
    for (var i = 0, l = nodelist.length; i < l; i++) {
      func = Hogan.codegen[nodelist[i].tag];
      func && func(nodelist[i], context);
    }
    return context;
  }

  Hogan.parse = function(tokens, text, options) {
    options = options || {};
    return buildTree(tokens, '', [], options.sectionTags || []);
  }

  Hogan.cache = {};

  Hogan.cacheKey = function(text, options) {
    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');
  }

  Hogan.compile = function(text, options) {
    options = options || {};
    var key = Hogan.cacheKey(text, options);
    var template = this.cache[key];

    if (template) {
      var partials = template.partials;
      for (var name in partials) {
        delete partials[name].instance;
      }
      return template;
    }

    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
    return this.cache[key] = template;
  }
})(typeof exports !== 'undefined' ? exports : Hogan);


/*!
 * Flickity PACKAGED v2.0.5
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * http://flickity.metafizzy.co
 * Copyright 2016 Metafizzy
 */

!function(t,e){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("jquery")):t.jQueryBridget=e(t,t.jQuery)}(window,function(t,e){"use strict";function i(i,o,a){function l(t,e,n){var s,o="$()."+i+'("'+e+'")';return t.each(function(t,l){var h=a.data(l,i);if(!h)return void r(i+" not initialized. Cannot call methods, i.e. "+o);var c=h[e];if(!c||"_"==e.charAt(0))return void r(o+" is not a valid method");var d=c.apply(h,n);s=void 0===s?d:s}),void 0!==s?s:t}function h(t,e){t.each(function(t,n){var s=a.data(n,i);s?(s.option(e),s._init()):(s=new o(n,e),a.data(n,i,s))})}a=a||e||t.jQuery,a&&(o.prototype.option||(o.prototype.option=function(t){a.isPlainObject(t)&&(this.options=a.extend(!0,this.options,t))}),a.fn[i]=function(t){if("string"==typeof t){var e=s.call(arguments,1);return l(this,t,e)}return h(this,t),this},n(a))}function n(t){!t||t&&t.bridget||(t.bridget=i)}var s=Array.prototype.slice,o=t.console,r="undefined"==typeof o?function(){}:function(t){o.error(t)};return n(e||t.jQuery),i}),function(t,e){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",e):"object"==typeof module&&module.exports?module.exports=e():t.EvEmitter=e()}("undefined"!=typeof window?window:this,function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return n.indexOf(e)==-1&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{},n=i[t]=i[t]||{};return n[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return n!=-1&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=0,s=i[n];e=e||[];for(var o=this._onceEvents&&this._onceEvents[t];s;){var r=o&&o[s];r&&(this.off(t,s),delete o[s]),s.apply(this,e),n+=r?0:1,s=i[n]}return this}},t}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("get-size/get-size",[],function(){return e()}):"object"==typeof module&&module.exports?module.exports=e():t.getSize=e()}(window,function(){"use strict";function t(t){var e=parseFloat(t),i=t.indexOf("%")==-1&&!isNaN(e);return i&&e}function e(){}function i(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<h;e++){var i=l[e];t[i]=0}return t}function n(t){var e=getComputedStyle(t);return e||a("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),e}function s(){if(!c){c=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var i=document.body||document.documentElement;i.appendChild(e);var s=n(e);o.isBoxSizeOuter=r=200==t(s.width),i.removeChild(e)}}function o(e){if(s(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var o=n(e);if("none"==o.display)return i();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var c=a.isBorderBox="border-box"==o.boxSizing,d=0;d<h;d++){var u=l[d],f=o[u],p=parseFloat(f);a[u]=isNaN(p)?0:p}var v=a.paddingLeft+a.paddingRight,g=a.paddingTop+a.paddingBottom,m=a.marginLeft+a.marginRight,y=a.marginTop+a.marginBottom,S=a.borderLeftWidth+a.borderRightWidth,E=a.borderTopWidth+a.borderBottomWidth,b=c&&r,x=t(o.width);x!==!1&&(a.width=x+(b?0:v+S));var C=t(o.height);return C!==!1&&(a.height=C+(b?0:g+E)),a.innerWidth=a.width-(v+S),a.innerHeight=a.height-(g+E),a.outerWidth=a.width+m,a.outerHeight=a.height+y,a}}var r,a="undefined"==typeof console?e:function(t){console.error(t)},l=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],h=l.length,c=!1;return o}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",e):"object"==typeof module&&module.exports?module.exports=e():t.matchesSelector=e()}(window,function(){"use strict";var t=function(){var t=Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i],s=n+"MatchesSelector";if(t[s])return s}}();return function(e,i){return e[t](i)}}),function(t,e){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.matchesSelector)}(window,function(t,e){var i={};i.extend=function(t,e){for(var i in e)t[i]=e[i];return t},i.modulo=function(t,e){return(t%e+e)%e},i.makeArray=function(t){var e=[];if(Array.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var i=0;i<t.length;i++)e.push(t[i]);else e.push(t);return e},i.removeFrom=function(t,e){var i=t.indexOf(e);i!=-1&&t.splice(i,1)},i.getParent=function(t,i){for(;t!=document.body;)if(t=t.parentNode,e(t,i))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,n){t=i.makeArray(t);var s=[];return t.forEach(function(t){if(t instanceof HTMLElement){if(!n)return void s.push(t);e(t,n)&&s.push(t);for(var i=t.querySelectorAll(n),o=0;o<i.length;o++)s.push(i[o])}}),s},i.debounceMethod=function(t,e,i){var n=t.prototype[e],s=e+"Timeout";t.prototype[e]=function(){var t=this[s];t&&clearTimeout(t);var e=arguments,o=this;this[s]=setTimeout(function(){n.apply(o,e),delete o[s]},i||100)}},i.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()};var n=t.console;return i.htmlInit=function(e,s){i.docReady(function(){var o=i.toDashed(s),r="data-"+o,a=document.querySelectorAll("["+r+"]"),l=document.querySelectorAll(".js-"+o),h=i.makeArray(a).concat(i.makeArray(l)),c=r+"-options",d=t.jQuery;h.forEach(function(t){var i,o=t.getAttribute(r)||t.getAttribute(c);try{i=o&&JSON.parse(o)}catch(a){return void(n&&n.error("Error parsing "+r+" on "+t.className+": "+a))}var l=new e(t,i);d&&d.data(t,s,l)})})},i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/cell",["get-size/get-size"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("get-size")):(t.Flickity=t.Flickity||{},t.Flickity.Cell=e(t,t.getSize))}(window,function(t,e){function i(t,e){this.element=t,this.parent=e,this.create()}var n=i.prototype;return n.create=function(){this.element.style.position="absolute",this.x=0,this.shift=0},n.destroy=function(){this.element.style.position="";var t=this.parent.originSide;this.element.style[t]=""},n.getSize=function(){this.size=e(this.element)},n.setPosition=function(t){this.x=t,this.updateTarget(),this.renderPosition(t)},n.updateTarget=n.setDefaultTarget=function(){var t="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[t]+this.size.width*this.parent.cellAlign},n.renderPosition=function(t){var e=this.parent.originSide;this.element.style[e]=this.parent.getPositionValue(t)},n.wrapShift=function(t){this.shift=t,this.renderPosition(this.x+this.parent.slideableWidth*t)},n.remove=function(){this.element.parentNode.removeChild(this.element)},i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/slide",e):"object"==typeof module&&module.exports?module.exports=e():(t.Flickity=t.Flickity||{},t.Flickity.Slide=e())}(window,function(){"use strict";function t(t){this.parent=t,this.isOriginLeft="left"==t.originSide,this.cells=[],this.outerWidth=0,this.height=0}var e=t.prototype;return e.addCell=function(t){if(this.cells.push(t),this.outerWidth+=t.size.outerWidth,this.height=Math.max(t.size.outerHeight,this.height),1==this.cells.length){this.x=t.x;var e=this.isOriginLeft?"marginLeft":"marginRight";this.firstMargin=t.size[e]}},e.updateTarget=function(){var t=this.isOriginLeft?"marginRight":"marginLeft",e=this.getLastCell(),i=e?e.size[t]:0,n=this.outerWidth-(this.firstMargin+i);this.target=this.x+this.firstMargin+n*this.parent.cellAlign},e.getLastCell=function(){return this.cells[this.cells.length-1]},e.select=function(){this.changeSelectedClass("add")},e.unselect=function(){this.changeSelectedClass("remove")},e.changeSelectedClass=function(t){this.cells.forEach(function(e){e.element.classList[t]("is-selected")})},e.getCellElements=function(){return this.cells.map(function(t){return t.element})},t}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/animate",["fizzy-ui-utils/utils"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("fizzy-ui-utils")):(t.Flickity=t.Flickity||{},t.Flickity.animatePrototype=e(t,t.fizzyUIUtils))}(window,function(t,e){var i=t.requestAnimationFrame||t.webkitRequestAnimationFrame,n=0;i||(i=function(t){var e=(new Date).getTime(),i=Math.max(0,16-(e-n)),s=setTimeout(t,i);return n=e+i,s});var s={};s.startAnimation=function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},s.animate=function(){this.applyDragForce(),this.applySelectedAttraction();var t=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(t),this.isAnimating){var e=this;i(function(){e.animate()})}};var o=function(){var t=document.documentElement.style;return"string"==typeof t.transform?"transform":"WebkitTransform"}();return s.positionSlider=function(){var t=this.x;this.options.wrapAround&&this.cells.length>1&&(t=e.modulo(t,this.slideableWidth),t-=this.slideableWidth,this.shiftWrapCells(t)),t+=this.cursorPosition,t=this.options.rightToLeft&&o?-t:t;var i=this.getPositionValue(t);this.slider.style[o]=this.isAnimating?"translate3d("+i+",0,0)":"translateX("+i+")";var n=this.slides[0];if(n){var s=-this.x-n.target,r=s/this.slidesWidth;this.dispatchEvent("scroll",null,[r,s])}},s.positionSliderAtSelected=function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.positionSlider())},s.getPositionValue=function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},s.settle=function(t){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*t)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle"))},s.shiftWrapCells=function(t){var e=this.cursorPosition+t;this._shiftCells(this.beforeShiftCells,e,-1);var i=this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,i,1)},s._shiftCells=function(t,e,i){for(var n=0;n<t.length;n++){var s=t[n],o=e>0?i:0;s.wrapShift(o),e-=s.size.outerWidth}},s._unshiftCells=function(t){if(t&&t.length)for(var e=0;e<t.length;e++)t[e].wrapShift(0)},s.integratePhysics=function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},s.applyForce=function(t){this.velocity+=t},s.getFrictionFactor=function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},s.getRestingPosition=function(){return this.x+this.velocity/(1-this.getFrictionFactor())},s.applyDragForce=function(){if(this.isPointerDown){var t=this.dragX-this.x,e=t-this.velocity;this.applyForce(e)}},s.applySelectedAttraction=function(){if(!this.isPointerDown&&!this.isFreeScrolling&&this.cells.length){var t=this.selectedSlide.target*-1-this.x,e=t*this.options.selectedAttraction;this.applyForce(e)}},s}),function(t,e){if("function"==typeof define&&define.amd)define("flickity/js/flickity",["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./cell","./slide","./animate"],function(i,n,s,o,r,a){return e(t,i,n,s,o,r,a)});else if("object"==typeof module&&module.exports)module.exports=e(t,require("ev-emitter"),require("get-size"),require("fizzy-ui-utils"),require("./cell"),require("./slide"),require("./animate"));else{var i=t.Flickity;t.Flickity=e(t,t.EvEmitter,t.getSize,t.fizzyUIUtils,i.Cell,i.Slide,i.animatePrototype)}}(window,function(t,e,i,n,s,o,r){function a(t,e){for(t=n.makeArray(t);t.length;)e.appendChild(t.shift())}function l(t,e){var i=n.getQueryElement(t);if(!i)return void(d&&d.error("Bad element for Flickity: "+(i||t)));if(this.element=i,this.element.flickityGUID){var s=f[this.element.flickityGUID];return s.option(e),s}h&&(this.$element=h(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(e),this._create()}var h=t.jQuery,c=t.getComputedStyle,d=t.console,u=0,f={};l.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},l.createMethods=[];var p=l.prototype;n.extend(p,e.prototype),p._create=function(){var e=this.guid=++u;this.element.flickityGUID=e,f[e]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),(this.options.resize||this.options.watchCSS)&&t.addEventListener("resize",this),l.createMethods.forEach(function(t){this[t]()},this),this.options.watchCSS?this.watchCSS():this.activate()},p.option=function(t){n.extend(this.options,t)},p.activate=function(){if(!this.isActive){this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize();var t=this._filterFindCellElements(this.element.children);a(t,this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this)),this.emitEvent("activate");var e,i=this.options.initialIndex;e=this.isInitActivated?this.selectedIndex:void 0!==i&&this.cells[i]?i:0,this.select(e,!1,!0),this.isInitActivated=!0}},p._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",t.style[this.originSide]=0,this.slider=t},p._filterFindCellElements=function(t){return n.filterFindElements(t,this.options.cellSelector)},p.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},p._makeCells=function(t){var e=this._filterFindCellElements(t),i=e.map(function(t){return new s(t,this)},this);return i},p.getLastCell=function(){return this.cells[this.cells.length-1]},p.getLastSlide=function(){return this.slides[this.slides.length-1]},p.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},p._positionCells=function(t){t=t||0,this.maxCellHeight=t?this.maxCellHeight||0:0;var e=0;if(t>0){var i=this.cells[t-1];e=i.x+i.size.outerWidth}for(var n=this.cells.length,s=t;s<n;s++){var o=this.cells[s];o.setPosition(e),e+=o.size.outerWidth,this.maxCellHeight=Math.max(o.size.outerHeight,this.maxCellHeight)}this.slideableWidth=e,this.updateSlides(),this._containSlides(),this.slidesWidth=n?this.getLastSlide().target-this.slides[0].target:0},p._sizeCells=function(t){t.forEach(function(t){t.getSize()})},p.updateSlides=function(){if(this.slides=[],this.cells.length){var t=new o(this);this.slides.push(t);var e="left"==this.originSide,i=e?"marginRight":"marginLeft",n=this._getCanCellFit();this.cells.forEach(function(e,s){if(!t.cells.length)return void t.addCell(e);var r=t.outerWidth-t.firstMargin+(e.size.outerWidth-e.size[i]);n.call(this,s,r)?t.addCell(e):(t.updateTarget(),t=new o(this),this.slides.push(t),t.addCell(e))},this),t.updateTarget(),this.updateSelectedSlide()}},p._getCanCellFit=function(){var t=this.options.groupCells;if(!t)return function(){return!1};if("number"==typeof t){var e=parseInt(t,10);return function(t){return t%e!==0}}var i="string"==typeof t&&t.match(/^(\d+)%$/),n=i?parseInt(i[1],10)/100:1;return function(t,e){return e<=(this.size.innerWidth+1)*n}},p._init=p.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},p.getSize=function(){this.size=i(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var v={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};return p.setCellAlign=function(){var t=v[this.options.cellAlign];this.cellAlign=t?t[this.originSide]:this.options.cellAlign},p.setGallerySize=function(){if(this.options.setGallerySize){var t=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight;this.viewport.style.height=t+"px"}},p._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var t=this.cursorPosition,e=this.cells.length-1;this.beforeShiftCells=this._getGapCells(t,e,-1),t=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(t,0,1)}},p._getGapCells=function(t,e,i){for(var n=[];t>0;){var s=this.cells[e];if(!s)break;n.push(s),e+=i,t-=s.size.outerWidth}return n},p._containSlides=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length){var t=this.options.rightToLeft,e=t?"marginRight":"marginLeft",i=t?"marginLeft":"marginRight",n=this.slideableWidth-this.getLastCell().size[i],s=n<this.size.innerWidth,o=this.cursorPosition+this.cells[0].size[e],r=n-this.size.innerWidth*(1-this.cellAlign);this.slides.forEach(function(t){s?t.target=n*this.cellAlign:(t.target=Math.max(t.target,o),t.target=Math.min(t.target,r))},this)}},p.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),h&&this.$element){t+=this.options.namespaceJQueryEvents?".flickity":"";var s=t;if(e){var o=h.Event(e);o.type=t,s=o}this.$element.trigger(s,i)}},p.select=function(t,e,i){this.isActive&&(t=parseInt(t,10),this._wrapSelect(t),(this.options.wrapAround||e)&&(t=n.modulo(t,this.slides.length)),this.slides[t]&&(this.selectedIndex=t,this.updateSelectedSlide(),i?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select"),this.dispatchEvent("cellSelect")))},p._wrapSelect=function(t){var e=this.slides.length,i=this.options.wrapAround&&e>1;if(!i)return t;var s=n.modulo(t,e),o=Math.abs(s-this.selectedIndex),r=Math.abs(s+e-this.selectedIndex),a=Math.abs(s-e-this.selectedIndex);!this.isDragSelect&&r<o?t+=e:!this.isDragSelect&&a<o&&(t-=e),t<0?this.x-=this.slideableWidth:t>=e&&(this.x+=this.slideableWidth)},p.previous=function(t,e){this.select(this.selectedIndex-1,t,e)},p.next=function(t,e){this.select(this.selectedIndex+1,t,e)},p.updateSelectedSlide=function(){var t=this.slides[this.selectedIndex];t&&(this.unselectSelectedSlide(),this.selectedSlide=t,t.select(),this.selectedCells=t.cells,this.selectedElements=t.getCellElements(),this.selectedCell=t.cells[0],this.selectedElement=this.selectedElements[0])},p.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},p.selectCell=function(t,e,i){var n;"number"==typeof t?n=this.cells[t]:("string"==typeof t&&(t=this.element.querySelector(t)),n=this.getCell(t));for(var s=0;n&&s<this.slides.length;s++){var o=this.slides[s],r=o.cells.indexOf(n);if(r!=-1)return void this.select(s,e,i)}},p.getCell=function(t){for(var e=0;e<this.cells.length;e++){var i=this.cells[e];if(i.element==t)return i}},p.getCells=function(t){t=n.makeArray(t);var e=[];return t.forEach(function(t){var i=this.getCell(t);i&&e.push(i)},this),e},p.getCellElements=function(){return this.cells.map(function(t){return t.element})},p.getParentCell=function(t){var e=this.getCell(t);return e?e:(t=n.getParent(t,".flickity-slider > *"),this.getCell(t))},p.getAdjacentCellElements=function(t,e){if(!t)return this.selectedSlide.getCellElements();e=void 0===e?this.selectedIndex:e;var i=this.slides.length;if(1+2*t>=i)return this.getCellElements();for(var s=[],o=e-t;o<=e+t;o++){var r=this.options.wrapAround?n.modulo(o,i):o,a=this.slides[r];a&&(s=s.concat(a.getCellElements()))}return s},p.uiChange=function(){this.emitEvent("uiChange")},p.childUIPointerDown=function(t){this.emitEvent("childUIPointerDown",[t])},p.onresize=function(){this.watchCSS(),this.resize()},n.debounceMethod(l,"onresize",150),p.resize=function(){if(this.isActive){this.getSize(),this.options.wrapAround&&(this.x=n.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize");var t=this.selectedElements&&this.selectedElements[0];this.selectCell(t,!1,!0)}},p.watchCSS=function(){var t=this.options.watchCSS;if(t){var e=c(this.element,":after").content;e.indexOf("flickity")!=-1?this.activate():this.deactivate()}},p.onkeydown=function(t){if(this.options.accessibility&&(!document.activeElement||document.activeElement==this.element))if(37==t.keyCode){var e=this.options.rightToLeft?"next":"previous";this.uiChange(),this[e]()}else if(39==t.keyCode){var i=this.options.rightToLeft?"previous":"next";this.uiChange(),this[i]()}},p.deactivate=function(){this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.cells.forEach(function(t){t.destroy()}),this.unselectSelectedSlide(),this.element.removeChild(this.viewport),a(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},p.destroy=function(){this.deactivate(),t.removeEventListener("resize",this),this.emitEvent("destroy"),h&&this.$element&&h.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete f[this.guid]},n.extend(p,r),l.data=function(t){t=n.getQueryElement(t);var e=t&&t.flickityGUID;return e&&f[e]},n.htmlInit(l,"flickity"),h&&h.bridget&&h.bridget("flickity",l),l.Cell=s,l}),function(t,e){"function"==typeof define&&define.amd?define("unipointer/unipointer",["ev-emitter/ev-emitter"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("ev-emitter")):t.Unipointer=e(t,t.EvEmitter)}(window,function(t,e){function i(){}function n(){}var s=n.prototype=Object.create(e.prototype);s.bindStartEvent=function(t){this._bindStartEvent(t,!0)},s.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},s._bindStartEvent=function(e,i){i=void 0===i||!!i;var n=i?"addEventListener":"removeEventListener";t.navigator.pointerEnabled?e[n]("pointerdown",this):t.navigator.msPointerEnabled?e[n]("MSPointerDown",this):(e[n]("mousedown",this),e[n]("touchstart",this))},s.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},s.getTouch=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i.identifier==this.pointerIdentifier)return i}},s.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},s.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},s.onMSPointerDown=s.onpointerdown=function(t){this._pointerDown(t,t)},s._pointerDown=function(t,e){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},s.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var o={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return s._bindPostStartEvents=function(e){if(e){var i=o[e.type];i.forEach(function(e){t.addEventListener(e,this)},this),this._boundPointerEvents=i}},s._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach(function(e){t.removeEventListener(e,this)},this),delete this._boundPointerEvents)},s.onmousemove=function(t){this._pointerMove(t,t)},s.onMSPointerMove=s.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},s.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},s._pointerMove=function(t,e){this.pointerMove(t,e)},s.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},s.onmouseup=function(t){this._pointerUp(t,t)},s.onMSPointerUp=s.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},s.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},s._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},s.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},s._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},s.pointerDone=i,s.onMSPointerCancel=s.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},s.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},s._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},s.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},n.getPointerPoint=function(t){return{x:t.pageX,y:t.pageY}},n}),function(t,e){"function"==typeof define&&define.amd?define("unidragger/unidragger",["unipointer/unipointer"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("unipointer")):t.Unidragger=e(t,t.Unipointer)}(window,function(t,e){function i(){}function n(){}var s=n.prototype=Object.create(e.prototype);s.bindHandles=function(){this._bindHandles(!0)},s.unbindHandles=function(){this._bindHandles(!1)};var o=t.navigator;return s._bindHandles=function(t){t=void 0===t||!!t;var e;e=o.pointerEnabled?function(e){e.style.touchAction=t?"none":""}:o.msPointerEnabled?function(e){e.style.msTouchAction=t?"none":""}:i;for(var n=t?"addEventListener":"removeEventListener",s=0;s<this.handles.length;s++){var r=this.handles[s];this._bindStartEvent(r,t),e(r),r[n]("click",this)}},s.pointerDown=function(t,e){if("INPUT"==t.target.nodeName&&"range"==t.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(t,e);var i=document.activeElement;i&&i.blur&&i.blur(),this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])},s._dragPointerDown=function(t,i){this.pointerDownPoint=e.getPointerPoint(i);var n=this.canPreventDefaultOnPointerDown(t,i);n&&t.preventDefault()},s.canPreventDefaultOnPointerDown=function(t){return"SELECT"!=t.target.nodeName},s.pointerMove=function(t,e){var i=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,i]),this._dragMove(t,e,i)},s._dragPointerMove=function(t,i){var n=e.getPointerPoint(i),s={x:n.x-this.pointerDownPoint.x,y:n.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(s)&&this._dragStart(t,i),s},s.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},s.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},s._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},s._dragStart=function(t,i){this.isDragging=!0,this.dragStartPoint=e.getPointerPoint(i),this.isPreventingClicks=!0,this.dragStart(t,i)},s.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},s._dragMove=function(t,e,i){this.isDragging&&this.dragMove(t,e,i)},s.dragMove=function(t,e,i){t.preventDefault(),this.emitEvent("dragMove",[t,e,i])},s._dragEnd=function(t,e){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(t,e)},s.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},s.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},s._staticClick=function(t,e){if(!this.isIgnoringMouseUp||"mouseup"!=t.type){var i=t.target.nodeName;"INPUT"!=i&&"TEXTAREA"!=i||t.target.focus(),this.staticClick(t,e),"mouseup"!=t.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400))}},s.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},n.getPointerPoint=e.getPointerPoint,n}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/drag",["./flickity","unidragger/unidragger","fizzy-ui-utils/utils"],function(i,n,s){return e(t,i,n,s)}):"object"==typeof module&&module.exports?module.exports=e(t,require("./flickity"),require("unidragger"),require("fizzy-ui-utils")):t.Flickity=e(t,t.Flickity,t.Unidragger,t.fizzyUIUtils)}(window,function(t,e,i,n){function s(){return{x:t.pageXOffset,y:t.pageYOffset}}n.extend(e.defaults,{draggable:!0,dragThreshold:3}),e.createMethods.push("_createDrag");var o=e.prototype;n.extend(o,i.prototype);var r="createTouch"in document,a=!1;o._createDrag=function(){this.on("activate",this.bindDrag),this.on("uiChange",this._uiChangeDrag),this.on("childUIPointerDown",this._childUIPointerDownDrag),this.on("deactivate",this.unbindDrag),r&&!a&&(t.addEventListener("touchmove",function(){}),a=!0)},o.bindDrag=function(){this.options.draggable&&!this.isDragBound&&(this.element.classList.add("is-draggable"),this.handles=[this.viewport],this.bindHandles(),this.isDragBound=!0)},o.unbindDrag=function(){this.isDragBound&&(this.element.classList.remove("is-draggable"),this.unbindHandles(),delete this.isDragBound)},o._uiChangeDrag=function(){delete this.isFreeScrolling},o._childUIPointerDownDrag=function(t){t.preventDefault(),this.pointerDownFocus(t)};var l={TEXTAREA:!0,INPUT:!0,OPTION:!0},h={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};o.pointerDown=function(e,i){var n=l[e.target.nodeName]&&!h[e.target.type];if(n)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(e,i);var o=document.activeElement;o&&o.blur&&o!=this.element&&o!=document.body&&o.blur(),this.pointerDownFocus(e),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this._bindPostStartEvents(e),this.pointerDownScroll=s(),t.addEventListener("scroll",this),this.dispatchEvent("pointerDown",e,[i])};var c={touchstart:!0,MSPointerDown:!0},d={INPUT:!0,SELECT:!0};return o.pointerDownFocus=function(e){if(this.options.accessibility&&!c[e.type]&&!d[e.target.nodeName]){var i=t.pageYOffset;this.element.focus(),t.pageYOffset!=i&&t.scrollTo(t.pageXOffset,i)}},o.canPreventDefaultOnPointerDown=function(t){var e="touchstart"==t.type,i=t.target.nodeName;return!e&&"SELECT"!=i},o.hasDragStarted=function(t){return Math.abs(t.x)>this.options.dragThreshold},o.pointerUp=function(t,e){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down"),this.dispatchEvent("pointerUp",t,[e]),this._dragPointerUp(t,e)},o.pointerDone=function(){t.removeEventListener("scroll",this),delete this.pointerDownScroll},o.dragStart=function(e,i){this.dragStartPosition=this.x,this.startAnimation(),t.removeEventListener("scroll",this),this.dispatchEvent("dragStart",e,[i])},o.pointerMove=function(t,e){var i=this._dragPointerMove(t,e);this.dispatchEvent("pointerMove",t,[e,i]),this._dragMove(t,e,i)},o.dragMove=function(t,e,i){t.preventDefault(),this.previousDragX=this.dragX;var n=this.options.rightToLeft?-1:1,s=this.dragStartPosition+i.x*n;if(!this.options.wrapAround&&this.slides.length){var o=Math.max(-this.slides[0].target,this.dragStartPosition);s=s>o?.5*(s+o):s;var r=Math.min(-this.getLastSlide().target,this.dragStartPosition);s=s<r?.5*(s+r):s}this.dragX=s,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",t,[e,i])},o.dragEnd=function(t,e){this.options.freeScroll&&(this.isFreeScrolling=!0);var i=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var n=this.getRestingPosition();this.isFreeScrolling=-n>this.slides[0].target&&-n<this.getLastSlide().target}else this.options.freeScroll||i!=this.selectedIndex||(i+=this.dragEndBoostSelect());delete this.previousDragX,this.isDragSelect=this.options.wrapAround,this.select(i),delete this.isDragSelect,this.dispatchEvent("dragEnd",t,[e])},o.dragEndRestingSelect=function(){
var t=this.getRestingPosition(),e=Math.abs(this.getSlideDistance(-t,this.selectedIndex)),i=this._getClosestResting(t,e,1),n=this._getClosestResting(t,e,-1),s=i.distance<n.distance?i.index:n.index;return s},o._getClosestResting=function(t,e,i){for(var n=this.selectedIndex,s=1/0,o=this.options.contain&&!this.options.wrapAround?function(t,e){return t<=e}:function(t,e){return t<e};o(e,s)&&(n+=i,s=e,e=this.getSlideDistance(-t,n),null!==e);)e=Math.abs(e);return{distance:s,index:n-i}},o.getSlideDistance=function(t,e){var i=this.slides.length,s=this.options.wrapAround&&i>1,o=s?n.modulo(e,i):e,r=this.slides[o];if(!r)return null;var a=s?this.slideableWidth*Math.floor(e/i):0;return t-(r.target+a)},o.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var t=this.getSlideDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX;return t>0&&e>0?1:t<0&&e<0?-1:0},o.staticClick=function(t,e){var i=this.getParentCell(t.target),n=i&&i.element,s=i&&this.cells.indexOf(i);this.dispatchEvent("staticClick",t,[e,n,s])},o.onscroll=function(){var t=s(),e=this.pointerDownScroll.x-t.x,i=this.pointerDownScroll.y-t.y;(Math.abs(e)>3||Math.abs(i)>3)&&this._pointerDone()},e}),function(t,e){"function"==typeof define&&define.amd?define("tap-listener/tap-listener",["unipointer/unipointer"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("unipointer")):t.TapListener=e(t,t.Unipointer)}(window,function(t,e){function i(t){this.bindTap(t)}var n=i.prototype=Object.create(e.prototype);return n.bindTap=function(t){t&&(this.unbindTap(),this.tapElement=t,this._bindStartEvent(t,!0))},n.unbindTap=function(){this.tapElement&&(this._bindStartEvent(this.tapElement,!0),delete this.tapElement)},n.pointerUp=function(i,n){if(!this.isIgnoringMouseUp||"mouseup"!=i.type){var s=e.getPointerPoint(n),o=this.tapElement.getBoundingClientRect(),r=t.pageXOffset,a=t.pageYOffset,l=s.x>=o.left+r&&s.x<=o.right+r&&s.y>=o.top+a&&s.y<=o.bottom+a;if(l&&this.emitEvent("tap",[i,n]),"mouseup"!=i.type){this.isIgnoringMouseUp=!0;var h=this;setTimeout(function(){delete h.isIgnoringMouseUp},400)}}},n.destroy=function(){this.pointerDone(),this.unbindTap()},i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/prev-next-button",["./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(i,n,s){return e(t,i,n,s)}):"object"==typeof module&&module.exports?module.exports=e(t,require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):e(t,t.Flickity,t.TapListener,t.fizzyUIUtils)}(window,function(t,e,i,n){"use strict";function s(t,e){this.direction=t,this.parent=e,this._create()}function o(t){return"string"==typeof t?t:"M "+t.x0+",50 L "+t.x1+","+(t.y1+50)+" L "+t.x2+","+(t.y2+50)+" L "+t.x3+",50  L "+t.x2+","+(50-t.y2)+" L "+t.x1+","+(50-t.y1)+" Z"}var r="http://www.w3.org/2000/svg";s.prototype=new i,s.prototype._create=function(){this.isEnabled=!0,this.isPrevious=this.direction==-1;var t=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==t;var e=this.element=document.createElement("button");e.className="flickity-prev-next-button",e.className+=this.isPrevious?" previous":" next",e.setAttribute("type","button"),this.disable(),e.setAttribute("aria-label",this.isPrevious?"previous":"next");var i=this.createSVG();e.appendChild(i),this.on("tap",this.onTap),this.parent.on("select",this.update.bind(this)),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},s.prototype.activate=function(){this.bindTap(this.element),this.element.addEventListener("click",this),this.parent.element.appendChild(this.element)},s.prototype.deactivate=function(){this.parent.element.removeChild(this.element),i.prototype.destroy.call(this),this.element.removeEventListener("click",this)},s.prototype.createSVG=function(){var t=document.createElementNS(r,"svg");t.setAttribute("viewBox","0 0 100 100");var e=document.createElementNS(r,"path"),i=o(this.parent.options.arrowShape);return e.setAttribute("d",i),e.setAttribute("class","arrow"),this.isLeft||e.setAttribute("transform","translate(100, 100) rotate(180) "),t.appendChild(e),t},s.prototype.onTap=function(){if(this.isEnabled){this.parent.uiChange();var t=this.isPrevious?"previous":"next";this.parent[t]()}},s.prototype.handleEvent=n.handleEvent,s.prototype.onclick=function(){var t=document.activeElement;t&&t==this.element&&this.onTap()},s.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},s.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},s.prototype.update=function(){var t=this.parent.slides;if(this.parent.options.wrapAround&&t.length>1)return void this.enable();var e=t.length?t.length-1:0,i=this.isPrevious?0:e,n=this.parent.selectedIndex==i?"disable":"enable";this[n]()},s.prototype.destroy=function(){this.deactivate()},n.extend(e.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),e.createMethods.push("_createPrevNextButtons");var a=e.prototype;return a._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new s((-1),this),this.nextButton=new s(1,this),this.on("activate",this.activatePrevNextButtons))},a.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},a.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},e.PrevNextButton=s,e}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/page-dots",["./flickity","tap-listener/tap-listener","fizzy-ui-utils/utils"],function(i,n,s){return e(t,i,n,s)}):"object"==typeof module&&module.exports?module.exports=e(t,require("./flickity"),require("tap-listener"),require("fizzy-ui-utils")):e(t,t.Flickity,t.TapListener,t.fizzyUIUtils)}(window,function(t,e,i,n){function s(t){this.parent=t,this._create()}s.prototype=new i,s.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",this.dots=[],this.on("tap",this.onTap),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},s.prototype.activate=function(){this.setDots(),this.bindTap(this.holder),this.parent.element.appendChild(this.holder)},s.prototype.deactivate=function(){this.parent.element.removeChild(this.holder),i.prototype.destroy.call(this)},s.prototype.setDots=function(){var t=this.parent.slides.length-this.dots.length;t>0?this.addDots(t):t<0&&this.removeDots(-t)},s.prototype.addDots=function(t){for(var e=document.createDocumentFragment(),i=[];t;){var n=document.createElement("li");n.className="dot",e.appendChild(n),i.push(n),t--}this.holder.appendChild(e),this.dots=this.dots.concat(i)},s.prototype.removeDots=function(t){var e=this.dots.splice(this.dots.length-t,t);e.forEach(function(t){this.holder.removeChild(t)},this)},s.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot"),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected")},s.prototype.onTap=function(t){var e=t.target;if("LI"==e.nodeName){this.parent.uiChange();var i=this.dots.indexOf(e);this.parent.select(i)}},s.prototype.destroy=function(){this.deactivate()},e.PageDots=s,n.extend(e.defaults,{pageDots:!0}),e.createMethods.push("_createPageDots");var o=e.prototype;return o._createPageDots=function(){this.options.pageDots&&(this.pageDots=new s(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots))},o.activatePageDots=function(){this.pageDots.activate()},o.updateSelectedPageDots=function(){this.pageDots.updateSelected()},o.updatePageDots=function(){this.pageDots.setDots()},o.deactivatePageDots=function(){this.pageDots.deactivate()},e.PageDots=s,e}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/player",["ev-emitter/ev-emitter","fizzy-ui-utils/utils","./flickity"],function(t,i,n){return e(t,i,n)}):"object"==typeof module&&module.exports?module.exports=e(require("ev-emitter"),require("fizzy-ui-utils"),require("./flickity")):e(t.EvEmitter,t.fizzyUIUtils,t.Flickity)}(window,function(t,e,i){function n(t){this.parent=t,this.state="stopped",o&&(this.onVisibilityChange=function(){this.visibilityChange()}.bind(this),this.onVisibilityPlay=function(){this.visibilityPlay()}.bind(this))}var s,o;"hidden"in document?(s="hidden",o="visibilitychange"):"webkitHidden"in document&&(s="webkitHidden",o="webkitvisibilitychange"),n.prototype=Object.create(t.prototype),n.prototype.play=function(){if("playing"!=this.state){var t=document[s];if(o&&t)return void document.addEventListener(o,this.onVisibilityPlay);this.state="playing",o&&document.addEventListener(o,this.onVisibilityChange),this.tick()}},n.prototype.tick=function(){if("playing"==this.state){var t=this.parent.options.autoPlay;t="number"==typeof t?t:3e3;var e=this;this.clear(),this.timeout=setTimeout(function(){e.parent.next(!0),e.tick()},t)}},n.prototype.stop=function(){this.state="stopped",this.clear(),o&&document.removeEventListener(o,this.onVisibilityChange)},n.prototype.clear=function(){clearTimeout(this.timeout)},n.prototype.pause=function(){"playing"==this.state&&(this.state="paused",this.clear())},n.prototype.unpause=function(){"paused"==this.state&&this.play()},n.prototype.visibilityChange=function(){var t=document[s];this[t?"pause":"unpause"]()},n.prototype.visibilityPlay=function(){this.play(),document.removeEventListener(o,this.onVisibilityPlay)},e.extend(i.defaults,{pauseAutoPlayOnHover:!0}),i.createMethods.push("_createPlayer");var r=i.prototype;return r._createPlayer=function(){this.player=new n(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},r.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},r.playPlayer=function(){this.player.play()},r.stopPlayer=function(){this.player.stop()},r.pausePlayer=function(){this.player.pause()},r.unpausePlayer=function(){this.player.unpause()},r.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},r.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},r.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},i.Player=n,i}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/add-remove-cell",["./flickity","fizzy-ui-utils/utils"],function(i,n){return e(t,i,n)}):"object"==typeof module&&module.exports?module.exports=e(t,require("./flickity"),require("fizzy-ui-utils")):e(t,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,i){function n(t){var e=document.createDocumentFragment();return t.forEach(function(t){e.appendChild(t.element)}),e}var s=e.prototype;return s.insert=function(t,e){var i=this._makeCells(t);if(i&&i.length){var s=this.cells.length;e=void 0===e?s:e;var o=n(i),r=e==s;if(r)this.slider.appendChild(o);else{var a=this.cells[e].element;this.slider.insertBefore(o,a)}if(0===e)this.cells=i.concat(this.cells);else if(r)this.cells=this.cells.concat(i);else{var l=this.cells.splice(e,s-e);this.cells=this.cells.concat(i).concat(l)}this._sizeCells(i);var h=e>this.selectedIndex?0:i.length;this._cellAddedRemoved(e,h)}},s.append=function(t){this.insert(t,this.cells.length)},s.prepend=function(t){this.insert(t,0)},s.remove=function(t){var e,n,s=this.getCells(t),o=0,r=s.length;for(e=0;e<r;e++){n=s[e];var a=this.cells.indexOf(n)<this.selectedIndex;o-=a?1:0}for(e=0;e<r;e++)n=s[e],n.remove(),i.removeFrom(this.cells,n);s.length&&this._cellAddedRemoved(0,o)},s._cellAddedRemoved=function(t,e){e=e||0,this.selectedIndex+=e,this.selectedIndex=Math.max(0,Math.min(this.slides.length-1,this.selectedIndex)),this.cellChange(t,!0),this.emitEvent("cellAddedRemoved",[t,e])},s.cellSizeChange=function(t){var e=this.getCell(t);if(e){e.getSize();var i=this.cells.indexOf(e);this.cellChange(i)}},s.cellChange=function(t,e){var i=this.slideableWidth;if(this._positionCells(t),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("cellChange",[t]),this.options.freeScroll){var n=i-this.slideableWidth;this.x+=n*this.cellAlign,this.positionSlider()}else e&&this.positionSliderAtSelected(),this.select(this.selectedIndex)},e}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/lazyload",["./flickity","fizzy-ui-utils/utils"],function(i,n){return e(t,i,n)}):"object"==typeof module&&module.exports?module.exports=e(t,require("./flickity"),require("fizzy-ui-utils")):e(t,t.Flickity,t.fizzyUIUtils)}(window,function(t,e,i){"use strict";function n(t){if("IMG"==t.nodeName&&t.getAttribute("data-flickity-lazyload"))return[t];var e=t.querySelectorAll("img[data-flickity-lazyload]");return i.makeArray(e)}function s(t,e){this.img=t,this.flickity=e,this.load()}e.createMethods.push("_createLazyload");var o=e.prototype;return o._createLazyload=function(){this.on("select",this.lazyLoad)},o.lazyLoad=function(){var t=this.options.lazyLoad;if(t){var e="number"==typeof t?t:0,i=this.getAdjacentCellElements(e),o=[];i.forEach(function(t){var e=n(t);o=o.concat(e)}),o.forEach(function(t){new s(t,this)},this)}},s.prototype.handleEvent=i.handleEvent,s.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.img.getAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload")},s.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},s.prototype.onerror=function(t){this.complete(t,"flickity-lazyerror")},s.prototype.complete=function(t,e){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this);var i=this.flickity.getParentCell(this.img),n=i&&i.element;this.flickity.cellSizeChange(n),this.img.classList.add(e),this.flickity.dispatchEvent("lazyLoad",t,n)},e.LazyLoader=s,e}),function(t,e){"function"==typeof define&&define.amd?define("flickity/js/index",["./flickity","./drag","./prev-next-button","./page-dots","./player","./add-remove-cell","./lazyload"],e):"object"==typeof module&&module.exports&&(module.exports=e(require("./flickity"),require("./drag"),require("./prev-next-button"),require("./page-dots"),require("./player"),require("./add-remove-cell"),require("./lazyload")))}(window,function(t){return t}),function(t,e){"function"==typeof define&&define.amd?define("flickity-as-nav-for/as-nav-for",["flickity/js/index","fizzy-ui-utils/utils"],e):"object"==typeof module&&module.exports?module.exports=e(require("flickity"),require("fizzy-ui-utils")):t.Flickity=e(t.Flickity,t.fizzyUIUtils)}(window,function(t,e){function i(t,e,i){return(e-t)*i+t}t.createMethods.push("_createAsNavFor");var n=t.prototype;return n._createAsNavFor=function(){this.on("activate",this.activateAsNavFor),this.on("deactivate",this.deactivateAsNavFor),this.on("destroy",this.destroyAsNavFor);var t=this.options.asNavFor;if(t){var e=this;setTimeout(function(){e.setNavCompanion(t)})}},n.setNavCompanion=function(i){i=e.getQueryElement(i);var n=t.data(i);if(n&&n!=this){this.navCompanion=n;var s=this;this.onNavCompanionSelect=function(){s.navCompanionSelect()},n.on("select",this.onNavCompanionSelect),this.on("staticClick",this.onNavStaticClick),this.navCompanionSelect(!0)}},n.navCompanionSelect=function(t){if(this.navCompanion){var e=this.navCompanion.selectedCells[0],n=this.navCompanion.cells.indexOf(e),s=n+this.navCompanion.selectedCells.length-1,o=Math.floor(i(n,s,this.navCompanion.cellAlign));if(this.selectCell(o,!1,t),this.removeNavSelectedElements(),!(o>=this.cells.length)){var r=this.cells.slice(n,s+1);this.navSelectedElements=r.map(function(t){return t.element}),this.changeNavSelectedClass("add")}}},n.changeNavSelectedClass=function(t){this.navSelectedElements.forEach(function(e){e.classList[t]("is-nav-selected")})},n.activateAsNavFor=function(){this.navCompanionSelect(!0)},n.removeNavSelectedElements=function(){this.navSelectedElements&&(this.changeNavSelectedClass("remove"),delete this.navSelectedElements)},n.onNavStaticClick=function(t,e,i,n){"number"==typeof n&&this.navCompanion.selectCell(n)},n.deactivateAsNavFor=function(){this.removeNavSelectedElements()},n.destroyAsNavFor=function(){this.navCompanion&&(this.navCompanion.off("select",this.onNavCompanionSelect),this.off("staticClick",this.onNavStaticClick),delete this.navCompanion)},t}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("imagesloaded/imagesloaded",["ev-emitter/ev-emitter"],function(i){return e(t,i)}):"object"==typeof module&&module.exports?module.exports=e(t,require("ev-emitter")):t.imagesLoaded=e(t,t.EvEmitter)}(window,function(t,e){function i(t,e){for(var i in e)t[i]=e[i];return t}function n(t){var e=[];if(Array.isArray(t))e=t;else if("number"==typeof t.length)for(var i=0;i<t.length;i++)e.push(t[i]);else e.push(t);return e}function s(t,e,o){return this instanceof s?("string"==typeof t&&(t=document.querySelectorAll(t)),this.elements=n(t),this.options=i({},this.options),"function"==typeof e?o=e:i(this.options,e),o&&this.on("always",o),this.getImages(),a&&(this.jqDeferred=new a.Deferred),void setTimeout(function(){this.check()}.bind(this))):new s(t,e,o)}function o(t){this.img=t}function r(t,e){this.url=t,this.element=e,this.img=new Image}var a=t.jQuery,l=t.console;s.prototype=Object.create(e.prototype),s.prototype.options={},s.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},s.prototype.addElementImages=function(t){"IMG"==t.nodeName&&this.addImage(t),this.options.background===!0&&this.addElementBackgroundImages(t);var e=t.nodeType;if(e&&h[e]){for(var i=t.querySelectorAll("img"),n=0;n<i.length;n++){var s=i[n];this.addImage(s)}if("string"==typeof this.options.background){var o=t.querySelectorAll(this.options.background);for(n=0;n<o.length;n++){var r=o[n];this.addElementBackgroundImages(r)}}}};var h={1:!0,9:!0,11:!0};return s.prototype.addElementBackgroundImages=function(t){var e=getComputedStyle(t);if(e)for(var i=/url\((['"])?(.*?)\1\)/gi,n=i.exec(e.backgroundImage);null!==n;){var s=n&&n[2];s&&this.addBackground(s,t),n=i.exec(e.backgroundImage)}},s.prototype.addImage=function(t){var e=new o(t);this.images.push(e)},s.prototype.addBackground=function(t,e){var i=new r(t,e);this.images.push(i)},s.prototype.check=function(){function t(t,i,n){setTimeout(function(){e.progress(t,i,n)})}var e=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(e){e.once("progress",t),e.check()}):void this.complete()},s.prototype.progress=function(t,e,i){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded,this.emitEvent("progress",[this,t,e]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,t),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&l&&l.log("progress: "+i,t,e)},s.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(t,[this]),this.emitEvent("always",[this]),this.jqDeferred){var e=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[e](this)}},o.prototype=Object.create(e.prototype),o.prototype.check=function(){var t=this.getIsImageComplete();return t?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},o.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},o.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.img,e])},o.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},o.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},o.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},o.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},r.prototype=Object.create(o.prototype),r.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var t=this.getIsImageComplete();t&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},r.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},r.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.element,e])},s.makeJQueryPlugin=function(e){e=e||t.jQuery,e&&(a=e,a.fn.imagesLoaded=function(t,e){var i=new s(this,t,e);return i.jqDeferred.promise(a(this))})},s.makeJQueryPlugin(),s}),function(t,e){"function"==typeof define&&define.amd?define(["flickity/js/index","imagesloaded/imagesloaded"],function(i,n){return e(t,i,n)}):"object"==typeof module&&module.exports?module.exports=e(t,require("flickity"),require("imagesloaded")):t.Flickity=e(t,t.Flickity,t.imagesLoaded)}(window,function(t,e,i){"use strict";e.createMethods.push("_createImagesLoaded");var n=e.prototype;return n._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},n.imagesLoaded=function(){function t(t,i){var n=e.getParentCell(i.img);e.cellSizeChange(n&&n.element),e.options.freeScroll||e.positionSliderAtSelected()}if(this.options.imagesLoaded){var e=this;i(this.slider).on("progress",t)}},e});
$(function() {
    // Add ADs and reporting
    window.Triforce.getMediator().trigger('triforce:addqueue', {
        'queueName': 'ads-reporting',
        'type': 'default',
        'loadFunction': function () {
            if(triforceManifestFeed.supplemental && triforceManifestFeed.supplemental.isWebview) return;

            var a = document.createElement('div');
            a.id = 'ads-reporting';
            document.body.appendChild(a);
            $.ajaxSetup({cache: true});
            $.getScript('/media/module/ENT_Reporting').done(function () {
                var a = $('#ads-reporting'), s = new $Crabapple.TriforceModule_reporting_v1();
                s.init(a, {});
            });
        },
        'processFunction': function ($item) {
            // nada
        }
    });

    // Add Device type class
    $('html').addClass(window.Triforce.getMediator().isMobile() ? 'device-mobile' : 'device-desktop');

    (function () {
        var PAGE_MODAL_CLASS = 'page--modal',
            MODULE_NAME_FOR_REPORTING = 'Page Modal',
            pageLoader = window.Triforce.getPageLoader(),
            mediator = window.Triforce.getMediator(),
            allowModalExperience = true,
            hasEnteredModal = false,
            pageToLoadOnModalClose;

        if (mediator.triforcePageReady) {
            onPageReady();
        }
        mediator.on('triforce:pageready', onPageReady);

        function onModalClose () {
            mediator.off('page:modal:close', onModalClose);

            mediator.trigger('triforce:loadpage', pageToLoadOnModalClose);

            reportEvent({
                action: 'Clicks on Modal X',
                destination: pageToLoadOnModalClose
            });
        }

        function isModalable () {
            return triforceManifestFeed.parameters && triforceManifestFeed.parameters.isModalable === 'true';
        }

        function onPageReady () {
            var previousPageURL = pageLoader.previousPage;

            // Check if it was a push state (by comparing URLs, both will have same value on first load)
            if (previousPageURL === pageLoader.currentPage) {
                if (isModalable()) {
                    // User has entered site on modalable page. We should not allow pages load in modal
                    allowModalExperience = false;
                }

                return;
            }

            if (isModalable()) {
                // Check if we already entered modal experience
                if (allowModalExperience && !hasEnteredModal) {
                    hasEnteredModal = true;

                    pageToLoadOnModalClose = previousPageURL;

                    // Add a class to the page so we can target in CSS
                    document.documentElement.classList.add(PAGE_MODAL_CLASS);

                    // Fire off the event for any module interested to update DOM, setup events etc.
                    mediator.trigger('page:modal:enter', {
                        previousPageURL: previousPageURL
                    });

                    mediator.on('page:modal:close', onModalClose);
                }
            } else {
                // First time user goes to a page that is not modal. We should allow modal pages
                if (!allowModalExperience) {
                    allowModalExperience = true;
                }

                // This page does not support Modal Experience, we need to exit out
                if (hasEnteredModal) {
                    hasEnteredModal = false;

                    pageToLoadOnModalClose = null;

                    // Clean up
                    document.documentElement.classList.remove(PAGE_MODAL_CLASS);

                    // Fire off 'exit' event, so other modules can do the clean up
                    mediator.trigger('page:modal:exit');
                }
            }
        }

        function reportEvent (reportingObject) {
            var destination = 'no destination',
                action = '';

            if (reportingObject) {
                if (reportingObject.destination) {
                    destination = reportingObject.destination;
                }
                if (reportingObject.action) {
                    action = reportingObject.action;
                }
            }

            try {
                $Crabapple.repo.trackModuleClickThrough(MODULE_NAME_FOR_REPORTING, destination, action);
            } catch (e) {
                mediator.trigger('triforce:message', {
                    'type': 'error',
                    'message': 'Reporting for ' + MODULE_NAME_FOR_REPORTING + ' returns error',
                    'exception': e
                });
            }
        }
    })();

    (function () {
        // IIFE is used to hide some variables & functions
        var _loadingStyleSheet;

        window.Triforce.getMediator().on('triforce:pageready', function () {
            var styleSheets = document.querySelectorAll('link[rel=stylesheet]'),
                pageStyle = triforceManifestFeed && triforceManifestFeed.supplemental && triforceManifestFeed.supplemental.pageStyle,
                activeSiteStyleSheets = [],
                styleSheetType,
                isDefaultStyleSheet = false,
                pageStyleSheet,
                i, len;

            for (i = 0, len = styleSheets.length; i < len; i++) {
                if (styleSheets[i]) {
                    styleSheetType = styleSheets[i].getAttribute('data-type');
                    isDefaultStyleSheet = styleSheetType === 'defaultSiteCSS';

                    if (pageStyle) {
                        if (styleSheetType === 'siteCSS' || isDefaultStyleSheet) {
                            // need to check against relative link(the JS computed href prop becomes full URL)
                            if (styleSheets[i].getAttribute('href') !== pageStyle) {
                                if (!styleSheets[i].disabled) {
                                    activeSiteStyleSheets.push(styleSheets[i]);
                                }
                            } else {
                                pageStyleSheet = styleSheets[i];
                            }
                        }
                    } else {
                        // In case of no pageStyle override we simply disable all siteCSS stylesheets, but enable Default one
                        if (styleSheetType === 'siteCSS') {
                            styleSheets[i].disabled = true;
                        } else if (isDefaultStyleSheet) {
                            styleSheets[i].disabled = false;
                        }
                    }
                }
            }

            if (pageStyle) {
                if (pageStyleSheet) {
                    toggleTransitionState(false);
                    disableStyleSheets(activeSiteStyleSheets);
                    pageStyleSheet.disabled = false;
                } else {
                    toggleTransitionState(true);

                    var link = _loadingStyleSheet = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.type = 'text/css';
                    link.href = pageStyle;
                    link.setAttribute('data-type', 'siteCSS');
                    link.onload = function () {
                        // Check if it's still the style sheet we need - otherwise disable it
                        if (link === _loadingStyleSheet) {
                            toggleTransitionState(false);
                            disableStyleSheets(activeSiteStyleSheets);
                        } else {
                            this.disabled = true;
                        }
                    };
                    document.head.appendChild(link);
                }
            }
        });

        function disableStyleSheets (styleSheets) {
            if (styleSheets && styleSheets.length) {
                var i, len;

                for (i = 0, len = styleSheets.length; i < len; i++) {
                    styleSheets[i].disabled = true;
                }
            }
        }

        function toggleTransitionState (toggleFlag) {
            $('html').toggleClass('page--in-css-transition', toggleFlag);
        }
    })();


    // Adobe Target Implementation
    var AdobeTarget = {

        mboxName: null,
        targetDiv: null,

        // Inits recursive interval to check for Bento, Coda, and Adobe Target scripts
        init: function() {

            var reTryCounter = 0,
                RE_TRY_MAX_COUNT = 50,
                reTryInterval,
                _this = this;

            // If we were not able to create the mBox, retry
            if (!_this.addMbox()) {
                reTryInterval = setInterval(function () {
                    if (_this.addMbox() || reTryCounter++ >= RE_TRY_MAX_COUNT) {
                        clearInterval(reTryInterval);
                    }
                }, 100);
            }
        },

        // Once scripts have loaded, append the mBox to the page and call function to create offer
        addMbox: function() {

            // check that Coda, Bento and Adobe Target scripts are loaded since they are async
            if (typeof btg === 'object'
                && typeof Bento === 'object'
                && typeof adobe === 'object') {

                try {

                    var _this = this;

                    // Get mboxName from config, returns 'viamtv'
                    _this.mboxName = config.getAdobeTargetMboxName();

                    if (!_this.targetDiv) {

                        // Creates mbox element with id of 'target-global-mbox' and appends to DOM
                        _this.targetDiv = document.createElement('div');
                        _this.targetDiv.setAttribute('id', 'target-global-mbox');
                        _this.targetDiv.setAttribute('class', 'mboxDefault');
                        document.body.appendChild(_this.targetDiv);

                        // Subscribe to Triforce pushstate event for new page load
                        window.Triforce.getMediator().on('triforce:complete', function () {
                            if (typeof adobe === 'object') {
                                if (adobe.target) {
                                    // ajax call to get Target offer and applyOffer to mbox div
                                    _this.createOffer();
                                }
                            }
                        });
                    }
                    _this.createOffer();
                    return true;
                } catch (e) {
                    return false;
                }
            } else {
                return false;
            }

        },

        // Get and apply the Adobe Target Offer
        createOffer: function() {
            var _this = this;

            // ajax call to get Adobe Target Offer
            adobe.target.getOffer({
                "mbox": _this.mboxName, // 'viamtv'
                "timeout" : 5000,
                "success": function(offer) {

                    // apply Adobe Target offer to mbox targetDiv
                    adobe.target.applyOffer({
                        "offer": offer, // []
                        "element": _this.targetDiv // <div id="target-global-mbox" class="mboxDefault"></div>
                    });
                },
                "error": function(status, error) {}
            });
        }
    };

    if (typeof(config.getAdobeTargetEnabled) == 'function'
        && typeof(config.getAdobeTargetMboxName) == 'function'){

        if(config.getAdobeTargetEnabled()) {
            AdobeTarget.init();
        }
    }


});

$(function() {
    var $body = $('body'),
        $backgroundHolder = $('#background_holder'),
        isTransitionSupported = 'webkitTransition' in $body[0].style || 'transition' in $body[0].style;

    function checkTVEAuth () {
        var tveAuthObject = window.Triforce.getStorageManager().getObject('tveStorage'),
            tveClass = 'tve_auth';

        if (tveAuthObject && tveAuthObject.authorized) {
            $body.addClass(tveClass);
        } else {
            $body.removeClass(tveClass);
        }
    }
    checkTVEAuth();
    window.Triforce.getMediator().on('triforce:rendercomplete', checkTVEAuth);

    // EXPANSION CODE
    $body
        .on('click', '.toggleable_module_trigger', function () {
            var contentDiv = $(this).closest('.toggleable_module');

            if (contentDiv.hasClass('open')) {
                collapseModule(contentDiv);
            } else {
                // If currently closed, hide all others, show self
                expandModule(contentDiv);
            }
        })
        .on('webkitTransitionEnd transitionend', '.toggleable_module_content', function (e) {
            if (e.originalEvent.propertyName === 'max-height' && e.target === this) {
                $(this).css('max-height', '');
            }
        });

    function collapseModule ($moduleElement) {
        var $content = $moduleElement.find('.toggleable_module_content');

        if (isTransitionSupported) {
            // Unfortunately we've to read property after we set it,
            // so browser will recalculate it and we'll be able to use transition
            $content.css('max-height', $content.height() || 'none')
                .css('max-height');
            $content.css('max-height', 0);
        }

        $moduleElement.removeClass('open').trigger('triforce:module_collapsed');
    }
    function expandModule ($moduleElement) {
        var $content = $moduleElement.find('.toggleable_module_content');

        if (isTransitionSupported) {
            $content.css('max-height', $content[0].scrollHeight || 'none');
        }

        $moduleElement.addClass('open').trigger('triforce:module_expanded');
    }

    //color picker to help translate the passed in colors for page and module series overrides
    window.$MTV = window.$MTV || {};
    window.$MTV.triforce = window.$MTV.triforce || {};
    window.$MTV.triforce.colorPicker = function() {

        var result = {
            'primaryColor': false,
            'primaryTextColor': false,
            'secondaryColor': false,
            'secondaryTextColor': false,
            'sponsorImage': false
        };

        if(typeof triforceManifestFeed != 'undefined'
            && triforceManifestFeed.supplemental
            && triforceManifestFeed.supplemental.colors
            && triforceManifestFeed.supplemental.colors.colors) {

            // primary color pairing
            if(triforceManifestFeed.supplemental.colors.colors.primaryColor) {
                result.primaryColor = triforceManifestFeed.supplemental.colors.colors.primaryColor;
            }
            if(triforceManifestFeed.supplemental.colors.colors.primaryTextColor) {
                result.primaryTextColor = triforceManifestFeed.supplemental.colors.colors.primaryTextColor;
            }

            // secondary color pairing
            if(triforceManifestFeed.supplemental.colors.colors.secondaryColor) {
                result.secondaryColor = triforceManifestFeed.supplemental.colors.colors.secondaryColor;
            }

            if(triforceManifestFeed.supplemental.colors.colors.secondaryTextColor) {
                result.secondaryTextColor = triforceManifestFeed.supplemental.colors.colors.secondaryTextColor;
            }

            //sponsor image
            if(triforceManifestFeed.supplemental.colors.colors.sponsorImage) {
                result.sponsorImage = triforceManifestFeed.supplemental.colors.colors.sponsorImage;
            }

        }
        if(!result.primaryColor && !result.primaryTextColor && !result.secondaryColor && !result.secondaryTextColor) {
            // no values set, destroy existing series overrides
            $("style[id*='colorsPallete']").remove();
        }

        return result;
    };

    /*
     *  generateFloodlightTag() - Create floodlight iframe if the supplemental contains a floodlight url
     */
    window.$MTV.triforce.generateFloodlightTag = function() {
        if(typeof triforceManifestFeed != 'undefined'
            && triforceManifestFeed.supplemental
            && triforceManifestFeed.supplemental.floodlight) {
            var existingTag = $('#floodlight_tag');

            if(existingTag.length) {
                existingTag.remove();
            }

            var floodlightTag = document.createElement('iframe');

            floodlightTag.id = "floodlight_tag",
                floodlightTag.width = 1,
                floodlightTag.height = 1,
                floodlightTag.frameBorder = 0,
                floodlightTag.style = 'display:none;',
                floodlightTag.src = triforceManifestFeed.supplemental.floodlight;

            $('#footer').append(floodlightTag);
        }
    }

    /*
     *  checkForFullEpisodeFlag() - determines if it should render a flag for a linelist item.  This logic was moved global after it was changed
     *                              a dozen times and caused a lot of headaches versioning everything.
     */
    window.$MTV.triforce.checkForFullEpisodeFlag = function(item) {
        var showFlagOnTheseDescriptors = [
                'Full Episode',
                'Reunion',
                'Special'
            ],
            descriptor = '';

        if(item.distPolicy && item.distPolicy.episodeDescriptor) {
            descriptor = item.distPolicy.episodeDescriptor;
        }

        if(item.type == "episode" && descriptor && showFlagOnTheseDescriptors.indexOf(descriptor) >= 0) {
            return true; // all validation is passed, show the flag
        } else {
            return false; // no flag
        }
    }

    window.$MTV.triforce.applyPageStyleOverride = function() {
        $('style[id="pagestyleoverride"]').remove();
        if (triforceManifestFeed && triforceManifestFeed.supplemental) {
            if (triforceManifestFeed.supplemental.pageCSSOverride) {
                var s = document.createElement('link');
                s.id = 'pagestyleoverride';
                s.rel = 'stylesheet';
                s.type = 'text/css';
                s.href = triforceManifestFeed.supplemental.pageCSSOverride;
                document.head.appendChild(s);
            }
        }
    }


    // == Call all necessary functions on full page load ==
    window.$MTV.triforce.generateFloodlightTag();
    window.$MTV.triforce.applyPageStyleOverride();


    // == Event to handle push state calls for necessary functions ==
    window.Triforce.getMediator().on('triforce:pageready', function() {
        window.$MTV.triforce.applyPageStyleOverride();
        window.$MTV.triforce.generateFloodlightTag();

    });

    window.Triforce.getMediator().trigger('triforce:addqueue', {
        'queueName':'beacons',
        'type':'default',
        'loadFunction': function() {
            //series pixel calls
            $('#seriesPixelMathtag').remove();
            $('#seriesPixelTapad').remove();
            $('#seriesPixelGoogle').remove();
            if(triforceManifestFeed.supplemental) {
                if (triforceManifestFeed.supplemental.pixelMathtag) {
                    var location = document.getElementsByTagName('script')[0];
                    var script = document.createElement('script');
                    script.src = triforceManifestFeed.supplemental.pixelMathtag;
                    script.async = true;
                    script.id = "pixelMathtag";
                    location.parentNode.insertBefore(script, location);
                }
                if (triforceManifestFeed.supplemental.pixelTapad) {
                    var i = document.createElement('img');
                    i.src = triforceManifestFeed.supplemental.pixelTapad;
                    i.width = 1;
                    i.height = 1;
                    i.setAttribute('style', 'display:none');
                    i.id = "seriesPixelTapad";
                    document.body.appendChild(i);
                }
                if (triforceManifestFeed.supplemental.pixelGoogle) {
                    var i = document.createElement('img');
                    i.src = triforceManifestFeed.supplemental.pixelGoogle;
                    i.width = 1;
                    i.height = 1;
                    i.setAttribute('style', 'display:none');
                    i.id = "seriesPixelGoogle";
                    document.body.appendChild(i);
                }
            }
        },
        'processFunction':function(item) {}
    });

    window.Triforce.getMediator().on('triforce:loadpage', function (evt) {

        // New player destroy method
        if(typeof EdgePlayer != 'undefined'){
            EdgePlayer.getPlayers().forEach(function(player)
                { player.destroy(); }
            );
        }

        if(typeof DY != 'undefined'){
            DY.API( 'event',{name: 'New_Pageview', properties:{}});
        }
    });

});

// General Link Tracking Omniture Call
function autoLinkTrackEvent(promoName, destinationUrl, extraReportingObjs){
	var destinationUrl = (typeof destinationUrl != 'undefined' || destinationUrl=='') ? destinationUrl : 'no_destination_url';

	if (destinationUrl.substr(0,1) == '/') {
		destinationUrl = window.location.protocol + "//" + window.location.host + destinationUrl;
	}

	var _pageName = null;
	var _repCallObject = null;

	//because typeof seemed to always fail when used against the global variables...
	try{
		var _pageName = pageName;
		var _repCallObject = repCallObject;
	}catch(e){}
	if(_pageName === null){
		_pageName = 'pageName not found';
	}

	var promoName = promoName.toLowerCase();
	destinationUrl = destinationUrl.toLowerCase();
	if(_repCallObject === null) {
		_repCallObject = {
			prop8: 'undefined',
			eVar6: 'undefined'
		};
	}

	var show = _pageName.split('/')[1];

	baseReportingObj = {
		linkName:promoName,
		linkType:'o',
		prop8:show,
		prop25:promoName,
		prop26:promoName + '|' + _pageName,
		prop27:destinationUrl,
		eVar5:destinationUrl,
		eVar6:show,
		eVar7:promoName,
		eVar8:promoName + '|' + _pageName,
		eVar9:_pageName
	};

	if (typeof extraReportingObjs == 'object') {
		jQuery.extend(baseReportingObj, extraReportingObjs);
	}

	if (typeof(mtvn) != 'undefined') {
		mtvn.btg.Controller.sendLinkEvent(baseReportingObj);
	}
}

function shareWidgetTracking (shareService, linkValue, uniqueID) {
	if(typeof(pageName) == 'undefined'){
		var pageName = 'pageName not found';
	}

	var linkEventObj = {
		linkName:linkValue,
		linkType:'o',
		eVar60:pageName,
		eVar51:shareService,
		events:'event84'
	};

	if (typeof(uniqueID) != "undefined") {
		$.extend(linkEventObj, {eVar65:uniqueID});
	}

	if (typeof(mtvn) != 'undefined') {
		mtvn.btg.Controller.sendLinkEvent(linkEventObj);
	}
}

function shareBarLinkTracking (shareService, uniqueID) {
	var shareService = 'share_'+shareService,
		eVar65 = (typeof(eVar65) != "undefined")?eVar65.substr(4):document.title;

	/*if(typeof(pageName) == 'undefined'){
		var pageName = 'pageName not found';
	}*/

	var baseReportingObj = {
		linkName:'Community - Share',
		linkType:'o',
		eVar60:pageName,
		eVar65:eVar65,
		eVar51:shareService,
		events:'event84'
	};

	if (typeof uniqueID != 'undefined' &&  uniqueID != '') {
		eVar65Add = {"eVar65":uniqueID};
		jQuery.extend(baseReportingObj, eVar65Add);
	}

	if (typeof extraReportingObjs == 'object') {
		jQuery.extend(baseReportingObj, extraReportingObjs);
	}

	if (typeof(mtvn) != 'undefined') {
		mtvn.btg.Controller.sendLinkEvent(baseReportingObj);
	}
}


// Looks like this is how we do M002
function commentTracking(shareService) {
	var shareService = 'Community-Comment';
	var eVar65 =  $('.ent_m002 .comments').attr('data-mgid');
	if (typeof(mtvn) != 'undefined'){
		mtvn.btg.Controller.sendLinkEvent({
			linkName:'commenting',
			linkType:'o',
			events:'event88',
			evar60:pageName,
			evar65:eVar65,
			pev2:shareService
		});
	}
}

$(document).ready(function(){
	// autoLinkTrackEvent(promoName, destinationUrl, extraReportingObjs)

	var destinationUrl = "";
	var shareService = "embed";
	var $contentHolder = $('#content_holder');

    //M002
	$contentHolder.on('click', '.ent_m002 .toggleable_module_trigger', function(){
		destinationUrl = ($(this).closest('.toggleable_module').hasClass('open')) ? 'spike_flux_activity_header_collapse' : 'spike_flux_activity_header_expand';
		autoLinkTrackEvent('vh1_flux_activity', destinationUrl);
	});

    //M006 - Lives outside content holder
    $('body').on('click', '.ent_m006 a', function () {
        autoLinkTrackEvent('vh1_footer', this.href);
    });

	//M017 Tracking
	$contentHolder.on('click', '.ent_m017 .season_info a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_seriesvideos_promo', destinationUrl);
	});

    //M017 M018 M019 Share tracking
	$contentHolder.on('click', '.ent_m017 .share_wrapper .share li, .ent_m018 .share_wrapper .share li, .ent_m019 .share_wrapper .share li', function(){
        var link = $(this),
            reportShare = false,
            uniqueId = link.parents(".share_widget").attr("data-contenturi");

        if (link.hasClass("email")) {
            shareService = "email";
            reportShare = true;
        }
        if (link.hasClass("embed")) {
            shareService = "embed";
            reportShare = true;
        }
		if (link.hasClass("facebook")) {
			shareService = "facebook";
			reportShare = true;
		}
		if (link.hasClass("twitter")) {
			shareService = "twitter";
			reportShare = true;
		}

        if(reportShare) shareBarLinkTracking(shareService, uniqueId);
	});

    //M022
    $contentHolder.on('click', '.ent_m022 a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_editorialpromo_app', destinationUrl);
    });

    //M023
    $contentHolder.on('click', '.ent_m023 a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_episodeinfo_promo', destinationUrl);
    });

    //m023 - tracking affiliates
    $contentHolder.on('click', '.ent_m023 .slate_holder a', function(){
        var affiliate = 'mtv_affiliate_',
            link = $(this),
            reportShare = false,
            destinationUrl = $(this).attr('href');

        if (link.hasClass("amazon")) {
            affiliate += "amazon";
            reportShare = true;
        }
        if (link.hasClass("hulu")) {
            affiliate += "hulu";
            reportShare = true;
        }
        if (link.hasClass("netflix")) {
            affiliate += "netflix";
            reportShare = true;
        }

        if(reportShare) autoLinkTrackEvent(affiliate, destinationUrl);
    });

	//M046
	$contentHolder.on('click','.ent_m046 a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_announcement', destinationUrl);
	});

    //M066 - Header reporting
    $('body').on('click', '.ent_m066 .logo, .ent_m066 .site_logo', function(){
        var destinationUrl = 'http://www.vh1.com';
        autoLinkTrackEvent('vh1logo', destinationUrl);
    });

    $('body').on('click', '.ent_m066 .hamburger', function(event) {
        autoLinkTrackEvent('vh1menu');
    });

    $('body').on('click','.ent_m066 .main_nav a',function(){
        if ($(this).parent().hasClass('social')) {
            autoLinkTrackEvent('vh1_socialbuttons', this.href);
        } else {
            if ($('.sticky_header')[0]) {
                autoLinkTrackEvent('vh1_top-nav-mini', this.href);
            } else {
                autoLinkTrackEvent('vh1_top-nav', this.href); }
        }
    });

    $('body').on('click','.ent_m066 .side_navigation a',function(){
        if ( $(this).parent().hasClass('social') ) {
            autoLinkTrackEvent('vh1_socialbuttons_vertical', this.href);
        } else {
            autoLinkTrackEvent('vh1_top-nav_vertical', this.href);
        }
    });


	//M070 Series header module tracking
    $('body').on('click', '.ent_m070 .site_logo', function(){
        var destinationUrl = 'http://www.vh1.com';
        autoLinkTrackEvent('vh1logo', destinationUrl);
    });

    $('body').on('click', '.ent_m070 .hamburger', function(){
        autoLinkTrackEvent('vh1menu');
    });

    $('body').on('click', '.ent_m070 .show_logo', function(){
        var destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('series_logo', destinationUrl);
    });

    $('body').on('click', '.ent_m070 .show_menu a', function(){
        var destinationUrl = $(this).attr('href');
        if ($(this).parent().hasClass('social')) {
            autoLinkTrackEvent('series_socialbuttons', destinationUrl);
        } else {
            if (($('#header').hasClass('sticky_header')) && ($(this).parent().hasClass('social'))){
                autoLinkTrackEvent('series_socialbuttons-mini', destinationUrl);
            } else if ($('#header').hasClass('sticky_header')) {
                autoLinkTrackEvent('series_top-nav-mini', destinationUrl);
            } else {
                autoLinkTrackEvent('series_top-nav', destinationUrl);
            }
        }
    });

    $('body').on('click', '.ent_m070 .top_inner #site_search form', function(){
        if ($('.ent_m070 .top_inner #site_search form .search_input').val() != ' '){
            var term = $('.ent_m070 .top_inner #site_search form').val();
            var extraReportingObjs = {v2:term, v3:'TERM'};
            autoLinkTrackEvent('series_searchbox', undefined, extraReportingObjs);
        }
    });

    $('body').on('click', '.ent_m070 .top_inner .favorite_show', function(){
        var show = $('.ent_m070 .top_inner div.favorite_show');
        var destinationUrl = $('.ent_m070 .top_inner .favorite_show').attr('data-title');
        if (show.hasClass('favorited')){
            autoLinkTrackEvent('series_favorite', destinationUrl);
        } else {
            var extraReportingObjs = {'events':'event6'};
            autoLinkTrackEvent('series_favorite', destinationUrl, extraReportingObjs);
        }
    });

    $('body').on('click', '.ent_m070 .side_navigation a', function(){
        var destinationUrl = $(this).attr('href');
        if ($(this).parent().hasClass('social')) {
            autoLinkTrackEvent('vh1_socialbuttons_vertical', destinationUrl);
        } else {
            autoLinkTrackEvent('vh1_top-nav_vertical', destinationUrl);
        }
    });

	//M095 - FAQs
	$contentHolder.on('click', '.ent_m095 a', function(){
		destinationUrl = $(this).attr('href');

		autoLinkTrackEvent('vh1_tve_faq', destinationUrl);
	});

	$contentHolder.on('click', '.ent_m095 h2', function(){
		destinationUrl = $(this).attr('href');

		autoLinkTrackEvent('vh1_tve_faq', destinationUrl);
	});

	//M082 - Franchise Series Grid
	$contentHolder.on('click', '.ent_m082 a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_franchise_series_grid', destinationUrl);
	});

    //M100 - Featured Shows Grid
	$contentHolder.on('click', '.ent_m100 a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_featured_shows', destinationUrl);
    });

    //M112 - Series Episode Availability checkbox
    $contentHolder.on('click', '.ent_m112 #sub-filter label label', function(){
        var checkbox = $(this).parent().find('input[type=checkbox]'),
            reportingVariable = 'availability_filter_checked',
            destinationUrl = checkbox.attr('data-availableurl');

        if(checkbox.prop('checked')){
            reportingVariable = 'availability_filter_unchecked';
            destinationUrl = checkbox.attr('data-allurl');
        }

        autoLinkTrackEvent(reportingVariable, destinationUrl);
    });

    //M112 - Series Episode Availability checkbox info:hover
    $contentHolder.on('mouseover', '.ent_m112 #sub-filter .info-hover', function(){
        autoLinkTrackEvent('availability_info_hover', '');
    });

	//M112 - Series Episode Vertical Load More Button Promo
	$contentHolder.on('click', '.ent_m112 .s_buttons_button', function(){
		destinationUrl = 'load_more';
		autoLinkTrackEvent('vh1_series_episodes', destinationUrl);
	});

	//M112 - Series Episode Vertical Filter
	$contentHolder.on('click', '.ent_m112 .filter_list li', function(){
		var filter = $(this).html(),
			filtered, filteredNoSpaces;

		filtered = filter.replace(/<([^>]+?)([^>]*?)>(.*?)<\/\1>/ig, '');
		filteredNoSpaces = filtered.replace(/ /g,"_");
		destinationUrl = 'filter_item_' + filteredNoSpaces;
		autoLinkTrackEvent('vh1_series_episodes', destinationUrl);
	});

	//M116 - Series Clip Vertical Promo
	$contentHolder.on('click', '.ent_m116 a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_series_clips', destinationUrl);
	});

	//M116 - Series Clip Vertical Load More Button Promo
	$contentHolder.on('click', '.ent_m116 .s_buttons_button', function(){
		destinationUrl = 'load_more';
		autoLinkTrackEvent('vh1_series_clips', destinationUrl);
	});

	//M116 - Series Clip Vertical Filter
	$contentHolder.on('click', '.ent_m116 .filter_list li', function(){
		var filter = $(this).html(),
			filtered, filteredNoSpaces;

		filtered = filter.replace(/<([^>]+?)([^>]*?)>(.*?)<\/\1>/ig, '');
		filteredNoSpaces = filtered.replace(/ /g,"_");
		destinationUrl = 'filter_item_' + filteredNoSpaces;
		autoLinkTrackEvent('vh1_series_clips', destinationUrl);
	});

	//M122
	$contentHolder.on('click', '.ent_m122 > .module_content a, .ent_m122 .s_buttons_buttonWrapper a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_text_container', destinationUrl);
	});

    //M150 - Shows AZ
	$contentHolder.on('click', '.ent_m150 a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_showsaz', destinationUrl);
    });

	//M155 - ARC Trending Videos Grid
	$contentHolder.on('click', '.ent_m155 a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_trending_promo', destinationUrl);
	});

    //M156 - ARC Trending Videos Grid
    $contentHolder.on('click', '.ent_m156 a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_related_episodes_promo', destinationUrl);
    });

    //M164 - ARC Episodes Related Video Right Rail
	$contentHolder.on('click', '.ent_m164 .s_layouts_lineListItem a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_right_rail_promo', destinationUrl);
    });

    //M164 - ARC Episodes Related Video Right Rail - Native Ads
    $contentHolder.on('click', '.ent_m164 .mediavoice .link_wrapper', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_right_rail_native_ad', destinationUrl);
    });

    //M169 - ARC Videos Related Video Right Rail
	$contentHolder.on('click', '.ent_m169 .s_layouts_lineListItem a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_right_rail_video_promo', destinationUrl);
    });

    //M169 - ARC Videos Related Video Right Rail - Native Ads
    $contentHolder.on('click', '.ent_m169 .mediavoice .link_wrapper', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_right_rail_video_native_ad', destinationUrl);
    });

    //M170 - Series News Grid
    $contentHolder.on('click', '.ent_m170 a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_series_news', destinationUrl); // link tracking
    });

	//M172 - Marquee Promo Set
	$contentHolder.on('click', '.ent_m172 a', function(){
		destinationUrl = $(this).attr('href');

		if ($(this).hasClass('s_buttons_button')) {
			destinationUrl = 'browse_shows';
		}

		autoLinkTrackEvent('vh1_marquee_promo_set', destinationUrl);
	});

	//M173 - Featured Music Promo
	$contentHolder.on('click', '.ent_m173 a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_featured_music_promo', destinationUrl); // link tracking
	});

	//M174 - Trending News Promo
	$contentHolder.on('click', '.ent_m174 a', function(){
		destinationUrl = $(this).attr('href');

		 if ($(this).hasClass('js_btn_browseNews')) {
			destinationUrl = 'browse_news';
		 }

		autoLinkTrackEvent('vh1_trending_news_promo', destinationUrl);
	});

	//M174 - Trending News Promo 'Show More' Button
	$contentHolder.on('click', '.ent_m174 .js_btn_showMore', function(){
		destinationUrl = 'show_more_stories';

		autoLinkTrackEvent('vh1_trending_news_promo', destinationUrl);
	});

    //M176 - Editorial clips right rail
    $contentHolder.on('click', '.ent_m176 .s_layouts_lineListItem a', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_right_rail_editorial_promo', destinationUrl);
    });

    //M176 - Editorial clips right rail - Native Ads
    $contentHolder.on('click', '.ent_m176 .mediavoice .link_wrapper', function(){
        destinationUrl = $(this).attr('href');
        autoLinkTrackEvent('vh1_right_rail_editorial_native_ad', destinationUrl);
    });

	//M177 - Most Viewed Videos Promo
	$contentHolder.on('click', '.ent_m177 a', function(){
		destinationUrl = $(this).attr('href');

		if ($(this).hasClass('s_buttons_button')) {
			destinationUrl = 'browse_shows';
		}

		autoLinkTrackEvent('vh1_viewed_videos_promo', destinationUrl);
	});

	//M178 - Hero Image Promo
	$contentHolder.on('click', '.ent_m178 a', function(){
		destinationUrl = $(this).attr('href');
		autoLinkTrackEvent('vh1_hero_image_promo', destinationUrl);
	});
});

/**
 * animOnScroll.js v1.0.0
 * http://www.codrops.com
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Copyright 2013, Codrops
 * http://www.codrops.com
 *
 * ==
 * valentim edited this to remove traces of classie.js/modernizer.js/masonry.js/imagesLoaded.js
 *
 * cuts -way- down on the amount of code needed to have this run, and replacing these calls with jquery calls seems to
 * allow it to work just fine w/o all the custom libraries.
 *
 * - Affects M203 v3.1.0 and up
 * - Affects M204 v2.1.0 and up
 * - Affects M205 v2.1.0 and up
 * - Affects M206 v1.0.7 and up
 * - Affects M213 v1.2.0 and up
 * ==
 *
 */
;( function( window ) {

    'use strict';

    var docElem = window.document.documentElement;

    function getViewportH() {
        var client = docElem['clientHeight'],
            inner = window['innerHeight'];

        if( client < inner )
            return inner;
        else
            return client;
    }

    function scrollY() {
        return window.pageYOffset || docElem.scrollTop;
    }

    // http://stackoverflow.com/a/5598797/989439
    function getOffset( el ) {
        var offsetTop = 0, offsetLeft = 0;
        do {
            if ( !isNaN( el.offsetTop ) ) {
                offsetTop += el.offsetTop;
            }
            if ( !isNaN( el.offsetLeft ) ) {
                offsetLeft += el.offsetLeft;
            }
        } while( el = el.offsetParent )

        return {
            top : offsetTop,
            left : offsetLeft
        }
    }

    function inViewport( el, h ) {
        var elH = el.offsetHeight,
            scrolled = scrollY(),
            viewed = scrolled + getViewportH(),
            elTop = getOffset(el).top,
            elBottom = elTop + elH,
            // if 0, the element is considered in the viewport as soon as it enters.
            // if 1, the element is considered in the viewport only when it's fully inside
            // value in percentage (1 >= h >= 0)
            h = h || 0;

        return (elTop + elH * h) <= viewed && (elBottom - elH * h) >= scrolled;
    }

    function extend( a, b ) {
        for( var key in b ) {
            if( b.hasOwnProperty( key ) ) {
                a[key] = b[key];
            }
        }
        return a;
    }

    function AnimOnScroll( el, options ) {
        this.el = el;
        this.options = extend( this.defaults, options );
        this._init();
    }

    AnimOnScroll.prototype = {
        defaults : {
            // Minimum and a maximum duration of the animation (random value is chosen)
            minDuration : 0,
            maxDuration : 0,
            // The viewportFactor defines how much of the appearing item has to be visible in order to trigger the animation
            // if we'd use a value of 0, this would mean that it would add the animation class as soon as the item is in the viewport.
            // If we were to use the value of 1, the animation would only be triggered when we see all of the item in the viewport (100% of it)
            viewportFactor : 0
        },
        _init : function() {
            this.items = Array.prototype.slice.call( document.querySelectorAll( '#' + this.el.id + ' > li' ) );

            if (this.items.length == 0) {
                //photogallery support
                this.items = Array.prototype.slice.call( document.querySelectorAll( '#' + this.el.id + ' > .gallery__item' ) );
            }

            this.itemsCount = this.items.length;
            this.itemsRenderedCount = 0;
            this.didScroll = false;

            var self = this;

            // the items already shown...
            self.items.forEach( function( el, i ) {
                if( inViewport( el ) ) {
                    self._checkTotalRendered();
                    $(el).addClass('shown');
                }
            } );

            // animate on scroll the items inside the viewport
            window.addEventListener( 'scroll', function() {
                self._onScrollFn();
            }, false );
            window.addEventListener( 'resize', function() {
                self._resizeHandler();
            }, false );
        },
        _onScrollFn : function() {
            var self = this;
            if( !this.didScroll ) {
                this.didScroll = true;
                setTimeout( function() { self._scrollPage(); }, 60 );
            }
        },
        _scrollPage : function() {
            var self = this;
            this.items.forEach( function( el, i ) {
                if( !$(el).hasClass('shown' ) && !$(el).hasClass('animate') && inViewport( el, self.options.viewportFactor ) ) {
                    setTimeout( function() {
                        var perspY = scrollY() + getViewportH() / 2;
                        self.el.style.WebkitPerspectiveOrigin = '50% ' + perspY + 'px';
                        self.el.style.MozPerspectiveOrigin = '50% ' + perspY + 'px';
                        self.el.style.perspectiveOrigin = '50% ' + perspY + 'px';

                        self._checkTotalRendered();

                        if( self.options.minDuration && self.options.maxDuration ) {
                            var randDuration = ( Math.random() * ( self.options.maxDuration - self.options.minDuration ) + self.options.minDuration ) + 's';
                            el.style.WebkitAnimationDuration = randDuration;
                            el.style.MozAnimationDuration = randDuration;
                            el.style.animationDuration = randDuration;
                        }

                        $(el).addClass('animate');
                    }, 25 );
                }
            });
            this.didScroll = false;
        },
        _resizeHandler : function() {
            var self = this;
            function delayed() {
                self._scrollPage();
                self.resizeTimeout = null;
            }
            if ( this.resizeTimeout ) {
                clearTimeout( this.resizeTimeout );
            }
            this.resizeTimeout = setTimeout( delayed, 1000 );
        },
        _checkTotalRendered : function() {
            ++this.itemsRenderedCount;
            if( this.itemsRenderedCount === this.itemsCount ) {
                window.removeEventListener( 'scroll', this._onScrollFn );
            }
        }
    }

    // add to global namespace
    window.AnimOnScroll = AnimOnScroll;

} )( window );/*hash:2f5730a748408e38660957d4cb03160f*/
(function (name) {
this.$Crabapple = this.$Crabapple || {};
this.$Crabapple.TriforceTemplates = this.$Crabapple.TriforceTemplates || {};
this.$Crabapple.TriforceTemplates[name] = this.$Crabapple.TriforceTemplates[name] || new Hogan.Template(
{code: function (c,p,i) { var t=this;t.b(i=i||"");if(t.s(t.d("image.0",c,p,1),c,p,0,12,425,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div data-toqueue=\"true\" data-info=\"[");if(t.s(t.f("image",c,p,1),c,p,0,59,310,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("{&quot;original&quot;: { ");if(t.s(t.f("width",c,p,1),c,p,0,94,175,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.f("height",c,p,1),c,p,0,105,164,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("&quot;width&quot;: ");t.b(t.v(t.f("width",c,p,0)));t.b(", &quot;height&quot;:");t.b(t.v(t.f("height",c,p,0)));});c.pop();}});c.pop();}t.b(" }, &quot;src&quot;: &quot;");t.b(t.v(t.d(".url",c,p,0)));t.b("&quot;, ");if(t.s(t.d(".alt",c,p,1),c,p,0,237,273,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" &quot;alt&quot;: &quot;");t.b(t.v(t.d(".",c,p,0)));t.b("&quot;,");});c.pop();}t.b(" &quot;quality&quot;: 0.85},");});c.pop();}t.b("null]\" class=\"image_holder deferred ");t.sub("imageClass",c,p,i);t.b("\" ");t.sub("imageStyle",c,p,i);t.b("></div>");});c.pop();}if(!t.s(t.d("image.0",c,p,1),c,p,1,0,0,"")){if(t.s(t.f("image",c,p,1),c,p,0,459,1001,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div data-toqueue=\"true\" data-info=\"[");if(t.s(t.f("image",c,p,1),c,p,0,506,756,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("{&quot;original&quot;: { ");if(t.s(t.f("width",c,p,1),c,p,0,541,622,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.f("height",c,p,1),c,p,0,552,611,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("&quot;width&quot;: ");t.b(t.v(t.f("width",c,p,0)));t.b(", &quot;height&quot;:");t.b(t.v(t.f("height",c,p,0)));});c.pop();}});c.pop();}t.b(" }, &quot;src&quot;: &quot;");t.b(t.v(t.d(".url",c,p,0)));t.b("&quot;,");if(t.s(t.d(".alt",c,p,1),c,p,0,683,719,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" &quot;alt&quot;: &quot;");t.b(t.v(t.d(".",c,p,0)));t.b("&quot;,");});c.pop();}t.b(" &quot;quality&quot;: 0.85},");});c.pop();}t.b("null]\" class=\"image_holder deferred");if(t.s(t.d(".isRaw",c,p,1),c,p,0,812,830,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" image_holder--raw");});c.pop();}t.b(" ");t.sub("imageClass",c,p,i);t.b("\" ");t.sub("imageStyle",c,p,i);t.b(">");if(t.s(t.d(".ratio",c,p,1),c,p,0,916,984,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"image_holder__spacer\" style=\"padding-top: ");t.b(t.v(t.d(".",c,p,0)));t.b("%\"></div>");});c.pop();}t.b("</div>");});c.pop();}};return t.fl(); },partials: {}, subs: { "imageClass": function(c,p,t,i) {},"imageStyle": function(c,p,t,i) {} }}
);
}).call(this, "common/image");
(function (name) {
this.$Crabapple = this.$Crabapple || {};
this.$Crabapple.TriforceTemplates = this.$Crabapple.TriforceTemplates || {};
this.$Crabapple.TriforceTemplates[name] = this.$Crabapple.TriforceTemplates[name] || new Hogan.Template(
{code: function (c,p,i) { var t=this;t.b(i=i||"");if(t.s(t.f("data",c,p,1),c,p,0,9,1257,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"linelist-module-content\"><div class=\"linelist-module-header\">");if(t.s(t.d("header.filters.0",c,p,1),c,p,0,103,142,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(t.rp("<module/linelist/standard/filters0",c,p,""));});c.pop();}if(!t.s(t.d("header.filters",c,p,1),c,p,1,0,0,"")){if(t.s(t.d("header.title",c,p,1),c,p,0,199,688,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.d("settings.isMinimized",c,p,1),c,p,0,224,286,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<h2 class=\"linelist-module-header-title\">");t.b(t.v(t.d("header.title",c,p,0)));t.b("</h2>");});c.pop();}if(!t.s(t.d("settings.isMinimized",c,p,1),c,p,1,0,0,"")){t.b("<h1 class=\"linelist-module-header-title\">");t.b(t.v(t.d("header.title",c,p,0)));t.b("</h1>");};if(t.s(t.d("settings.sponsorAdSize",c,p,1),c,p,0,450,661,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.d("settings.campaignId",c,p,1),c,p,0,474,637,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"linelist-sponsor-ad\" data-adsize=\"");t.b(t.v(t.d("settings.sponsorAdSize",c,p,0)));t.b("\" data-ad-sizes=\"");t.b(t.v(t.d("settings.sponsorAdSize",c,p,0)));t.b("\" data-campaign=\"");t.b(t.v(t.d("settings.campaignId",c,p,0)));t.b("\"></div>");});c.pop();}});c.pop();}});c.pop();}};t.b("</div><ul class=\"linelist-items linelist-grid effect-2\" id=\"linelist-grid\">");t.b(t.rp("<module/linelist/standard/listitems1",c,p,""));t.b("</ul>");if(!t.s(t.d("settings.isMinimized",c,p,1),c,p,1,0,0,"")){t.b("<div class=\"linelist-loading-graphic\"></div>");};if(t.s(t.f("nextPage",c,p,1),c,p,0,952,1238,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.d("settings.isMinimized",c,p,1),c,p,0,977,1004,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<a href=\"");t.b(t.v(t.d("nextPage.url",c,p,0)));t.b("\">");});c.pop();}t.b("<div class=\"linelist-load-more-btn ");if(t.s(t.d("settings.isMinimized",c,p,1),c,p,0,1089,1108,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" linelist-minimized");});c.pop();}t.b("\"><span class=\"primary_btn\">");t.b(t.v(t.d(".label",c,p,0)));t.b("</span></div>");if(t.s(t.d("settings.isMinimized",c,p,1),c,p,0,1209,1213,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("</a>");});c.pop();}});c.pop();}t.b("</div>");});c.pop();}return t.fl(); },partials: {"<module/linelist/standard/filters0":{name:"module/linelist/standard/filters", partials: {}, subs: {  }},"<module/linelist/standard/listitems1":{name:"module/linelist/standard/listitems", partials: {}, subs: {  }}}, subs: {  }}
);
}).call(this, "module/linelist/standard/template");
(function (name) {
this.$Crabapple = this.$Crabapple || {};
this.$Crabapple.TriforceTemplates = this.$Crabapple.TriforceTemplates || {};
this.$Crabapple.TriforceTemplates[name] = this.$Crabapple.TriforceTemplates[name] || new Hogan.Template(
{code: function (c,p,i) { var t=this;t.b(i=i||"");if(t.s(t.d("header.title",c,p,1),c,p,0,17,241,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.d("settings.isMinimized",c,p,1),c,p,0,42,104,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<h2 class=\"linelist-module-header-title\">");t.b(t.v(t.d("header.title",c,p,0)));t.b("</h2>");});c.pop();}if(!t.s(t.d("settings.isMinimized",c,p,1),c,p,1,0,0,"")){t.b("<h1 class=\"linelist-module-header-title\">");t.b(t.v(t.d("header.title",c,p,0)));t.b("</h1>");};});c.pop();}if(t.s(t.d("header.filters",c,p,1),c,p,0,277,434,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.d(".isSelected",c,p,1),c,p,0,293,418,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"linelist-filter-title linelist-module-filter-list-item  linelist-module-filter-list-item-selected\">");t.b(t.v(t.f("name",c,p,0)));t.b("</div>");});c.pop();}});c.pop();}t.b("<ul class=\"linelist-module-filter-list\">");if(t.s(t.d("header.filters",c,p,1),c,p,0,512,667,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<li class=\"linelist-module-filter-list-item");if(t.s(t.d(".isSelected",c,p,1),c,p,0,571,613,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" linelist-module-filter-list-item-selected");});c.pop();}t.b("\" data-feedurl=\"");t.b(t.v(t.f("url",c,p,0)));t.b("\">");t.b(t.v(t.f("name",c,p,0)));t.b("</li>");});c.pop();}t.b("</ul>");return t.fl(); },partials: {}, subs: {  }}
);
}).call(this, "module/linelist/standard/filters");
(function (name) {
this.$Crabapple = this.$Crabapple || {};
this.$Crabapple.TriforceTemplates = this.$Crabapple.TriforceTemplates || {};
this.$Crabapple.TriforceTemplates[name] = this.$Crabapple.TriforceTemplates[name] || new Hogan.Template(
{code: function (c,p,i) { var t=this;t.b(i=i||"");if(t.s(t.f("items",c,p,1),c,p,0,10,1446,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.f("isAd",c,p,1),c,p,0,19,189,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<li class=\"linelist-item linelist-item-ad\"><div class=\"ad-label\">");t.b(t.v(t.f("adLabel",c,p,0)));t.b("</div><div class=\"lineList_ad\" data-adsize=\"");t.b(t.v(t.f("adSize",c,p,0)));t.b("\" data-ad-sizes=\"");t.b(t.v(t.f("adSize",c,p,0)));t.b("\"></div></li>");});c.pop();}if(!t.s(t.f("isAd",c,p,1),c,p,1,0,0,"")){t.b("<li class=\"linelist-item ");if(t.s(t.f("isTVELocked",c,p,1),c,p,0,248,259,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" tve_locked");});c.pop();}if(t.s(t.f("layout",c,p,1),c,p,0,286,315,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" linelist-item__layout--");t.b(t.v(t.d(".",c,p,0)));});c.pop();}t.b("\">");if(t.s(t.f("url",c,p,1),c,p,0,336,422,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<a class=\"linelist-link-wrapper\" href=\"");t.b(t.v(t.d(".",c,p,0)));t.b("\" ");if(t.s(t.f("isPopup",c,p,1),c,p,0,394,409,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("target=\"_blank\"");});c.pop();}t.b(">");});c.pop();}t.b("<div class=\"linelist-item-image-wrapper\">");if(t.s(t.f("imageTitle",c,p,1),c,p,0,486,589,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"linelist-item-image-title\"><span class=\"linelist-item-image-title-inner\">");t.b(t.v(t.d(".",c,p,0)));t.b("</span></div>");});c.pop();}t.b(t.rp("<common/image0",c,p,""));if(t.s(t.f("tveAuthDesktop",c,p,1),c,p,0,642,703,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"linelist-item-tve-lock desktop-tve-locked\"></div>");});c.pop();}if(t.s(t.f("tveAuthMobile",c,p,1),c,p,0,740,800,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"linelist-item-tve-lock mobile-tve-locked\"></div>");});c.pop();}if(t.s(t.f("flags",c,p,1),c,p,0,828,908,"{{ }}")){t.rs(c,p,function(c,p,t){if(t.s(t.f("display",c,p,1),c,p,0,840,896,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<span class=\"");if(t.s(t.f("type",c,p,1),c,p,0,862,867,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(t.v(t.d(".",c,p,0)));});c.pop();}t.b("\">");t.b(t.v(t.f("display",c,p,0)));t.b("</span>");});c.pop();}});c.pop();}t.b("</div><div class=\"linelist-item-meta-wrapper\">");if(t.s(t.f("label",c,p,1),c,p,0,974,1025,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<span class=\"linelist-item-meta-label\">");t.b(t.v(t.d(".",c,p,0)));t.b("</span>");});c.pop();}if(t.s(t.f("title",c,p,1),c,p,0,1045,1096,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<span class=\"linelist-item-meta-title\">");t.b(t.v(t.d(".",c,p,0)));t.b("</span>");});c.pop();}if(t.s(t.f("description",c,p,1),c,p,0,1122,1179,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<span class=\"linelist-item-meta-description\">");t.b(t.v(t.d(".",c,p,0)));t.b("</span>");});c.pop();}if(t.s(t.f("timestamp",c,p,1),c,p,0,1209,1264,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<span class=\"linelist-item-meta-timestamp\">");t.b(t.v(t.d(".",c,p,0)));t.b("</span>");});c.pop();}if(t.s(t.f("inlineUrl",c,p,1),c,p,0,1292,1392,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<a class=\"linelist-link-inline\" href=\"");t.b(t.v(t.f("href",c,p,0)));t.b("\" ");if(t.s(t.f("isPopup",c,p,1),c,p,0,1352,1367,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("target=\"_blank\"");});c.pop();}t.b(">");t.b(t.v(t.f("text",c,p,0)));t.b("</a>");});c.pop();}t.b("</div>");if(t.s(t.f("url",c,p,1),c,p,0,1420,1424,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("</a>");});c.pop();}t.b("</li>");};});c.pop();}return t.fl(); },partials: {"<common/image0":{name:"common/image", partials: {}, subs: {  }}}, subs: {  }}
);
}).call(this, "module/linelist/standard/listitems");
(function (name) {
this.$Crabapple = this.$Crabapple || {};
this.$Crabapple.TriforceTemplates = this.$Crabapple.TriforceTemplates || {};
this.$Crabapple.TriforceTemplates[name] = this.$Crabapple.TriforceTemplates[name] || new Hogan.Template(
{code: function (c,p,i) { var t=this;t.b(i=i||"");if(t.s(t.f("overlay",c,p,1),c,p,0,12,592,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"page-overlay");if(t.s(t.d(".typeClass",c,p,1),c,p,0,51,57,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(" ");t.b(t.v(t.d(".",c,p,0)));});c.pop();}t.b("\"><div class=\"page-overlay_wrapper\"><div class=\"page-overlay_header\"><div class=\"page-overlay_close\"></div>");if(t.s(t.d(".headline",c,p,1),c,p,0,193,237,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<h2 class=\"page-overlay_headline\">");t.b(t.v(t.d(".",c,p,0)));t.b("</h2>");});c.pop();}t.b("</div><div class=\"page-overlay_body\">");if(t.s(t.d(".description",c,p,1),c,p,0,305,350,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<p class=\"page-overlay_description\">");t.b(t.v(t.d(".",c,p,0)));t.b("</p>");});c.pop();}if(t.s(t.d(".copy",c,p,1),c,p,0,377,419,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"page-overlay_copy\">");t.b(t.v(t.d(".",c,p,0)));t.b("</div>");});c.pop();}if(t.s(t.d(".button",c,p,1),c,p,0,441,496,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<button class=\"page-overlay_button\">");t.b(t.v(t.d(".title",c,p,0)));t.b("</button>");});c.pop();}t.b("</div></div>");if(t.s(t.f("notification",c,p,1),c,p,0,537,569,"{{ }}")){t.rs(c,p,function(c,p,t){t.b(t.rp("<common/overlay_notification0",c,p,""));});c.pop();}t.b("</div>");});c.pop();}return t.fl(); },partials: {"<common/overlay_notification0":{name:"common/overlay_notification", partials: {}, subs: {  }}}, subs: {  }}
);
}).call(this, "common/overlay");
(function (name) {
this.$Crabapple = this.$Crabapple || {};
this.$Crabapple.TriforceTemplates = this.$Crabapple.TriforceTemplates || {};
this.$Crabapple.TriforceTemplates[name] = this.$Crabapple.TriforceTemplates[name] || new Hogan.Template(
{code: function (c,p,i) { var t=this;t.b(i=i||"");if(t.s(t.f("message",c,p,1),c,p,0,12,62,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<div class=\"page-overlay_notification\">");t.b(t.v(t.d(".",c,p,0)));t.b("</div>");});c.pop();}return t.fl(); },partials: {}, subs: {  }}
);
}).call(this, "common/overlay_notification");
$( document ).ready(function() {
    if (!("ontouchstart" in document.documentElement)) {
        document.documentElement.className += " no-touch";
    } else {
        document.documentElement.className += " touch";
    }
});