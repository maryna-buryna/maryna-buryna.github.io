/*hash:19f905964c2692b4aeb7034fb2e9fce8*//*file=/nickpress.com/vendor/viacom/crabapple/javascript/jquery-1.7.2.js */
/*!
 * jQuery JavaScript Library v1.7.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Wed Mar 21 12:46:34 2012 -0700
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document,
	navigator = window.navigator,
	location = window.location;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Matches dashed string for camelizing
	rdashAlpha = /-([a-z]|[0-9])/ig,
	rmsPrefix = /^-ms-/,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,

	// The deferred used on DOM ready
	readyList,

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = quickExpr.exec( selector );
			}

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context ? context.ownerDocument || context : document );

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
					}

					return jQuery.merge( this, selector );

				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.7.2",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = this.constructor();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );

		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// Add the callback
		readyList.add( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {
		// Either a released hold or an DOMready/load event and not yet ready
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.fireWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger( "ready" ).off( "ready" );
			}
		}
	},

	bindReady: function() {
		if ( readyList ) {
			return;
		}

		readyList = jQuery.Callbacks( "once memory" );

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}
		var xml, tmp;
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction( object );

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type( array );

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array, i ) {
		var len;

		if ( array ) {
			if ( indexOf ) {
				return indexOf.call( array, elem, i );
			}

			len = array.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in array && array[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key, ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		if ( typeof context === "string" ) {
			var tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		var args = slice.call( arguments, 2 ),
			proxy = function() {
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
			};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key && typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined && jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i < length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	sub: function() {
		function jQuerySub( selector, context ) {
			return new jQuerySub.fn.init( selector, context );
		}
		jQuery.extend( true, jQuerySub, this );
		jQuerySub.superclass = this;
		jQuerySub.fn = jQuerySub.prototype = this();
		jQuerySub.fn.constructor = jQuerySub;
		jQuerySub.sub = this.sub;
		jQuerySub.fn.init = function init( selector, context ) {
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
				context = jQuerySub( context );
			}

			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
		};
		jQuerySub.fn.init.prototype = jQuerySub.fn;
		var rootjQuerySub = jQuerySub(document);
		return jQuerySub;
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

// IE doesn't match non-breaking spaces with \s
if ( rnotwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

return jQuery;

})();


// String to Object flags format cache
var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
function createFlags( flags ) {
	var object = flagsCache[ flags ] = {},
		i, length;
	flags = flags.split( /\s+/ );
	for ( i = 0, length = flags.length; i < length; i++ ) {
		object[ flags[i] ] = true;
	}
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	flags:	an optional list of space-separated flags that will change how
 *			the callback list behaves
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible flags:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( flags ) {

	// Convert flags from String-formatted to Object-formatted
	// (we check in cache first)
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

	var // Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = [],
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Add one or several callbacks to the list
		add = function( args ) {
			var i,
				length,
				elem,
				type,
				actual;
			for ( i = 0, length = args.length; i < length; i++ ) {
				elem = args[ i ];
				type = jQuery.type( elem );
				if ( type === "array" ) {
					// Inspect recursively
					add( elem );
				} else if ( type === "function" ) {
					// Add if not in unique mode and callback is not in
					if ( !flags.unique || !self.has( elem ) ) {
						list.push( elem );
					}
				}
			}
		},
		// Fire callbacks
		fire = function( context, args ) {
			args = args || [];
			memory = !flags.memory || [ context, args ];
			fired = true;
			firing = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
					memory = true; // Mark as halted
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( !flags.once ) {
					if ( stack && stack.length ) {
						memory = stack.shift();
						self.fireWith( memory[ 0 ], memory[ 1 ] );
					}
				} else if ( memory === true ) {
					self.disable();
				} else {
					list = [];
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					var length = list.length;
					add( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away, unless previous
					// firing was halted (stopOnFalse)
					} else if ( memory && memory !== true ) {
						firingStart = length;
						fire( memory[ 0 ], memory[ 1 ] );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					var args = arguments,
						argIndex = 0,
						argLength = args.length;
					for ( ; argIndex < argLength ; argIndex++ ) {
						for ( var i = 0; i < list.length; i++ ) {
							if ( args[ argIndex ] === list[ i ] ) {
								// Handle firingIndex and firingLength
								if ( firing ) {
									if ( i <= firingLength ) {
										firingLength--;
										if ( i <= firingIndex ) {
											firingIndex--;
										}
									}
								}
								// Remove the element
								list.splice( i--, 1 );
								// If we have some unicity property then
								// we only need to do this once
								if ( flags.unique ) {
									break;
								}
							}
						}
					}
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				if ( list ) {
					var i = 0,
						length = list.length;
					for ( ; i < length; i++ ) {
						if ( fn === list[ i ] ) {
							return true;
						}
					}
				}
				return false;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory || memory === true ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( stack ) {
					if ( firing ) {
						if ( !flags.once ) {
							stack.push( [ context, args ] );
						}
					} else if ( !( flags.once && memory ) ) {
						fire( context, args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};




var // Static reference to slice
	sliceDeferred = [].slice;

jQuery.extend({

	Deferred: function( func ) {
		var doneList = jQuery.Callbacks( "once memory" ),
			failList = jQuery.Callbacks( "once memory" ),
			progressList = jQuery.Callbacks( "memory" ),
			state = "pending",
			lists = {
				resolve: doneList,
				reject: failList,
				notify: progressList
			},
			promise = {
				done: doneList.add,
				fail: failList.add,
				progress: progressList.add,

				state: function() {
					return state;
				},

				// Deprecated
				isResolved: doneList.fired,
				isRejected: failList.fired,

				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
					return this;
				},
				always: function() {
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
					return this;
				},
				pipe: function( fnDone, fnFail, fnProgress ) {
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( {
							done: [ fnDone, "resolve" ],
							fail: [ fnFail, "reject" ],
							progress: [ fnProgress, "notify" ]
						}, function( handler, data ) {
							var fn = data[ 0 ],
								action = data[ 1 ],
								returned;
							if ( jQuery.isFunction( fn ) ) {
								deferred[ handler ](function() {
									returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								});
							} else {
								deferred[ handler ]( newDefer[ action ] );
							}
						});
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					if ( obj == null ) {
						obj = promise;
					} else {
						for ( var key in promise ) {
							obj[ key ] = promise[ key ];
						}
					}
					return obj;
				}
			},
			deferred = promise.promise({}),
			key;

		for ( key in lists ) {
			deferred[ key ] = lists[ key ].fire;
			deferred[ key + "With" ] = lists[ key ].fireWith;
		}

		// Handle state
		deferred.done( function() {
			state = "resolved";
		}, failList.disable, progressList.lock ).fail( function() {
			state = "rejected";
		}, doneList.disable, progressList.lock );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( firstParam ) {
		var args = sliceDeferred.call( arguments, 0 ),
			i = 0,
			length = args.length,
			pValues = new Array( length ),
			count = length,
			pCount = length,
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
				firstParam :
				jQuery.Deferred(),
			promise = deferred.promise();
		function resolveFunc( i ) {
			return function( value ) {
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				if ( !( --count ) ) {
					deferred.resolveWith( deferred, args );
				}
			};
		}
		function progressFunc( i ) {
			return function( value ) {
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				deferred.notifyWith( promise, pValues );
			};
		}
		if ( length > 1 ) {
			for ( ; i < length; i++ ) {
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
				} else {
					--count;
				}
			}
			if ( !count ) {
				deferred.resolveWith( deferred, args );
			}
		} else if ( deferred !== firstParam ) {
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
		}
		return promise;
	}
});




jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		tds,
		events,
		eventName,
		i,
		isSupported,
		div = document.createElement( "div" ),
		documentElement = document.documentElement;

	// Preliminary tests
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName( "*" );
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement( "select" );
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName( "input" )[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		pixelMargin: true
	};

	// jQuery.boxModel DEPRECATED in 1.3, use jQuery.support.boxModel instead
	jQuery.boxModel = support.boxModel = (document.compatMode === "CSS1Compat");

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent( "onclick" );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	support.radioValue = input.value === "t";

	input.setAttribute("checked", "checked");

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: 1,
			change: 1,
			focusin: 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	fragment.removeChild( div );

	// Null elements to avoid leaks in IE
	fragment = select = opt = div = input = null;

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, outer, inner, table, td, offsetSupport,
			marginDiv, conMarginTop, style, html, positionTopLeftWidthHeight,
			paddingMarginBorderVisibility, paddingMarginBorder,
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		conMarginTop = 1;
		paddingMarginBorder = "padding:0;margin:0;border:";
		positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
		paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
		style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
		html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" +
			"<table " + style + "' cellpadding='0' cellspacing='0'>" +
			"<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName( "td" );
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check if div with explicit width and no margin-right incorrectly
		// gets computed margin-right based on width of container. For more
		// info see bug #3333
		// Fails in WebKit before Feb 2011 nightlies
		// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
		if ( window.getComputedStyle ) {
			div.innerHTML = "";
			marginDiv = document.createElement( "div" );
			marginDiv.style.width = "0";
			marginDiv.style.marginRight = "0";
			div.style.width = "2px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.innerHTML = "";
			div.style.width = div.style.padding = "1px";
			div.style.border = 0;
			div.style.overflow = "hidden";
			div.style.display = "inline";
			div.style.zoom = 1;
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div style='width:5px;'></div>";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
		}

		div.style.cssText = positionTopLeftWidthHeight + paddingMarginBorderVisibility;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

		if ( window.getComputedStyle ) {
			div.style.marginTop = "1%";
			support.pixelMargin = ( window.getComputedStyle( div, null ) || { marginTop: 0 } ).marginTop !== "1%";
		}

		if ( typeof container.style.zoom !== "undefined" ) {
			container.style.zoom = 1;
		}

		body.removeChild( container );
		marginDiv = div = container = null;

		jQuery.extend( support, offsetSupport );
	});

	return support;
})();




var rbrace = /^(?:\{.*\}|\[.*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var privateCache, thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
			isEvents = name === "events";

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = ++jQuery.uuid;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		privateCache = thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Users should not attempt to inspect the internal events object using jQuery.data,
		// it is undocumented and subject to change. But does anyone listen? No.
		if ( isEvents && !thisCache[ name ] ) {
			return privateCache.events;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			// Reference to internal data cache key
			internalKey = jQuery.expando,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,

			// See jQuery.data for more information
			id = isNode ? elem[ internalKey ] : internalKey;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject(cache[ id ]) ) {
				return;
			}
		}

		// Browsers that fail expando deletion also refuse to delete expandos on
		// the window, but it will allow it on all other JS objects; other browsers
		// don't care
		// Ensure that `cache` is not a window object #10080
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
			delete cache[ id ];
		} else {
			cache[ id ] = null;
		}

		// We destroyed the cache and need to eliminate the expando on the node to avoid
		// false lookups in the cache for entries that no longer exist
		if ( isNode ) {
			// IE does not allow us to delete expando properties from nodes,
			// nor does it have a removeAttribute function on Document nodes;
			// we must handle all of these cases
			if ( jQuery.support.deleteExpando ) {
				delete elem[ internalKey ];
			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( internalKey );
			} else {
				elem[ internalKey ] = null;
			}
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined && elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined && parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length > 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				jQuery.isNumeric( data ) ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	for ( var name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}




function handleQueueMarkDefer( elem, type, src ) {
	var deferDataKey = type + "defer",
		queueDataKey = type + "queue",
		markDataKey = type + "mark",
		defer = jQuery._data( elem, deferDataKey );
	if ( defer &&
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
		// Give room for hard-coded callbacks to fire first
		// and eventually mark/queue something else on the element
		setTimeout( function() {
			if ( !jQuery._data( elem, queueDataKey ) &&
				!jQuery._data( elem, markDataKey ) ) {
				jQuery.removeData( elem, deferDataKey, true );
				defer.fire();
			}
		}, 0 );
	}
}

jQuery.extend({

	_mark: function( elem, type ) {
		if ( elem ) {
			type = ( type || "fx" ) + "mark";
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
		}
	},

	_unmark: function( force, elem, type ) {
		if ( force !== true ) {
			type = elem;
			elem = force;
			force = false;
		}
		if ( elem ) {
			type = type || "fx";
			var key = type + "mark",
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
			if ( count ) {
				jQuery._data( elem, key, count );
			} else {
				jQuery.removeData( elem, key, true );
				handleQueueMarkDefer( elem, type, "mark" );
			}
		}
	},

	queue: function( elem, type, data ) {
		var q;
		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			q = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !q || jQuery.isArray(data) ) {
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					q.push( data );
				}
			}
			return q || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift(),
			hooks = {};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			jQuery._data( elem, type + ".run", hooks );
			fn.call( elem, function() {
				jQuery.dequeue( elem, type );
			}, hooks );
		}

		if ( !queue.length ) {
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
			handleQueueMarkDefer( elem, type, "queue" );
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, object ) {
		if ( typeof type !== "string" ) {
			object = type;
			type = undefined;
		}
		type = type || "fx";
		var defer = jQuery.Deferred(),
			elements = this,
			i = elements.length,
			count = 1,
			deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			tmp;
		function resolve() {
			if ( !( --count ) ) {
				defer.resolveWith( elements, [ elements ] );
			}
		}
		while( i-- ) {
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
				count++;
				tmp.add( resolve );
			}
		}
		resolve();
		return defer.promise( object );
	}
});




var rclass = /[\n\t\r]/g,
	rspace = /\s+/,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	nodeHook, boolHook, fixSpecified;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, i, l, elem, className, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			classNames = ( value || "" ).split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						className = (" " + elem.className + " ").replace( rclass, " " );
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[ c ] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var self = jQuery(this), val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, "" + value );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, l, isBool,
			i = 0;

		if ( value && elem.nodeType === 1 ) {
			attrNames = value.toLowerCase().split( rspace );
			l = attrNames.length;

			for ( ; i < l; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
				ret.nodeValue :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.nodeValue = value + "" );
		}
	};

	// Apply the nodeHook to tabindex
	jQuery.attrHooks.tabindex.set = nodeHook.set;

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = "" + value );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});




var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	rhoverHack = /(?:^|\s)hover(\.\S+)?\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	quickParse = function( selector ) {
		var quick = rquickIs.exec( selector );
		if ( quick ) {
			//   0  1    2   3
			// [ _, tag, id, class ]
			quick[1] = ( quick[1] || "" ).toLowerCase();
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
		}
		return quick;
	},
	quickIs = function( elem, m ) {
		var attrs = elem.attributes || {};
		return (
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
			(!m[2] || (attrs.id || {}).value === m[2]) &&
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
		);
	},
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, quick, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				quick: selector && quickParse( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
			t, tns, type, origType, namespaces, origCount,
			j, events, special, handle, eventType, handleObj;

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, [ "events", "handle" ], true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var type = event.type || event,
			namespaces = [],
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			old = null;
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old && old === elem.ownerDocument ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = [].slice.call( arguments, 0 ),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [],
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !(event.button && event.type === "click") ) {

			// Pregenerate a single jQuery object for reuse with .is()
			jqcur = jQuery(this);
			jqcur.context = this.ownerDocument || this;

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process events on disabled elements (#6911, #8165)
				if ( cur.disabled !== true ) {
					selMatch = {};
					matches = [];
					jqcur[0] = cur;
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = (
								handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
							);
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
		if ( event.metaKey === undefined ) {
			event.metaKey = event.ctrlKey;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady
		},

		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector,
				ret;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !form._submit_attached ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					form._submit_attached = true;
				}
			});
			// return undefined since we don't need an event listener
		},
		
		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
							jQuery.event.simulate( "change", this, event, true );
						}
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					elem._change_attached = true;
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // && selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			var handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( var type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});



/*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true,
	rBackslash = /\\/g,
	rReturn = /\r\n/g,
	rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;

	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];

			parts.push( m[1] );

			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context, seed );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}

				set = posProcess( selector, set, seed );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set, i, len, match, type, left;

	if ( !expr ) {
		return [];
	}

	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
		type = Expr.order[i];

		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace( rBackslash, "" );
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( "*" ) :
			[];
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		type, found, item, filter, left,
		i, pass,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				filter = Expr.filter[ type ];
				left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							pass = not ^ found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Utility function for retreiving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
var getText = Sizzle.getText = function( elem ) {
    var i, node,
		nodeType = elem.nodeType,
		ret = "";

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent || innerText for elements
			if ( typeof elem.textContent === 'string' ) {
				return elem.textContent;
			} else if ( typeof elem.innerText === 'string' ) {
				// Replace IE's carriage returns
				return elem.innerText.replace( rReturn, '' );
			} else {
				// Traverse it's children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	} else {

		// If no nodeType, this is expected to be an array
		for ( i = 0; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			if ( node.nodeType !== 8 ) {
				ret += getText( node );
			}
		}
	}
	return ret;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		},
		type: function( elem ) {
			return elem.getAttribute( "type" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !rNonWord.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !rNonWord.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( match[1] );
			}
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace( rBackslash, "" ) + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace( rBackslash, "" );
		},

		TAG: function( match, curLoop ) {
			return match[1].replace( rBackslash, "" ).toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1] = match[1].replace( rBackslash, "" );

			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			// Handle if an un-quoted value was used
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}

			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},

	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},

		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			var attr = elem.getAttribute( "type" ), type = elem.type;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
		},

		radio: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
		},

		file: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
		},

		password: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
		},

		submit: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "submit" === elem.type;
		},

		image: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
		},

		reset: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "reset" === elem.type;
		},

		button: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && "button" === elem.type || name === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		},

		focus: function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},

		CHILD: function( elem, match ) {
			var first, last,
				doneName, parent, cache,
				count, diff,
				type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					if ( type === "first" ) {
						return true;
					}

					node = elem;

					/* falls through */
				case "last":
					while ( (node = node.nextSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					return true;

				case "nth":
					first = match[2];
					last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}

					doneName = match[0];
					parent = elem.parentNode;

					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
						count = 0;

						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						}

						parent[ expando ] = doneName;
					}

					diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
		},

		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Sizzle.attr ?
					Sizzle.attr( elem, name ) :
					Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				!type && Sizzle.attr ?
				result != null :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}
// Expose origPOS
// "global" as in regardless of relation to brackets/parens
Expr.match.globalPOS = origPOS;

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}

	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}

		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				// See if we find a selector to speed up
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );

				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
					// Speed-up: Sizzle("TAG")
					if ( match[1] ) {
						return makeArray( context.getElementsByTagName( query ), extra );

					// Speed-up: Sizzle(".CLASS")
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
						return makeArray( context.getElementsByClassName( match[2] ), extra );
					}
				}

				if ( context.nodeType === 9 ) {
					// Speed-up: Sizzle("body")
					// The body element only exists once, optimize finding it
					if ( query === "body" && context.body ) {
						return makeArray( [ context.body ], extra );

					// Speed-up: Sizzle("#ID")
					} else if ( match && match[3] ) {
						var elem = context.getElementById( match[3] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id === match[3] ) {
								return makeArray( [ elem ], extra );
							}

						} else {
							return makeArray( [], extra );
						}
					}

					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var oldContext = context,
						old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							oldContext.removeAttribute( "id" );
						}
					}
				}
			}

			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

	if ( matches ) {
		// Check to see if it's possible to do matchesSelector
		// on a disconnected node (IE 9 fails this)
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
			pseudoWorks = false;

		try {
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( document.documentElement, "[test!='']:sizzle" );

		} catch( pseudoError ) {
			pseudoWorks = true;
		}

		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try {
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						var ret = matches.call( node, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || !disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9, so check for that
								node.document && node.document.nodeType !== 11 ) {
							return ret;
						}
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem[ expando ] = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem[ expando ] = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context, seed ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet, seed );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
Sizzle.selectors.attrMap = {};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.globalPOS,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self = this,
			i, l;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		var ret = this.pushStack( "", "find", selector ),
			length, n, r;

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				POS.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];

		// Array (deprecated as of jQuery 1.7)
		if ( jQuery.isArray( selectors ) ) {
			var level = 1;

			while ( cur && cur.ownerDocument && cur !== context ) {
				for ( i = 0; i < selectors.length; i++ ) {

					if ( jQuery( cur ).is( selectors[ i ] ) ) {
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
					}
				}

				cur = cur.parentNode;
				level++;
			}

			return ret;
		}

		// String
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}




function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery.clean(arguments) );
			return set;
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					null;
			}


			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.length ?
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
				this;
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}

			fragment = results.fragment;

			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						// Make sure that we do not leak memory by inadvertently discarding
						// the original fragment (which might have attached data) instead of
						// using it; in addition, use the original fragment object for the last
						// item instead of first because it can end up being emptied incorrectly
						// in certain situations (Bug #8070).
						// Fragments from the fragment cache must always be cloned and never used
						// in place.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
							jQuery.clone( fragment, true, true ) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						jQuery.ajax({
							type: "GET",
							global: false,
							url: elem.src,
							async: false,
							dataType: "script"
						});
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 fail to clone children inside object elements that use
	// the proprietary classid attribute value (rather than the type
	// attribute) to identify the type of content to display
	if ( nodeName === "object" ) {
		dest.outerHTML = src.outerHTML;

	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set
		if ( src.checked ) {
			dest.defaultChecked = dest.checked = src.checked;
		}

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" && dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );

	// Clear flags for bubbling special change/submit events, they must
	// be reattached when the newly cloned events are first activated
	dest.removeAttribute( "_submit_attached" );
	dest.removeAttribute( "_change_attached" );
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults, doc,
	first = args[ 0 ];

	// nodes may contain either an explicit document object,
	// a jQuery collection or context object.
	// If nodes[0] contains a valid object to assign to doc
	if ( nodes && nodes[0] ) {
		doc = nodes[0].ownerDocument || nodes[0];
	}

	// Ensure that an attr object doesn't incorrectly stand in as a document object
	// Chrome and Firefox seem to allow this to occur and will throw exception
	// Fixes #8950
	if ( !doc.createDocumentFragment ) {
		doc = document;
	}

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		cacheable = true;

		cacheresults = jQuery.fragments[ first ];
		if ( cacheresults && cacheresults !== 1 ) {
			fragment = cacheresults;
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;

		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;

		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
		elem.defaultChecked = elem.checked;
	}
}
// Finds all inputs and passes them to fixDefaultChecked
function findInputs( elem ) {
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	if ( nodeName === "input" ) {
		fixDefaultChecked( elem );
	// Skip scripts, get other children
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	}
}

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
function shimCloneNode( elem ) {
	var div = document.createElement( "div" );
	safeFragment.appendChild( div );

	div.innerHTML = elem.outerHTML;
	return div.firstChild;
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			// IE<=8 does not properly clone detached, unknown element nodes
			clone = jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ?
				elem.cloneNode( true ) :
				shimCloneNode( elem );

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var checkScriptType, script, j,
				ret = [];

		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
						wrap = wrapMap[ tag ] || wrapMap._default,
						depth = wrap[0],
						div = context.createElement("div"),
						safeChildNodes = safeFragment.childNodes,
						remove;

					// Append wrapper element to unknown element safe doc fragment
					if ( context === document ) {
						// Use the fragment we've already created for this document
						safeFragment.appendChild( div );
					} else {
						// Use a fragment created with the owner document
						createSafeFragment( context ).appendChild( div );
					}

					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Clear elements from DocumentFragment (safeFragment or otherwise)
					// to avoid hoarding elements. Fixes #11356
					if ( div ) {
						div.parentNode.removeChild( div );

						// Guard against -1 index exceptions in FF3.6
						if ( safeChildNodes.length > 0 ) {
							remove = safeChildNodes[ safeChildNodes.length - 1 ];

							if ( remove && remove.parentNode ) {
								remove.parentNode.removeChild( remove );
							}
						}
					}
				}
			}

			// Resets defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			var len;
			if ( !jQuery.support.appendChecked ) {
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
					for ( j = 0; j < len; j++ ) {
						findInputs( elem[j] );
					}
				} else {
					findInputs( elem );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			checkScriptType = function( elem ) {
				return !elem.type || rscriptType.test( elem.type );
			};
			for ( i = 0; ret[i]; i++ ) {
				script = ret[i];
				if ( scripts && jQuery.nodeName( script, "script" ) && (!script.type || rscriptType.test( script.type )) ) {
					scripts.push( script.parentNode ? script.parentNode.removeChild( script ) : script );

				} else {
					if ( script.nodeType === 1 ) {
						var jsTags = jQuery.grep( script.getElementsByTagName( "script" ), checkScriptType );

						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
					}
					fragment.appendChild( script );
				}
			}
		}

		return ret;
	},

	cleanData: function( elems ) {
		var data, id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];

			if ( id ) {
				data = cache[ id ];

				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}

					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
					if ( data.handle ) {
						data.handle.elem = null;
					}
				}

				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}

				delete cache[ id ];
			}
		}
	}
});




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	// fixed for IE9, see #8346
	rupper = /([A-Z]|^ms)/g,
	rnum = /^[\-+]?(?:\d*\.)?\d+$/i,
	rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,
	rrelNum = /^([\-+])=([\-+.\de]+)/,
	rmargin = /^margin/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },

	// order is important!
	cssExpand = [ "Top", "Right", "Bottom", "Left" ],

	curCSS,

	getComputedStyle,
	currentStyle;

jQuery.fn.css = function( name, value ) {
	return jQuery.access( this, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	}, name, value, arguments.length > 1 );
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		var ret, hooks;

		// Make sure that we're working with the right name
		name = jQuery.camelCase( name );
		hooks = jQuery.cssHooks[ name ];
		name = jQuery.cssProps[ name ] || name;

		// cssFloat needs a special treatment
		if ( name === "cssFloat" ) {
			name = "float";
		}

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {},
			ret, name;

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// DEPRECATED in 1.3, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, name ) {
		var ret, defaultView, computedStyle, width,
			style = elem.style;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( (defaultView = elem.ownerDocument.defaultView) &&
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {

			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// WebKit uses "computed value (percentage if specified)" instead of "used value" for margins
		// which is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !jQuery.support.pixelMargin && computedStyle && rmargin.test( name ) && rnumnonpx.test( ret ) ) {
			width = style.width;
			style.width = ret;
			ret = computedStyle.width;
			style.width = width;
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft, uncomputed,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && (uncomputed = style[ name ]) ) {
			ret = uncomputed;
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( rnumnonpx.test( ret ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		i = name === "width" ? 1 : 0,
		len = 4;

	if ( val > 0 ) {
		if ( extra !== "border" ) {
			for ( ; i < len; i += 2 ) {
				if ( !extra ) {
					val -= parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ] ) ) || 0;
				} else {
					val -= parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
				}
			}
		}

		return val + "px";
	}

	// Fall back to computed then uncomputed css if necessary
	val = curCSS( elem, name );
	if ( val < 0 || val == null ) {
		val = elem.style[ name ];
	}

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test(val) ) {
		return val;
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Add padding, border, margin
	if ( extra ) {
		for ( ; i < len; i += 2 ) {
			val += parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
			if ( extra !== "padding" ) {
				val += parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
			if ( extra === "margin" ) {
				val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ]) ) || 0;
			}
		}
	}

	return val + "px";
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					return getWidthOrHeight( elem, name, extra );
				} else {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				}
			}
		},

		set: function( elem, value ) {
			return rnum.test( value ) ?
				value + "px" :
				value;
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery(function() {
	// This hook cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "margin-right" );
					} else {
						return elem.style.marginRight;
					}
				});
			}
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {

	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};
});




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rspacesAjax = /\s+/,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Document location
	ajaxLocation,

	// Document location segments
	ajaxLocParts,

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		if ( jQuery.isFunction( func ) ) {
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
				i = 0,
				length = dataTypes.length,
				dataType,
				list,
				placeBefore;

			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters ),
		selection;

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf( " " );
		if ( off >= 0 ) {
			var selector = url.slice( off, url.length );
			url = url.slice( 0, off );
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = undefined;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			// Complete callback (responseText is used internally)
			complete: function( jqXHR, status, responseText ) {
				// Store the response as specified by the jqXHR object
				responseText = jqXHR.responseText;
				// If successful, inject the HTML into all the matched elements
				if ( jqXHR.isResolved() ) {
					// #4825: Get the actual response in case
					// a dataFilter is present in ajaxSettings
					jqXHR.done(function( r ) {
						responseText = r;
					});
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						responseText );
				}

				if ( callback ) {
					self.each( callback, [ responseText, status, jqXHR ] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},

	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// ifModified key
			ifModifiedKey,
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// The jqXHR state
			state = 0,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || "abort";
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			var isSuccess,
				success,
				error,
				statusText = nativeStatusText,
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
				lastModified,
				etag;

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
					}
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
						jQuery.etag[ ifModifiedKey ] = etag;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					try {
						success = ajaxConvert( s, response );
						statusText = "success";
						isSuccess = true;
					} catch(e) {
						// We have a parsererror
						statusText = "parsererror";
						error = e;
					}
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = "" + ( nativeStatusText || statusText );

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.then( tmp, tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );

		// Determine if a cross-domain request is in order
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return false;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already
				jqXHR.abort();
				return false;

		}

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : value;
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( var name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields,
		ct,
		type,
		finalDataType,
		firstDataType;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	var dataTypes = s.dataTypes,
		converters = {},
		i,
		key,
		length = dataTypes.length,
		tmp,
		// Current and previous dataTypes
		current = dataTypes[ 0 ],
		prev,
		// Conversion expression
		conversion,
		// Conversion function
		conv,
		// Conversion functions (transitive conversion)
		conv1,
		conv2;

	// For each dataType in the chain
	for ( i = 1; i < length; i++ ) {

		// Create converters map
		// with lowercased keys
		if ( i === 1 ) {
			for ( key in s.converters ) {
				if ( typeof key === "string" ) {
					converters[ key.toLowerCase() ] = s.converters[ key ];
				}
			}
		}

		// Get the dataTypes
		prev = current;
		current = dataTypes[ i ];

		// If current is auto dataType, update it to prev
		if ( current === "*" ) {
			current = prev;
		// If no auto and dataTypes are actually different
		} else if ( prev !== "*" && prev !== current ) {

			// Get the converter
			conversion = prev + " " + current;
			conv = converters[ conversion ] || converters[ "* " + current ];

			// If there is no direct converter, search transitively
			if ( !conv ) {
				conv2 = undefined;
				for ( conv1 in converters ) {
					tmp = conv1.split( " " );
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
						conv2 = converters[ tmp[1] + " " + current ];
						if ( conv2 ) {
							conv1 = converters[ conv1 ];
							if ( conv1 === true ) {
								conv = conv2;
							} else if ( conv2 === true ) {
								conv = conv1;
							}
							break;
						}
					}
				}
			}
			// If we found no converter, dispatch an error
			if ( !( conv || conv2 ) ) {
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
			}
			// If found converter is not an equivalence
			if ( conv !== true ) {
				// Convert with 1 or 2 converters accordingly
				response = conv ? conv( response ) : conv2( conv1(response) );
			}
		}
	}
	return response;
}




var jsc = jQuery.now(),
	jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		return jQuery.expando + "_" + ( jsc++ );
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var inspectData = ( typeof s.data === "string" ) && /^application\/x\-www\-form\-urlencoded/.test( s.contentType );

	if ( s.dataTypes[ 0 ] === "jsonp" ||
		s.jsonp !== false && ( jsre.test( s.url ) ||
				inspectData && jsre.test( s.data ) ) ) {

		var responseContainer,
			jsonpCallback = s.jsonpCallback =
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
			previous = window[ jsonpCallback ],
			url = s.url,
			data = s.data,
			replace = "$1" + jsonpCallback + "$2";

		if ( s.jsonp !== false ) {
			url = url.replace( jsre, replace );
			if ( s.url === url ) {
				if ( inspectData ) {
					data = data.replace( jsre, replace );
				}
				if ( s.data === data ) {
					// Add callback manually
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
				}
			}
		}

		s.url = url;
		s.data = data;

		// Install callback
		window[ jsonpCallback ] = function( response ) {
			responseContainer = [ response ];
		};

		// Clean-up function
		jqXHR.always(function() {
			// Set callback back to previous value
			window[ jsonpCallback ] = previous;
			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( previous ) ) {
				window[ jsonpCallback ]( responseContainer[ 0 ] );
			}
		});

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( jsonpCallback + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Delegate to script
		return "script";
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});




var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0,
	xhrCallbacks;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var xhr = s.xhr(),
						handle,
						i;

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occured
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( _ ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					// if we're in sync mode or it's in cache
					// and has been retrieved directly (IE6 & IE7)
					// we need to manually fire the callback
					if ( !s.async || xhr.readyState === 4 ) {
						callback();
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}




var elemdisplay = {},
	iframe, iframeDoc,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	],
	fxNow;

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback );

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
						display = elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( (display === "" && jQuery.css(elem, "display") === "none") ||
						!jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					if ( display === "" || display === "none" ) {
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
					}
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			var elem, display,
				i = 0,
				j = this.length;

			for ( ; i < j; i++ ) {
				elem = this[i];
				if ( elem.style ) {
					display = jQuery.css( elem, "display" );

					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
						jQuery._data( elem, "olddisplay", display );
					}
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				if ( this[i].style ) {
					this[i].style.display = "none";
				}
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed( speed, easing, callback );

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete, [ false ] );
		}

		// Do not change referenced properties as per-property easing will be lost
		prop = jQuery.extend( {}, prop );

		function doAnimation() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			if ( optall.queue === false ) {
				jQuery._mark( this );
			}

			var opt = jQuery.extend( {}, optall ),
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				name, val, p, e, hooks, replace,
				parts, start, end, unit,
				method;

			// will store per property easing and be used to determine when an animation is complete
			opt.animatedProperties = {};

			// first pass over propertys to expand / normalize
			for ( p in prop ) {
				name = jQuery.camelCase( p );
				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
				}

				if ( ( hooks = jQuery.cssHooks[ name ] ) && "expand" in hooks ) {
					replace = hooks.expand( prop[ name ] );
					delete prop[ name ];

					// not quite $.extend, this wont overwrite keys already present.
					// also - reusing 'p' from above because we have the correct "name"
					for ( p in replace ) {
						if ( ! ( p in prop ) ) {
							prop[ p ] = replace[ p ];
						}
					}
				}
			}

			for ( name in prop ) {
				val = prop[ name ];
				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
				if ( jQuery.isArray( val ) ) {
					opt.animatedProperties[ name ] = val[ 1 ];
					val = prop[ name ] = val[ 0 ];
				} else {
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
				}

				if ( val === "hide" && hidden || val === "show" && !hidden ) {
					return opt.complete.call( this );
				}

				if ( isElement && ( name === "height" || name === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {

						// inline-level elements accept inline-block;
						// block-level elements need to be inline with layout
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
							this.style.display = "inline-block";

						} else {
							this.style.zoom = 1;
						}
					}
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			for ( p in prop ) {
				e = new jQuery.fx( this, opt, p );
				val = prop[ p ];

				if ( rfxtypes.test( val ) ) {

					// Tracks whether to show or hide based on private
					// data attached to the element
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
					if ( method ) {
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
						e[ method ]();
					} else {
						e[ val ]();
					}

				} else {
					parts = rfxnum.exec( val );
					start = e.cur();

					if ( parts ) {
						end = parseFloat( parts[2] );
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( this, p, (end || 1) + unit);
							start = ( (end || 1) / e.cur() ) * start;
							jQuery.style( this, p, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			}

			// For JS strict compliance
			return true;
		}

		return optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},

	stop: function( type, clearQueue, gotoEnd ) {
		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var index,
				hadTimers = false,
				timers = jQuery.timers,
				data = jQuery._data( this );

			// clear marker counters if we know they won't be
			if ( !gotoEnd ) {
				jQuery._unmark( true, this );
			}

			function stopQueue( elem, data, index ) {
				var hooks = data[ index ];
				jQuery.removeData( elem, index, true );
				hooks.stop( gotoEnd );
			}

			if ( type == null ) {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
						stopQueue( this, data, index );
					}
				}
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
				stopQueue( this, data, index );
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					if ( gotoEnd ) {

						// force the next step to be the last
						timers[ index ]( true );
					} else {
						timers[ index ].saveState();
					}
					hadTimers = true;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( !( gotoEnd && hadTimers ) ) {
				jQuery.dequeue( this, type );
			}
		});
	}

});

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout( clearFxNow, 0 );
	return ( fxNow = jQuery.now() );
}

function clearFxNow() {
	fxNow = undefined;
}

// Generate parameters to create a standard animation
function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx( "show", 1 ),
	slideUp: genFx( "hide", 1 ),
	slideToggle: genFx( "toggle", 1 ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function( noUnmark ) {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			} else if ( noUnmark !== false ) {
				jQuery._unmark( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return ( -Math.cos( p*Math.PI ) / 2 ) + 0.5;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		options.orig = options.orig || {};
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
			return this.elem[ this.prop ];
		}

		var parsed,
			r = jQuery.css( this.elem, this.prop );
		// Empty strings, null, undefined and "auto" are converted to 0,
		// complex values such as "rotate(1rad)" are returned as is,
		// simple values such as "10px" are parsed to Float.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = fxNow || createFxNow();
		this.end = to;
		this.now = this.start = from;
		this.pos = this.state = 0;
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

		function t( gotoEnd ) {
			return self.step( gotoEnd );
		}

		t.queue = this.options.queue;
		t.elem = this.elem;
		t.saveState = function() {
			if ( jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
				if ( self.options.hide ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.start );
				} else if ( self.options.show ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.end );
				}
			}
		};

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval( fx.tick, fx.interval );
		}
	},

	// Simple 'show' function
	show: function() {
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );

		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any flash of content
		if ( dataShow !== undefined ) {
			// This show is picking up where a previous hide or show left off
			this.custom( this.cur(), dataShow );
		} else {
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
		}

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom( this.cur(), 0 );
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var p, n, complete,
			t = fxNow || createFxNow(),
			done = true,
			elem = this.elem,
			options = this.options;

		if ( gotoEnd || t >= options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			options.animatedProperties[ this.prop ] = true;

			for ( p in options.animatedProperties ) {
				if ( options.animatedProperties[ p ] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {

					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
						elem.style[ "overflow" + value ] = options.overflow[ index ];
					});
				}

				// Hide the element if the "hide" operation was done
				if ( options.hide ) {
					jQuery( elem ).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( options.hide || options.show ) {
					for ( p in options.animatedProperties ) {
						jQuery.style( elem, p, options.orig[ p ] );
						jQuery.removeData( elem, "fxshow" + p, true );
						// Toggle data is no longer needed
						jQuery.removeData( elem, "toggle" + p, true );
					}
				}

				// Execute the complete function
				// in the event that the complete function throws an exception
				// we must ensure it won't be called twice. #5684

				complete = options.complete;
				if ( complete ) {

					options.complete = false;
					complete.call( elem );
				}
			}

			return false;

		} else {
			// classical easing cannot be used with an Infinity duration
			if ( options.duration == Infinity ) {
				this.now = t;
			} else {
				n = t - this.startTime;
				this.state = n / options.duration;

				// Perform the easing function, defaults to swing
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
				this.now = this.start + ( (this.end - this.start) * this.pos );
			}
			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

// Ensure props that can't be negative don't go there on undershoot easing
jQuery.each( fxAttrs.concat.apply( [], fxAttrs ), function( i, prop ) {
	// exclude marginTop, marginLeft, marginBottom and marginRight from this list
	if ( prop.indexOf( "margin" ) ) {
		jQuery.fx.step[ prop ] = function( fx ) {
			jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

// Try to restore the default display value of an element
function defaultDisplay( nodeName ) {

	if ( !elemdisplay[ nodeName ] ) {

		var body = document.body,
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
			display = elem.css( "display" );
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if ( display === "none" || display === "" ) {
			// No iframe to use yet, so create it
			if ( !iframe ) {
				iframe = document.createElement( "iframe" );
				iframe.frameBorder = iframe.width = iframe.height = 0;
			}

			body.appendChild( iframe );

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if ( !iframeDoc || !iframe.createElement ) {
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
				iframeDoc.write( ( jQuery.support.boxModel ? "<!doctype html>" : "" ) + "<html><body>" );
				iframeDoc.close();
			}

			elem = iframeDoc.createElement( nodeName );

			iframeDoc.body.appendChild( elem );

			display = jQuery.css( elem, "display" );
			body.removeChild( iframe );
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var getOffset,
	rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	getOffset = function( elem, doc, docElem, box ) {
		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow( doc ),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	getOffset = function( elem, doc, docElem ) {
		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var elem = this[0],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return null;
	}

	if ( elem === doc.body ) {
		return jQuery.offset.bodyOffset( elem );
	}

	return getOffset( elem, doc, doc.documentElement );
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					jQuery.support.boxModel && win.document.documentElement[ method ] ||
						win.document.body[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	var clientProp = "client" + name,
		scrollProp = "scroll" + name,
		offsetProp = "offset" + name;

	// innerHeight and innerWidth
	jQuery.fn[ "inner" + name ] = function() {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
			this[ type ]() :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn[ "outer" + name ] = function( margin ) {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
			this[ type ]() :
			null;
	};

	jQuery.fn[ type ] = function( value ) {
		return jQuery.access( this, function( elem, type, value ) {
			var doc, docElemProp, orig, ret;

			if ( jQuery.isWindow( elem ) ) {
				// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
				doc = elem.document;
				docElemProp = doc.documentElement[ clientProp ];
				return jQuery.support.boxModel && docElemProp ||
					doc.body && doc.body[ clientProp ] || docElemProp;
			}

			// Get document width or height
			if ( elem.nodeType === 9 ) {
				// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
				doc = elem.documentElement;

				// when a window > document, IE6 reports a offset[Width/Height] > client[Width/Height]
				// so we can't use max, as it'll choose the incorrect offset[Width/Height]
				// instead we use the correct client[Width/Height]
				// support:IE6
				if ( doc[ clientProp ] >= doc[ scrollProp ] ) {
					return doc[ clientProp ];
				}

				return Math.max(
					elem.body[ scrollProp ], doc[ scrollProp ],
					elem.body[ offsetProp ], doc[ offsetProp ]
				);
			}

			// Get width or height on the element
			if ( value === undefined ) {
				orig = jQuery.css( elem, type );
				ret = parseFloat( orig );
				return jQuery.isNumeric( ret ) ? ret : orig;
			}

			// Set the width or height on the element
			jQuery( elem ).css( type, value );
		}, type, value, arguments.length, null );
	};
});




// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}



})( window );

/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/jquery/namespace.js */
/* 
 * jQuery Namespace 
 * Use namespaces to protect your global integrity.
 * Creates new object (namespace) within JQuery / JQuery.fn
 */
(function ($) { 
	var methods = {}; 

	/**
	 * This one defines namespace 
	 */
	$.namespace = function(ns) { 
    
		methods[ns] =  methods[ns] || {}; 
		
		// getting reference to a namespaced jquery object
		function nsfun(selector, context) {
			return $(selector, context).namespace(ns);
		}
    
		// adding methods to FN (using namespaces in jquery plugins)
		nsfun.fn = methods[ns];

		return nsfun;
	};
  
	/**
	 * Function that allows using namespaces in jQuery plugins
	 */
	$.fn.namespace = function(ns) { 
		if (methods[ns]) {
			$.extend(this, methods[ns]);
		}
		return this; 
	}; 
}) (jQuery);
/*endFile*/
/*file=/nickpress.com/javascript/shared/nickpress.js */
(function($) {
	$NickPress = $.namespace('nickpress');
}) (jQuery);
/*endFile*/
/*file=/nickpress.com/javascript/shared/tweet_feed.js */
 ;(function ($, ns) {
		$(function () {
			ns.TwitterFeed = {

				callback: function() {},

				init: function (settings, callback) {
					var self = this;

					this.callback = callback;

					$.getJSON(settings.tweetUrl, function (response) {
						self.callback(response.results);
					});		
				}
			};

			ns.ParseTweet = function (str) {
				if (str == null) return '';
				return str
						// parse URLs
						.replace(/[A-Za-z]+:\/\/\w+\.[\w:%&~\?\/.=]+/g, function (link) {
							return '<a href="' + link + '" target="_blank">' + link + '</a>';
						})
						// parse usernames
						.replace(/[@]+\w+/g, function (reply) {
							return '<a href="https://twitter.com/#!/' + reply.replace('@', '') + '" target="_blank">' + reply + '</a>';
						})
						// parse hashtags
						.replace(/[#]+\w+/g, function (hashtag) {
							return '<a href="https://twitter.com/#!/search/%23' + hashtag.replace('#', '') + '" target="_blank">' + hashtag + '</a>';
						});
			};
		});

 }(jQuery, $NickPress));
/*endFile*/
/*file=/nickpress.com/javascript/shared/swipe.js */
(function(a){if(typeof define==="function"&&define.amd&&define.amd.jQuery){define(["jquery"],a)}else{a(jQuery)}}(function(e){var o="left",n="right",d="up",v="down",c="in",w="out",l="none",r="auto",k="swipe",s="pinch",x="tap",i="doubletap",b="longtap",A="horizontal",t="vertical",h="all",q=10,f="start",j="move",g="end",p="cancel",a="ontouchstart" in window,y="TouchSwipe";var m={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,triggerOnTouchEnd:true,triggerOnTouchLeave:false,allowPageScroll:"auto",fallbackToMouseEvents:true,excludedElements:"label, button, input, select, textarea, a, .noSwipe"};e.fn.swipe=function(D){var C=e(this),B=C.data(y);if(B&&typeof D==="string"){if(B[D]){return B[D].apply(this,Array.prototype.slice.call(arguments,1))}else{e.error("Method "+D+" does not exist on jQuery.swipe")}}else{if(!B&&(typeof D==="object"||!D)){return u.apply(this,arguments)}}return C};e.fn.swipe.defaults=m;e.fn.swipe.phases={PHASE_START:f,PHASE_MOVE:j,PHASE_END:g,PHASE_CANCEL:p};e.fn.swipe.directions={LEFT:o,RIGHT:n,UP:d,DOWN:v,IN:c,OUT:w};e.fn.swipe.pageScroll={NONE:l,HORIZONTAL:A,VERTICAL:t,AUTO:r};e.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,ALL:h};function u(B){if(B&&(B.allowPageScroll===undefined&&(B.swipe!==undefined||B.swipeStatus!==undefined))){B.allowPageScroll=l}if(B.click!==undefined&&B.tap===undefined){B.tap=B.click}if(!B){B={}}B=e.extend({},e.fn.swipe.defaults,B);return this.each(function(){var D=e(this);var C=D.data(y);if(!C){C=new z(this,B);D.data(y,C)}})}function z(a0,aq){var av=(a||!aq.fallbackToMouseEvents),G=av?"touchstart":"mousedown",au=av?"touchmove":"mousemove",R=av?"touchend":"mouseup",P=av?null:"mouseleave",az="touchcancel";var ac=0,aL=null,Y=0,aX=0,aV=0,D=1,am=0,aF=0,J=null;var aN=e(a0);var W="start";var T=0;var aM=null;var Q=0,aY=0,a1=0,aa=0,K=0;var aS=null;try{aN.bind(G,aJ);aN.bind(az,a5)}catch(ag){e.error("events not supported "+G+","+az+" on jQuery.swipe")}this.enable=function(){aN.bind(G,aJ);aN.bind(az,a5);return aN};this.disable=function(){aG();return aN};this.destroy=function(){aG();aN.data(y,null);return aN};this.option=function(a8,a7){if(aq[a8]!==undefined){if(a7===undefined){return aq[a8]}else{aq[a8]=a7}}else{e.error("Option "+a8+" does not exist on jQuery.swipe.options")}return null};function aJ(a9){if(ax()){return}if(e(a9.target).closest(aq.excludedElements,aN).length>0){return}var ba=a9.originalEvent?a9.originalEvent:a9;var a8,a7=a?ba.touches[0]:ba;W=f;if(a){T=ba.touches.length}else{a9.preventDefault()}ac=0;aL=null;aF=null;Y=0;aX=0;aV=0;D=1;am=0;aM=af();J=X();O();if(!a||(T===aq.fingers||aq.fingers===h)||aT()){ae(0,a7);Q=ao();if(T==2){ae(1,ba.touches[1]);aX=aV=ap(aM[0].start,aM[1].start)}if(aq.swipeStatus||aq.pinchStatus){a8=L(ba,W)}}else{a8=false}if(a8===false){W=p;L(ba,W);return a8}else{ak(true)}return null}function aZ(ba){var bd=ba.originalEvent?ba.originalEvent:ba;if(W===g||W===p||ai()){return}var a9,a8=a?bd.touches[0]:bd;var bb=aD(a8);aY=ao();if(a){T=bd.touches.length}W=j;if(T==2){if(aX==0){ae(1,bd.touches[1]);aX=aV=ap(aM[0].start,aM[1].start)}else{aD(bd.touches[1]);aV=ap(aM[0].end,aM[1].end);aF=an(aM[0].end,aM[1].end)}D=a3(aX,aV);am=Math.abs(aX-aV)}if((T===aq.fingers||aq.fingers===h)||!a||aT()){aL=aH(bb.start,bb.end);ah(ba,aL);ac=aO(bb.start,bb.end);Y=aI();aE(aL,ac);if(aq.swipeStatus||aq.pinchStatus){a9=L(bd,W)}if(!aq.triggerOnTouchEnd||aq.triggerOnTouchLeave){var a7=true;if(aq.triggerOnTouchLeave){var bc=aU(this);a7=B(bb.end,bc)}if(!aq.triggerOnTouchEnd&&a7){W=ay(j)}else{if(aq.triggerOnTouchLeave&&!a7){W=ay(g)}}if(W==p||W==g){L(bd,W)}}}else{W=p;L(bd,W)}if(a9===false){W=p;L(bd,W)}}function I(a7){var a8=a7.originalEvent;if(a){if(a8.touches.length>0){C();return true}}if(ai()){T=aa}a7.preventDefault();aY=ao();Y=aI();if(a6()){W=p;L(a8,W)}else{if(aq.triggerOnTouchEnd||(aq.triggerOnTouchEnd==false&&W===j)){W=g;L(a8,W)}else{if(!aq.triggerOnTouchEnd&&a2()){W=g;aB(a8,W,x)}else{if(W===j){W=p;L(a8,W)}}}}ak(false);return null}function a5(){T=0;aY=0;Q=0;aX=0;aV=0;D=1;O();ak(false)}function H(a7){var a8=a7.originalEvent;if(aq.triggerOnTouchLeave){W=ay(g);L(a8,W)}}function aG(){aN.unbind(G,aJ);aN.unbind(az,a5);aN.unbind(au,aZ);aN.unbind(R,I);if(P){aN.unbind(P,H)}ak(false)}function ay(bb){var ba=bb;var a9=aw();var a8=aj();var a7=a6();if(!a9||a7){ba=p}else{if(a8&&bb==j&&(!aq.triggerOnTouchEnd||aq.triggerOnTouchLeave)){ba=g}else{if(!a8&&bb==g&&aq.triggerOnTouchLeave){ba=p}}}return ba}function L(a9,a7){var a8=undefined;if(F()||S()){a8=aB(a9,a7,k)}else{if((M()||aT())&&a8!==false){a8=aB(a9,a7,s)}}if(aC()&&a8!==false){a8=aB(a9,a7,i)}else{if(al()&&a8!==false){a8=aB(a9,a7,b)}else{if(ad()&&a8!==false){a8=aB(a9,a7,x)}}}if(a7===p){a5(a9)}if(a7===g){if(a){if(a9.touches.length==0){a5(a9)}}else{a5(a9)}}return a8}function aB(ba,a7,a9){var a8=undefined;if(a9==k){aN.trigger("swipeStatus",[a7,aL||null,ac||0,Y||0,T]);if(aq.swipeStatus){a8=aq.swipeStatus.call(aN,ba,a7,aL||null,ac||0,Y||0,T);if(a8===false){return false}}if(a7==g&&aR()){aN.trigger("swipe",[aL,ac,Y,T]);if(aq.swipe){a8=aq.swipe.call(aN,ba,aL,ac,Y,T);if(a8===false){return false}}switch(aL){case o:aN.trigger("swipeLeft",[aL,ac,Y,T]);if(aq.swipeLeft){a8=aq.swipeLeft.call(aN,ba,aL,ac,Y,T)}break;case n:aN.trigger("swipeRight",[aL,ac,Y,T]);if(aq.swipeRight){a8=aq.swipeRight.call(aN,ba,aL,ac,Y,T)}break;case d:aN.trigger("swipeUp",[aL,ac,Y,T]);if(aq.swipeUp){a8=aq.swipeUp.call(aN,ba,aL,ac,Y,T)}break;case v:aN.trigger("swipeDown",[aL,ac,Y,T]);if(aq.swipeDown){a8=aq.swipeDown.call(aN,ba,aL,ac,Y,T)}break}}}if(a9==s){aN.trigger("pinchStatus",[a7,aF||null,am||0,Y||0,T,D]);if(aq.pinchStatus){a8=aq.pinchStatus.call(aN,ba,a7,aF||null,am||0,Y||0,T,D);if(a8===false){return false}}if(a7==g&&a4()){switch(aF){case c:aN.trigger("pinchIn",[aF||null,am||0,Y||0,T,D]);if(aq.pinchIn){a8=aq.pinchIn.call(aN,ba,aF||null,am||0,Y||0,T,D)}break;case w:aN.trigger("pinchOut",[aF||null,am||0,Y||0,T,D]);if(aq.pinchOut){a8=aq.pinchOut.call(aN,ba,aF||null,am||0,Y||0,T,D)}break}}}if(a9==x){if(a7===p||a7===g){clearTimeout(aS);if(V()&&!E()){K=ao();aS=setTimeout(e.proxy(function(){K=null;aN.trigger("tap",[ba.target]);if(aq.tap){a8=aq.tap.call(aN,ba,ba.target)}},this),aq.doubleTapThreshold)}else{K=null;aN.trigger("tap",[ba.target]);if(aq.tap){a8=aq.tap.call(aN,ba,ba.target)}}}}else{if(a9==i){if(a7===p||a7===g){clearTimeout(aS);K=null;aN.trigger("doubletap",[ba.target]);if(aq.doubleTap){a8=aq.doubleTap.call(aN,ba,ba.target)}}}else{if(a9==b){if(a7===p||a7===g){clearTimeout(aS);K=null;aN.trigger("longtap",[ba.target]);if(aq.longTap){a8=aq.longTap.call(aN,ba,ba.target)}}}}}return a8}function aj(){var a7=true;if(aq.threshold!==null){a7=ac>=aq.threshold}return a7}function a6(){var a7=false;if(aq.cancelThreshold!==null&&aL!==null){a7=(aP(aL)-ac)>=aq.cancelThreshold}return a7}function ab(){if(aq.pinchThreshold!==null){return am>=aq.pinchThreshold}return true}function aw(){var a7;if(aq.maxTimeThreshold){if(Y>=aq.maxTimeThreshold){a7=false}else{a7=true}}else{a7=true}return a7}function ah(a7,a8){if(aq.allowPageScroll===l||aT()){a7.preventDefault()}else{var a9=aq.allowPageScroll===r;switch(a8){case o:if((aq.swipeLeft&&a9)||(!a9&&aq.allowPageScroll!=A)){a7.preventDefault()}break;case n:if((aq.swipeRight&&a9)||(!a9&&aq.allowPageScroll!=A)){a7.preventDefault()}break;case d:if((aq.swipeUp&&a9)||(!a9&&aq.allowPageScroll!=t)){a7.preventDefault()}break;case v:if((aq.swipeDown&&a9)||(!a9&&aq.allowPageScroll!=t)){a7.preventDefault()}break}}}function a4(){var a8=aK();var a7=U();var a9=ab();return a8&&a7&&a9}function aT(){return !!(aq.pinchStatus||aq.pinchIn||aq.pinchOut)}function M(){return !!(a4()&&aT())}function aR(){var ba=aw();var bc=aj();var a9=aK();var a7=U();var a8=a6();var bb=!a8&&a7&&a9&&bc&&ba;return bb}function S(){return !!(aq.swipe||aq.swipeStatus||aq.swipeLeft||aq.swipeRight||aq.swipeUp||aq.swipeDown)}function F(){return !!(aR()&&S())}function aK(){return((T===aq.fingers||aq.fingers===h)||!a)}function U(){return aM[0].end.x!==0}function a2(){return !!(aq.tap)}function V(){return !!(aq.doubleTap)}function aQ(){return !!(aq.longTap)}function N(){if(K==null){return false}var a7=ao();return(V()&&((a7-K)<=aq.doubleTapThreshold))}function E(){return N()}function at(){return((T===1||!a)&&(isNaN(ac)||ac===0))}function aW(){return((Y>aq.longTapThreshold)&&(ac<q))}function ad(){return !!(at()&&a2())}function aC(){return !!(N()&&V())}function al(){return !!(aW()&&aQ())}function C(){a1=ao();aa=event.touches.length+1}function O(){a1=0;aa=0}function ai(){var a7=false;if(a1){var a8=ao()-a1;if(a8<=aq.fingerReleaseThreshold){a7=true}}return a7}function ax(){return !!(aN.data(y+"_intouch")===true)}function ak(a7){if(a7===true){aN.bind(au,aZ);aN.bind(R,I);if(P){aN.bind(P,H)}}else{aN.unbind(au,aZ,false);aN.unbind(R,I,false);if(P){aN.unbind(P,H,false)}}aN.data(y+"_intouch",a7===true)}function ae(a8,a7){var a9=a7.identifier!==undefined?a7.identifier:0;aM[a8].identifier=a9;aM[a8].start.x=aM[a8].end.x=a7.pageX||a7.clientX;aM[a8].start.y=aM[a8].end.y=a7.pageY||a7.clientY;return aM[a8]}function aD(a7){var a9=a7.identifier!==undefined?a7.identifier:0;var a8=Z(a9);a8.end.x=a7.pageX||a7.clientX;a8.end.y=a7.pageY||a7.clientY;return a8}function Z(a8){for(var a7=0;a7<aM.length;a7++){if(aM[a7].identifier==a8){return aM[a7]}}}function af(){var a7=[];for(var a8=0;a8<=5;a8++){a7.push({start:{x:0,y:0},end:{x:0,y:0},identifier:0})}return a7}function aE(a7,a8){a8=Math.max(a8,aP(a7));J[a7].distance=a8}function aP(a7){if(J[a7]){return J[a7].distance}return undefined}function X(){var a7={};a7[o]=ar(o);a7[n]=ar(n);a7[d]=ar(d);a7[v]=ar(v);return a7}function ar(a7){return{direction:a7,distance:0}}function aI(){return aY-Q}function ap(ba,a9){var a8=Math.abs(ba.x-a9.x);var a7=Math.abs(ba.y-a9.y);return Math.round(Math.sqrt(a8*a8+a7*a7))}function a3(a7,a8){var a9=(a8/a7)*1;return a9.toFixed(2)}function an(){if(D<1){return w}else{return c}}function aO(a8,a7){return Math.round(Math.sqrt(Math.pow(a7.x-a8.x,2)+Math.pow(a7.y-a8.y,2)))}function aA(ba,a8){var a7=ba.x-a8.x;var bc=a8.y-ba.y;var a9=Math.atan2(bc,a7);var bb=Math.round(a9*180/Math.PI);if(bb<0){bb=360-Math.abs(bb)}return bb}function aH(a8,a7){var a9=aA(a8,a7);if((a9<=45)&&(a9>=0)){return o}else{if((a9<=360)&&(a9>=315)){return o}else{if((a9>=135)&&(a9<=225)){return n}else{if((a9>45)&&(a9<135)){return v}else{return d}}}}}function ao(){var a7=new Date();return a7.getTime()}function aU(a7){a7=e(a7);var a9=a7.offset();var a8={left:a9.left,right:a9.left+a7.outerWidth(),top:a9.top,bottom:a9.top+a7.outerHeight()};return a8}function B(a7,a8){return(a7.x>a8.left&&a7.x<a8.right&&a7.y>a8.top&&a7.y<a8.bottom)}}}));
/*endFile*/
/*file=/nickpress.com/javascript/shared/config.js */
var config = {
	getSiteBaseHREF : function(){return 'http://www.nickpress-l.mtvi.com/';},
	getTriforceScriptLoader : function(){return '/media/triforce/';},
	getTriforceGlobalZones : function(){return '';},
	getTriforceEditionHierarchy : function(){return '$NickPress,$Crabapple';},
	getTriforceEditionPrefix : function(){return 'nickpress_triforce_module_,triforce_module_';},
	getRepoReportingUrl : function() {
		return '';
		//var repoDomain = window.location.hostname.replace('press', 'repo');
		//if (window.location.hostname == 'www.nickpress-l.mtvi.com')  repoDomain = 'repolocal';
		//
		//repoDomain = repoDomain.replace('cc.com', 'comedycentral.com');
		//
		//return 'http://' + repoDomain + '/feeds/init/press.comedycentral.com';
	},
	getRepoCodaUrl: function() { return 'http://btg.mtvnservices.com/aria/coda.html?site=nickpress.com'; }
//	,getRepoScript: function() { return '{media}/modules/reporting/reporting_v1.js';}
};
/*endFile*/
/*file=/nickpress.com/javascript/shared/massive_carousel.js */
	(function () {

		var carouselTimeout;

		$NickPress.MassiveCarousel = {
			settings: {
				infoClass: '.info',
				showInfoClass: 'show',
				moduleWidth: 1280,
				moduleHeight: 414,
				moduleAspectRatio: {
					'width': 640,
					'height': 207
				},
				autoSlidingDelay: 3000
			},

			elements: {},

			currentImg: 0,
			numberOfImgs: 0,


			init: function ($module) {
				this.elements = {
					module: $module,
					infoButtons: $module.find('.info_button'),
					listWrapper: $module.find('.carousel_wrapper'),
					listElements: $module.find('.carousel_item'),
					slideToImgButtons: $module.find('.buttons .slide_button'),
					description: $module.find('.description')
				};

				this.numberOfImgs = this.elements.slideToImgButtons.length;

				this.attachEvents(this.elements, this.settings);

				this.setListWidth();
				this.setTimeout();
			},

			attachEvents: function (elems, settings) {
				var self = this;

				$(window).on('resize', function () {
					self.setListWidth();
					self.slideToImg(0);
			  	});

				/*$(window).on("orientationchange", function() {
					console.log("orientation changed")
					self.setListWidth();
					self.slideToImg(0);
				});*/

				elems.infoButtons.click(function () {
					$(this).closest(settings.infoClass).toggleClass(settings.showInfoClass);
					if( window.innerWidth <= 1024 ) {
						if($(this).closest(settings.infoClass).hasClass(settings.showInfoClass)) {
							clearTimeout(carouselTimeout);
						}
						else {
							carouselTimeout = setTimeout(function () { self.slideToImg(); }, self.settings.autoSlidingDelay);
						}
					}
				});

				elems.listElements.find('img').swipe({
				        //Generic swipe handler for left and right directions
				        swipeLeft:function(event, direction, distance, duration, fingerCount) {
				          	self.slideToImg();
				        },
				        swipeRight:function(event, direction, distance, duration, fingerCount) {
				          	self.slideToImg(-1);
				        },
				        //Default is 75px, set to 0 for demo so any distance triggers swipe
				         threshold:0
				      });

				elems.slideToImgButtons.click(function () { 
					self.slideToImg(0, $(this) ); 
				});
			},

			slideToImg: function(direction, button) {
				var elems = this.elements,
					nextImg = direction == 0 ? this.currentImg : this.setNextImg(direction),
					button = button || elems.slideToImgButtons.parent().find('[data-img='+ nextImg +']');

				clearTimeout(carouselTimeout);

				this.currentImg = button.data('img');

				elems.slideToImgButtons.removeClass('active');
				button.addClass('active');

				elems.listWrapper.css("margin-left", ("-" + this.currentImg*this.settings.moduleWidth) + 'px');

				this.setTimeout();
			},

			setTimeout: function () {
				var self = this;
				
				carouselTimeout = setTimeout(function () { self.slideToImg(); }, self.settings.autoSlidingDelay);
			},

			clearTimeout: function () {
				clearTimeout(carouselTimeout);
			},

			setNextImg: function(direction) {
				var tempNextImg = this.currentImg + (direction || 1);

				if (tempNextImg < this.numberOfImgs) {
					if (tempNextImg < 0) {
						return this.numberOfImgs - 1;
					} 
					return tempNextImg;
				} else return 0;
			},

			setListWidth: function () {
				this.settings.moduleWidth = this.elements.module.width();
				this.settings.moduleHeight = Math.ceil(this.settings.moduleWidth / this.settings.moduleAspectRatio.width * this.settings.moduleAspectRatio.height);
				this.elements.listElements.width(this.settings.moduleWidth);
				this.elements.listElements.height(this.settings.moduleHeight);
				if (this.settings.moduleWidth <= this.elements.description.data('viewFactorWidth')) {
					this.elements.description.height(this.settings.moduleHeight);
				} else {
					this.elements.description.height('auto');
				}
        this.elements.description.width(this.settings.moduleWidth);
			}
		};
	})();
/*endFile*/
/*file=/nickpress.com/javascript/shared/placeholder.js */
(function () {

	$NickPress.Placeholder = {

		setPlaceholder: function ($parentElement) {
			var $inputs = $parentElement.find('input[type="text"], input[type="password"]');

			if('placeholder' in document.createElement('input')) { 
				return; 
			}

			$inputs.each(function() {
				var $this = $(this);
				
				if ($this.val() == "") {
					$this.val($this.data('placeholder'));
				}

				if ($this.prop('type') === 'password') {
					$this.prop('type', 'text');
					$this.data('type', 'password');
				}
			}).on('focus', function(){
				var $this = $(this);

				if ($this.val() == $this.data('placeholder')) {
					$this.val("");
					$this.data('type') === 'password' && $this.prop('type', 'password');
				}
			}).on('blur', function(){
				var $this = $(this);

				if ($this.val() == "") {
					$this.val($this.data('placeholder'));
					$this.data('type') === 'password' && $this.prop('type', 'text');
				}
			});
		}
	};
})();
/*endFile*/
/*file=/nickpress.com/javascript/shared/shadowbox.js */
/*
 * Shadowbox.js, version 3.0.3
 * http://shadowbox-js.com/
 *
 * Copyright 2007-2010, Michael J. I. Jackson
 * Date: 2010-03-10 10:00:06 -0700
 */
(function (window, undefined) {
  var S = {version: "3.0.3"};
  var ua = navigator.userAgent.toLowerCase();
  if (ua.indexOf("windows") > -1 || ua.indexOf("win32") > -1) {
    S.isWindows = true
  } else {
    if (ua.indexOf("macintosh") > -1 || ua.indexOf("mac os x") > -1) {
      S.isMac = true
    } else {
      if (ua.indexOf("linux") > -1) {
        S.isLinux = true
      }
    }
  }
  S.isIE = ua.indexOf("msie") > -1;
  S.isIE6 = ua.indexOf("msie 6") > -1;
  S.isIE7 = ua.indexOf("msie 7") > -1;
  S.isGecko = ua.indexOf("gecko") > -1 && ua.indexOf("safari") == -1;
  S.isWebKit = ua.indexOf("applewebkit/") > -1;
  var inlineId = /#(.+)$/, galleryName = /^(light|shadow)box\[(.*?)\]/i, inlineParam = /\s*([a-z_]*?)\s*=\s*(.+)\s*/, fileExtension = /[0-9a-z]+$/i, scriptPath = /(.+\/)shadowbox\.js/i;
  var open = false, initialized = false, lastOptions = {}, slideDelay = 0, slideStart, slideTimer;
  S.current = -1;
  S.dimensions = null;
  S.ease = function (state) {
    return 1 + Math.pow(state - 1, 3)
  };
  S.errorInfo = {
    fla: {name: "Flash", url: "http://www.adobe.com/products/flashplayer/"},
    qt: {name: "QuickTime", url: "http://www.apple.com/quicktime/download/"},
    wmp: {name: "Windows Media Player", url: "http://www.microsoft.com/windows/windowsmedia/"},
    f4m: {name: "Flip4Mac", url: "http://www.flip4mac.com/wmv_download.htm"}
  };
  S.gallery = [];
  S.onReady = noop;
  S.path = null;
  S.player = null;
  S.playerId = "sb-player";
  S.options = {
    animate: true,
    animateFade: true,
    autoplayMovies: true,
    continuous: false,
    enableKeys: true,
    flashParams: {bgcolor: "#000000", allowfullscreen: true},
    flashVars: {},
    flashVersion: "9.0.115",
    handleOversize: "resize",
    handleUnsupported: "link",
    onChange: noop,
    onClose: noop,
    onFinish: noop,
    onOpen: noop,
    showMovieControls: true,
    skipSetup: false,
    slideshowDelay: 0,
    viewportPadding: 20
  };
  S.getCurrent = function () {
    return S.current > -1 ? S.gallery[S.current] : null
  };
  S.hasNext = function () {
    return S.gallery.length > 1 && (S.current != S.gallery.length - 1 || S.options.continuous)
  };
  S.isOpen = function () {
    return open
  };
  S.isPaused = function () {
    return slideTimer == "pause"
  };
  S.applyOptions = function (options) {
    lastOptions = apply({}, S.options);
    apply(S.options, options)
  };
  S.revertOptions = function () {
    apply(S.options, lastOptions)
  };
  S.init = function (options, callback) {
    if (initialized) {
      return
    }
    initialized = true;
    if (S.skin.options) {
      apply(S.options, S.skin.options)
    }
    if (options) {
      apply(S.options, options)
    }
    if (!S.path) {
      var path, scripts = document.getElementsByTagName("script");
      for (var i = 0, len = scripts.length; i < len; ++i) {
        path = scriptPath.exec(scripts[i].src);
        if (path) {
          S.path = path[1];
          break
        }
      }
    }
    if (callback) {
      S.onReady = callback
    }
    bindLoad()
  };
  S.open = function (obj) {
    if (open) {
      return
    }
    var gc = S.makeGallery(obj);
    S.gallery = gc[0];
    S.current = gc[1];
    obj = S.getCurrent();
    if (obj == null) {
      return
    }
    S.applyOptions(obj.options || {});
    filterGallery();
    if (S.gallery.length) {
      obj = S.getCurrent();
      if (S.options.onOpen(obj) === false) {
        return
      }
      open = true;
      S.skin.onOpen(obj, load)
    }

    try {
      var outerHTML = S.getCurrent().link.outerHTML;
      var reg = new RegExp('(?:data\-download=\"(.+?)(?=\"))', 'gim');
      var myArray = reg.exec(outerHTML);
      if (myArray[1] === 'false') {
        $('#sb-nav-download').remove();
      }
    }
    catch (e) {
      //there is no video data
    }
  };
  S.download = function () {
    var outerHTML = S.getCurrent().link.outerHTML;
    var reg = new RegExp('(?:data\-link=\"(.+?)(?=\"))', 'gim');
    var myArray = reg.exec(outerHTML);
    location.replace(myArray[1]);
  };
  S.close = function () {
    if (!open) {
      return
    }
    open = false;
    if (S.player) {
      S.player.remove();
      S.player = null
    }
    if (typeof slideTimer == "number") {
      clearTimeout(slideTimer);
      slideTimer = null
    }
    slideDelay = 0;
    listenKeys(false);
    S.options.onClose(S.getCurrent());
    S.skin.onClose();
    S.revertOptions()
  };
  S.play = function () {
    if (!S.hasNext()) {
      return
    }
    if (!slideDelay) {
      slideDelay = S.options.slideshowDelay * 1000
    }
    if (slideDelay) {
      slideStart = now();
      slideTimer = setTimeout(function () {
        slideDelay = slideStart = 0;
        S.next()
      }, slideDelay);
      if (S.skin.onPlay) {
        S.skin.onPlay()
      }
    }
  };
  S.pause = function () {
    if (typeof slideTimer != "number") {
      return
    }
    slideDelay = Math.max(0, slideDelay - (now() - slideStart));
    if (slideDelay) {
      clearTimeout(slideTimer);
      slideTimer = "pause";
      if (S.skin.onPause) {
        S.skin.onPause()
      }
    }
  };
  S.change = function (index) {
    if (!(index in S.gallery)) {
      if (S.options.continuous) {
        index = (index < 0 ? S.gallery.length + index : 0);
        if (!(index in S.gallery)) {
          return
        }
      } else {
        return
      }
    }
    S.current = index;
    if (typeof slideTimer == "number") {
      clearTimeout(slideTimer);
      slideTimer = null;
      slideDelay = slideStart = 0
    }
    S.options.onChange(S.getCurrent());
    load(true)
  };
  S.next = function () {
    S.change(S.current + 1)
  };
  S.previous = function () {
    S.change(S.current - 1)
  };
  S.setDimensions = function (height, width, maxHeight, maxWidth, topBottom, leftRight, padding, preserveAspect) {
    var originalHeight = height, originalWidth = width;
    var extraHeight = 2 * padding + topBottom;
    if (height + extraHeight > maxHeight) {
      height = maxHeight - extraHeight
    }
    var extraWidth = 2 * padding + leftRight;
    if (width + extraWidth > maxWidth) {
      width = maxWidth - extraWidth
    }
    var changeHeight = (originalHeight - height) / originalHeight, changeWidth = (originalWidth - width) / originalWidth, oversized = (changeHeight > 0 || changeWidth > 0);
    if (preserveAspect && oversized) {
      if (changeHeight > changeWidth) {
        width = Math.round((originalWidth / originalHeight) * height)
      } else {
        if (changeWidth > changeHeight) {
          height = Math.round((originalHeight / originalWidth) * width)
        }
      }
    }
    S.dimensions = {
      height: height + topBottom,
      width: width + leftRight,
      innerHeight: height,
      innerWidth: width,
      top: Math.floor((maxHeight - (height + extraHeight)) / 2 + padding),
      left: Math.floor((maxWidth - (width + extraWidth)) / 2 + padding),
      oversized: oversized
    };
    return S.dimensions
  };
  S.makeGallery = function (obj) {
    var gallery = [], current = -1;
    if (typeof obj == "string") {
      obj = [obj]
    }
    if (typeof obj.length == "number") {
      each(obj, function (i, o) {
        if (o.content) {
          gallery[i] = o
        } else {
          gallery[i] = {content: o}
        }
      });
      current = 0
    } else {
      if (obj.tagName) {
        var cacheObj = S.getCache(obj);
        obj = cacheObj ? cacheObj : S.makeObject(obj)
      }
      if (obj.gallery) {
        gallery = [];
        var o;
        for (var key in S.cache) {
          o = S.cache[key];
          if (o.gallery && o.gallery == obj.gallery) {
            if (current == -1 && o.content == obj.content) {
              current = gallery.length
            }
            gallery.push(o)
          }
        }
        if (current == -1) {
          gallery.unshift(obj);
          current = 0
        }
      } else {
        gallery = [obj];
        current = 0
      }
    }
    each(gallery, function (i, o) {
      gallery[i] = apply({}, o)
    });
    return [gallery, current]
  };
  S.makeObject = function (link, options) {
    var obj = {content: link.href, title: link.getAttribute("title") || "", link: link};
    if (options) {
      options = apply({}, options);
      each(["player", "title", "height", "width", "gallery"], function (i, o) {
        if (typeof options[o] != "undefined") {
          obj[o] = options[o];
          delete options[o]
        }
      });
      obj.options = options
    } else {
      obj.options = {}
    }
    if (!obj.player) {
      obj.player = S.getPlayer(obj.content)
    }
    var rel = link.getAttribute("rel");
    if (rel) {
      var match = rel.match(galleryName);
      if (match) {
        obj.gallery = escape(match[2])
      }
      each(rel.split(";"), function (i, p) {
        match = p.match(inlineParam);
        if (match) {
          obj[match[1]] = match[2]
        }
      })
    }
    return obj
  };
  S.getPlayer = function (content) {

    if (content.indexOf("#") > -1 && content.indexOf(document.location.href) == 0) {
      return "inline"
    }
    var q = content.indexOf("?");
    if (q > -1) {
      content = content.substring(0, q)
    }

    //my custom check
    var myRegExp = /image-preview\/\d+$/;
    var isImage = myRegExp.test(content);

    if(isImage) {
      return "img";
    }

    var ext, m = content.match(fileExtension);
    if (m) {
      ext = m[0].toLowerCase()
    }
    if (ext) {
      if (S.img && S.img.ext.indexOf(ext) > -1) {
        return "img"
      }
      if (S.swf && S.swf.ext.indexOf(ext) > -1) {
        return "swf"
      }
      if (S.flv && S.flv.ext.indexOf(ext) > -1) {
        return "flv"
      }
      if (S.qt && S.qt.ext.indexOf(ext) > -1) {
        if (S.wmp && S.wmp.ext.indexOf(ext) > -1) {
          return "qtwmp"
        } else {
          return "qt"
        }
      }
      if (S.wmp && S.wmp.ext.indexOf(ext) > -1) {
        return "wmp"
      }
    }
    return "iframe"
  };
  function filterGallery() {
    var err = S.errorInfo, plugins = S.plugins, obj, remove, needed, m, format, replace, inlineEl, flashVersion;
    for (var i = 0; i < S.gallery.length; ++i) {
      obj = S.gallery[i];
      remove = false;
      needed = null;
      switch (obj.player) {
        case"flv":
        case"swf":
          if (!plugins.fla) {
            needed = "fla"
          }
          break;
        case"qt":
          if (!plugins.qt) {
            needed = "qt"
          }
          break;
        case"wmp":
          if (S.isMac) {
            if (plugins.qt && plugins.f4m) {
              obj.player = "qt"
            } else {
              needed = "qtf4m"
            }
          } else {
            if (!plugins.wmp) {
              needed = "wmp"
            }
          }
          break;
        case"qtwmp":
          if (plugins.qt) {
            obj.player = "qt"
          } else {
            if (plugins.wmp) {
              obj.player = "wmp"
            } else {
              needed = "qtwmp"
            }
          }
          break
      }
      if (needed) {
        if (S.options.handleUnsupported == "link") {
          switch (needed) {
            case"qtf4m":
              format = "shared";
              replace = [err.qt.url, err.qt.name, err.f4m.url, err.f4m.name];
              break;
            case"qtwmp":
              format = "either";
              replace = [err.qt.url, err.qt.name, err.wmp.url, err.wmp.name];
              break;
            default:
              format = "single";
              replace = [err[needed].url, err[needed].name]
          }
          obj.player = "html";
          obj.content = '<div class="sb-message">' + sprintf(S.lang.errors[format], replace) + "</div>"
        } else {
          remove = true
        }
      } else {
        if (obj.player == "inline") {
          m = inlineId.exec(obj.content);
          if (m) {
            inlineEl = get(m[1]);
            if (inlineEl) {
              obj.content = inlineEl.innerHTML
            } else {
              remove = true
            }
          } else {
            remove = true
          }
        } else {
          if (obj.player == "swf" || obj.player == "flv") {
            flashVersion = (obj.options && obj.options.flashVersion) || S.options.flashVersion;
            if (S.flash && !S.flash.hasFlashPlayerVersion(flashVersion)) {
              obj.width = 310;
              obj.height = 177
            }
          }
        }
      }
      if (remove) {
        S.gallery.splice(i, 1);
        if (i < S.current) {
          --S.current
        } else {
          if (i == S.current) {
            S.current = i > 0 ? i - 1 : i
          }
        }
        --i
      }
    }
  }

  function listenKeys(on) {
    if (!S.options.enableKeys) {
      return
    }
    (on ? addEvent : removeEvent)(document, "keydown", handleKey)
  }

  function handleKey(e) {
    if (e.metaKey || e.shiftKey || e.altKey || e.ctrlKey) {
      return
    }
    var code = keyCode(e), handler;
    switch (code) {
      case 81:
      case 88:
      case 27:
        handler = S.close;
        break;
      case 37:
        handler = S.previous;
        break;
      case 39:
        handler = S.next;
        break;
      case 32:
        handler = typeof slideTimer == "number" ? S.pause : S.play;
        break
    }
    if (handler) {
      preventDefault(e);
      handler()
    }
  }

  function load(changing) {
    listenKeys(false);
    var obj = S.getCurrent();
    var player = (obj.player == "inline" ? "html" : obj.player);
    if (typeof S[player] != "function") {
      throw"unknown player " + player
    }
    if (changing) {
      S.player.remove();
      S.revertOptions();
      S.applyOptions(obj.options || {})
    }
    S.player = new S[player](obj, S.playerId);
    if (S.gallery.length > 1) {
      var next = S.gallery[S.current + 1] || S.gallery[0];
      if (next.player == "img") {
        var a = new Image();
        a.src = next.content
      }
      var prev = S.gallery[S.current - 1] || S.gallery[S.gallery.length - 1];
      if (prev.player == "img") {
        var b = new Image();
        b.src = prev.content
      }
    }
    S.skin.onLoad(changing, waitReady)
  }

  function waitReady() {
    if (!open) {
      return
    }
    if (typeof S.player.ready != "undefined") {
      var timer = setInterval(function () {
        if (open) {
          if (S.player.ready) {
            clearInterval(timer);
            timer = null;
            S.skin.onReady(show)
          }
        } else {
          clearInterval(timer);
          timer = null
        }
      }, 10)
    } else {
      S.skin.onReady(show)
    }
  }

  function show() {
    if (!open) {
      return
    }
    S.player.append(S.skin.body, S.dimensions);
    S.skin.onShow(finish)
  }

  function finish() {
    if (!open) {
      return
    }
    if (S.player.onLoad) {
      S.player.onLoad()
    }
    S.options.onFinish(S.getCurrent());
    if (!S.isPaused()) {
      S.play()
    }
    listenKeys(true)
  }

  if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (obj, from) {
      var len = this.length >>> 0;
      from = from || 0;
      if (from < 0) {
        from += len
      }
      for (; from < len; ++from) {
        if (from in this && this[from] === obj) {
          return from
        }
      }
      return -1
    }
  }
  function now() {
    return (new Date).getTime()
  }

  function apply(original, extension) {
    for (var property in extension) {
      original[property] = extension[property]
    }
    return original
  }

  function each(obj, callback) {
    var i = 0, len = obj.length;
    for (var value = obj[0]; i < len && callback.call(value, i, value) !== false; value = obj[++i]) {
    }
  }

  function sprintf(str, replace) {
    return str.replace(/\{(\w+?)\}/g, function (match, i) {
      return replace[i]
    })
  }

  function noop() {
  }

  function get(id) {
    return document.getElementById(id)
  }

  function remove(el) {
    el.parentNode.removeChild(el)
  }

  var supportsOpacity = true, supportsFixed = true;

  function checkSupport() {
    var body = document.body, div = document.createElement("div");
    supportsOpacity = typeof div.style.opacity === "string";
    div.style.position = "fixed";
    div.style.margin = 0;
    div.style.top = "20px";
    body.appendChild(div, body.firstChild);
    supportsFixed = div.offsetTop == 20;
    body.removeChild(div)
  }

  S.getStyle = (function () {
    var opacity = /opacity=([^)]*)/, getComputedStyle = document.defaultView && document.defaultView.getComputedStyle;
    return function (el, style) {
      var ret;
      if (!supportsOpacity && style == "opacity" && el.currentStyle) {
        ret = opacity.test(el.currentStyle.filter || "") ? (parseFloat(RegExp.$1) / 100) + "" : "";
        return ret === "" ? "1" : ret
      }
      if (getComputedStyle) {
        var computedStyle = getComputedStyle(el, null);
        if (computedStyle) {
          ret = computedStyle[style]
        }
        if (style == "opacity" && ret == "") {
          ret = "1"
        }
      } else {
        ret = el.currentStyle[style]
      }
      return ret
    }
  })();
  S.appendHTML = function (el, html) {
    if (el.insertAdjacentHTML) {
      el.insertAdjacentHTML("BeforeEnd", html)
    } else {
      if (el.lastChild) {
        var range = el.ownerDocument.createRange();
        range.setStartAfter(el.lastChild);
        var frag = range.createContextualFragment(html);
        el.appendChild(frag)
      } else {
        el.innerHTML = html
      }
    }
  };
  S.getWindowSize = function (dimension) {
    if (document.compatMode === "CSS1Compat") {
      return document.documentElement["client" + dimension]
    }
    return document.body["client" + dimension]
  };
  S.setOpacity = function (el, opacity) {
    var style = el.style;
    if (supportsOpacity) {
      style.opacity = (opacity == 1 ? "" : opacity)
    } else {
      style.zoom = 1;
      if (opacity == 1) {
        if (typeof style.filter == "string" && (/alpha/i).test(style.filter)) {
          style.filter = style.filter.replace(/\s*[\w\.]*alpha\([^\)]*\);?/gi, "")
        }
      } else {
        style.filter = (style.filter || "").replace(/\s*[\w\.]*alpha\([^\)]*\)/gi, "") + " alpha(opacity=" + (opacity * 100) + ")"
      }
    }
  };
  S.clearOpacity = function (el) {
    S.setOpacity(el, 1)
  };
  function getTarget(e) {
    var target = e.target ? e.target : e.srcElement;
    return target.nodeType == 3 ? target.parentNode : target
  }

  function getPageXY(e) {
    var x = e.pageX || (e.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft)), y = e.pageY || (e.clientY + (document.documentElement.scrollTop || document.body.scrollTop));
    return [x, y]
  }

  function preventDefault(e) {
    e.preventDefault()
  }

  function keyCode(e) {
    return e.which ? e.which : e.keyCode
  }

  function addEvent(el, type, handler) {
    if (el.addEventListener) {
      el.addEventListener(type, handler, false)
    } else {
      if (el.nodeType === 3 || el.nodeType === 8) {
        return
      }
      if (el.setInterval && (el !== window && !el.frameElement)) {
        el = window
      }
      if (!handler.__guid) {
        handler.__guid = addEvent.guid++
      }
      if (!el.events) {
        el.events = {}
      }
      var handlers = el.events[type];
      if (!handlers) {
        handlers = el.events[type] = {};
        if (el["on" + type]) {
          handlers[0] = el["on" + type]
        }
      }
      handlers[handler.__guid] = handler;
      el["on" + type] = addEvent.handleEvent
    }
  }

  addEvent.guid = 1;
  addEvent.handleEvent = function (event) {
    var result = true;
    event = event || addEvent.fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);
    var handlers = this.events[event.type];
    for (var i in handlers) {
      this.__handleEvent = handlers[i];
      if (this.__handleEvent(event) === false) {
        result = false
      }
    }
    return result
  };
  addEvent.preventDefault = function () {
    this.returnValue = false
  };
  addEvent.stopPropagation = function () {
    this.cancelBubble = true
  };
  addEvent.fixEvent = function (e) {
    e.preventDefault = addEvent.preventDefault;
    e.stopPropagation = addEvent.stopPropagation;
    return e
  };
  function removeEvent(el, type, handler) {
    if (el.removeEventListener) {
      el.removeEventListener(type, handler, false)
    } else {
      if (el.events && el.events[type]) {
        delete el.events[type][handler.__guid]
      }
    }
  }

  var loaded = false, DOMContentLoaded;
  if (document.addEventListener) {
    DOMContentLoaded = function () {
      document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
      S.load()
    }
  } else {
    if (document.attachEvent) {
      DOMContentLoaded = function () {
        if (document.readyState === "complete") {
          document.detachEvent("onreadystatechange", DOMContentLoaded);
          S.load()
        }
      }
    }
  }
  function doScrollCheck() {
    if (loaded) {
      return
    }
    try {
      document.documentElement.doScroll("left")
    } catch (e) {
      setTimeout(doScrollCheck, 1);
      return
    }
    S.load()
  }

  function bindLoad() {
    if (document.readyState === "complete") {
      return S.load()
    }
    if (document.addEventListener) {
      document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
      window.addEventListener("load", S.load, false)
    } else {
      if (document.attachEvent) {
        document.attachEvent("onreadystatechange", DOMContentLoaded);
        window.attachEvent("onload", S.load);
        var topLevel = false;
        try {
          topLevel = window.frameElement === null
        } catch (e) {
        }
        if (document.documentElement.doScroll && topLevel) {
          doScrollCheck()
        }
      }
    }
  }

  S.load = function () {
    if (loaded) {
      return
    }
    if (!document.body) {
      return setTimeout(S.load, 13)
    }
    loaded = true;
    checkSupport();
    S.onReady();
    if (!S.options.skipSetup) {
      S.setup()
    }
    S.skin.init()
  };
  S.plugins = {};
  if (navigator.plugins && navigator.plugins.length) {
    var names = [];
    each(navigator.plugins, function (i, p) {
      names.push(p.name)
    });
    names = names.join(",");
    var f4m = names.indexOf("Flip4Mac") > -1;
    S.plugins = {
      fla: names.indexOf("Shockwave Flash") > -1,
      qt: names.indexOf("QuickTime") > -1,
      wmp: !f4m && names.indexOf("Windows Media") > -1,
      f4m: f4m
    }
  } else {
    var detectPlugin = function (name) {
      var axo;
      try {
        axo = new ActiveXObject(name)
      } catch (e) {
      }
      return !!axo
    };
    S.plugins = {
      fla: detectPlugin("ShockwaveFlash.ShockwaveFlash"),
      qt: detectPlugin("QuickTime.QuickTime"),
      wmp: detectPlugin("wmplayer.ocx"),
      f4m: false
    }
  }
  var relAttr = /^(light|shadow)box/i, expando = "shadowboxCacheKey", cacheKey = 1;
  S.cache = {};
  S.select = function (selector) {
    var links = [];
    if (!selector) {
      var rel;
      each(document.getElementsByTagName("a"), function (i, el) {
        rel = el.getAttribute("rel");
        if (rel && relAttr.test(rel)) {
          links.push(el)
        }
      })
    } else {
      var length = selector.length;
      if (length) {
        if (typeof selector == "string") {
          if (S.find) {
            links = S.find(selector)
          }
        } else {
          if (length == 2 && typeof selector[0] == "string" && selector[1].nodeType) {
            if (S.find) {
              links = S.find(selector[0], selector[1])
            }
          } else {
            for (var i = 0; i < length; ++i) {
              links[i] = selector[i]
            }
          }
        }
      } else {
        links.push(selector)
      }
    }
    return links
  };
  S.setup = function (selector, options) {
    each(S.select(selector), function (i, link) {
      S.addCache(link, options)
    })
  };
  S.teardown = function (selector) {
    each(S.select(selector), function (i, link) {
      S.removeCache(link)
    })
  };
  S.addCache = function (link, options) {
    var key = link[expando];
    if (key == undefined) {
      key = cacheKey++;
      link[expando] = key;
      addEvent(link, "click", handleClick)
    }
    S.cache[key] = S.makeObject(link, options)
  };
  S.removeCache = function (link) {
    removeEvent(link, "click", handleClick);
    delete S.cache[link[expando]];
    link[expando] = null
  };
  S.getCache = function (link) {
    var key = link[expando];
    return (key in S.cache && S.cache[key])
  };
  S.clearCache = function () {
    for (var key in S.cache) {
      S.removeCache(S.cache[key].link)
    }
    S.cache = {}
  };

  S.getCookie = function(name) {
      var matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
      ));
      return matches ? decodeURIComponent(matches[1]) : undefined;
  };

  function handleClick(e) {
    if ( !S.getCookie("ms_ses") ) {
      return false;
    }

    S.open(this);
    if (S.gallery.length) {
      preventDefault(e)
    }
  }

  /*
   * Sizzle CSS Selector Engine - v1.0
   *  Copyright 2009, The Dojo Foundation
   *  Released under the MIT, BSD, and GPL Licenses.
   *  More information: http://sizzlejs.com/
   *
   * Modified for inclusion in Shadowbox.js
   */
  S.find = (function () {
    var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, done = 0, toString = Object.prototype.toString, hasDuplicate = false, baseHasDuplicate = true;
    [0, 0].sort(function () {
      baseHasDuplicate = false;
      return 0
    });
    var Sizzle = function (selector, context, results, seed) {
      results = results || [];
      var origContext = context = context || document;
      if (context.nodeType !== 1 && context.nodeType !== 9) {
        return []
      }
      if (!selector || typeof selector !== "string") {
        return results
      }
      var parts = [], m, set, checkSet, extra, prune = true, contextXML = isXML(context), soFar = selector;
      while ((chunker.exec(""), m = chunker.exec(soFar)) !== null) {
        soFar = m[3];
        parts.push(m[1]);
        if (m[2]) {
          extra = m[3];
          break
        }
      }
      if (parts.length > 1 && origPOS.exec(selector)) {
        if (parts.length === 2 && Expr.relative[parts[0]]) {
          set = posProcess(parts[0] + parts[1], context)
        } else {
          set = Expr.relative[parts[0]] ? [context] : Sizzle(parts.shift(), context);
          while (parts.length) {
            selector = parts.shift();
            if (Expr.relative[selector]) {
              selector += parts.shift()
            }
            set = posProcess(selector, set)
          }
        }
      } else {
        if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
          var ret = Sizzle.find(parts.shift(), context, contextXML);
          context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0]
        }
        if (context) {
          var ret = seed ? {
            expr: parts.pop(),
            set: makeArray(seed)
          } : Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
          set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
          if (parts.length > 0) {
            checkSet = makeArray(set)
          } else {
            prune = false
          }
          while (parts.length) {
            var cur = parts.pop(), pop = cur;
            if (!Expr.relative[cur]) {
              cur = ""
            } else {
              pop = parts.pop()
            }
            if (pop == null) {
              pop = context
            }
            Expr.relative[cur](checkSet, pop, contextXML)
          }
        } else {
          checkSet = parts = []
        }
      }
      if (!checkSet) {
        checkSet = set
      }
      if (!checkSet) {
        throw"Syntax error, unrecognized expression: " + (cur || selector)
      }
      if (toString.call(checkSet) === "[object Array]") {
        if (!prune) {
          results.push.apply(results, checkSet)
        } else {
          if (context && context.nodeType === 1) {
            for (var i = 0; checkSet[i] != null; i++) {
              if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i]))) {
                results.push(set[i])
              }
            }
          } else {
            for (var i = 0; checkSet[i] != null; i++) {
              if (checkSet[i] && checkSet[i].nodeType === 1) {
                results.push(set[i])
              }
            }
          }
        }
      } else {
        makeArray(checkSet, results)
      }
      if (extra) {
        Sizzle(extra, origContext, results, seed);
        Sizzle.uniqueSort(results)
      }
      return results
    };
    Sizzle.uniqueSort = function (results) {
      if (sortOrder) {
        hasDuplicate = baseHasDuplicate;
        results.sort(sortOrder);
        if (hasDuplicate) {
          for (var i = 1; i < results.length; i++) {
            if (results[i] === results[i - 1]) {
              results.splice(i--, 1)
            }
          }
        }
      }
      return results
    };
    Sizzle.matches = function (expr, set) {
      return Sizzle(expr, null, null, set)
    };
    Sizzle.find = function (expr, context, isXML) {
      var set, match;
      if (!expr) {
        return []
      }
      for (var i = 0, l = Expr.order.length; i < l; i++) {
        var type = Expr.order[i], match;
        if ((match = Expr.leftMatch[type].exec(expr))) {
          var left = match[1];
          match.splice(1, 1);
          if (left.substr(left.length - 1) !== "\\") {
            match[1] = (match[1] || "").replace(/\\/g, "");
            set = Expr.find[type](match, context, isXML);
            if (set != null) {
              expr = expr.replace(Expr.match[type], "");
              break
            }
          }
        }
      }
      if (!set) {
        set = context.getElementsByTagName("*")
      }
      return {set: set, expr: expr}
    };
    Sizzle.filter = function (expr, set, inplace, not) {
      var old = expr, result = [], curLoop = set, match, anyFound, isXMLFilter = set && set[0] && isXML(set[0]);
      while (expr && set.length) {
        for (var type in Expr.filter) {
          if ((match = Expr.match[type].exec(expr)) != null) {
            var filter = Expr.filter[type], found, item;
            anyFound = false;
            if (curLoop === result) {
              result = []
            }
            if (Expr.preFilter[type]) {
              match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
              if (!match) {
                anyFound = found = true
              } else {
                if (match === true) {
                  continue
                }
              }
            }
            if (match) {
              for (var i = 0; (item = curLoop[i]) != null; i++) {
                if (item) {
                  found = filter(item, match, i, curLoop);
                  var pass = not ^ !!found;
                  if (inplace && found != null) {
                    if (pass) {
                      anyFound = true
                    } else {
                      curLoop[i] = false
                    }
                  } else {
                    if (pass) {
                      result.push(item);
                      anyFound = true
                    }
                  }
                }
              }
            }
            if (found !== undefined) {
              if (!inplace) {
                curLoop = result
              }
              expr = expr.replace(Expr.match[type], "");
              if (!anyFound) {
                return []
              }
              break
            }
          }
        }
        if (expr === old) {
          if (anyFound == null) {
            throw"Syntax error, unrecognized expression: " + expr
          } else {
            break
          }
        }
        old = expr
      }
      return curLoop
    };
    var Expr = Sizzle.selectors = {
      order: ["ID", "NAME", "TAG"],
      match: {
        ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
        CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
        NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
        ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
        TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
        CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
        POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
        PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/
      },
      leftMatch: {},
      attrMap: {"class": "className", "for": "htmlFor"},
      attrHandle: {
        href: function (elem) {
          return elem.getAttribute("href")
        }
      },
      relative: {
        "+": function (checkSet, part) {
          var isPartStr = typeof part === "string", isTag = isPartStr && !/\W/.test(part), isPartStrNotTag = isPartStr && !isTag;
          if (isTag) {
            part = part.toLowerCase()
          }
          for (var i = 0, l = checkSet.length, elem; i < l; i++) {
            if ((elem = checkSet[i])) {
              while ((elem = elem.previousSibling) && elem.nodeType !== 1) {
              }
              checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ? elem || false : elem === part
            }
          }
          if (isPartStrNotTag) {
            Sizzle.filter(part, checkSet, true)
          }
        }, ">": function (checkSet, part) {
          var isPartStr = typeof part === "string";
          if (isPartStr && !/\W/.test(part)) {
            part = part.toLowerCase();
            for (var i = 0, l = checkSet.length; i < l; i++) {
              var elem = checkSet[i];
              if (elem) {
                var parent = elem.parentNode;
                checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false
              }
            }
          } else {
            for (var i = 0, l = checkSet.length; i < l; i++) {
              var elem = checkSet[i];
              if (elem) {
                checkSet[i] = isPartStr ? elem.parentNode : elem.parentNode === part
              }
            }
            if (isPartStr) {
              Sizzle.filter(part, checkSet, true)
            }
          }
        }, "": function (checkSet, part, isXML) {
          var doneName = done++, checkFn = dirCheck;
          if (typeof part === "string" && !/\W/.test(part)) {
            var nodeCheck = part = part.toLowerCase();
            checkFn = dirNodeCheck
          }
          checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML)
        }, "~": function (checkSet, part, isXML) {
          var doneName = done++, checkFn = dirCheck;
          if (typeof part === "string" && !/\W/.test(part)) {
            var nodeCheck = part = part.toLowerCase();
            checkFn = dirNodeCheck
          }
          checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML)
        }
      },
      find: {
        ID: function (match, context, isXML) {
          if (typeof context.getElementById !== "undefined" && !isXML) {
            var m = context.getElementById(match[1]);
            return m ? [m] : []
          }
        }, NAME: function (match, context) {
          if (typeof context.getElementsByName !== "undefined") {
            var ret = [], results = context.getElementsByName(match[1]);
            for (var i = 0, l = results.length; i < l; i++) {
              if (results[i].getAttribute("name") === match[1]) {
                ret.push(results[i])
              }
            }
            return ret.length === 0 ? null : ret
          }
        }, TAG: function (match, context) {
          return context.getElementsByTagName(match[1])
        }
      },
      preFilter: {
        CLASS: function (match, curLoop, inplace, result, not, isXML) {
          match = " " + match[1].replace(/\\/g, "") + " ";
          if (isXML) {
            return match
          }
          for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
            if (elem) {
              if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0)) {
                if (!inplace) {
                  result.push(elem)
                }
              } else {
                if (inplace) {
                  curLoop[i] = false
                }
              }
            }
          }
          return false
        }, ID: function (match) {
          return match[1].replace(/\\/g, "")
        }, TAG: function (match, curLoop) {
          return match[1].toLowerCase()
        }, CHILD: function (match) {
          if (match[1] === "nth") {
            var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
            match[2] = (test[1] + (test[2] || 1)) - 0;
            match[3] = test[3] - 0
          }
          match[0] = done++;
          return match
        }, ATTR: function (match, curLoop, inplace, result, not, isXML) {
          var name = match[1].replace(/\\/g, "");
          if (!isXML && Expr.attrMap[name]) {
            match[1] = Expr.attrMap[name]
          }
          if (match[2] === "~=") {
            match[4] = " " + match[4] + " "
          }
          return match
        }, PSEUDO: function (match, curLoop, inplace, result, not) {
          if (match[1] === "not") {
            if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
              match[3] = Sizzle(match[3], null, null, curLoop)
            } else {
              var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
              if (!inplace) {
                result.push.apply(result, ret)
              }
              return false
            }
          } else {
            if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
              return true
            }
          }
          return match
        }, POS: function (match) {
          match.unshift(true);
          return match
        }
      },
      filters: {
        enabled: function (elem) {
          return elem.disabled === false && elem.type !== "hidden"
        }, disabled: function (elem) {
          return elem.disabled === true
        }, checked: function (elem) {
          return elem.checked === true
        }, selected: function (elem) {
          elem.parentNode.selectedIndex;
          return elem.selected === true
        }, parent: function (elem) {
          return !!elem.firstChild
        }, empty: function (elem) {
          return !elem.firstChild
        }, has: function (elem, i, match) {
          return !!Sizzle(match[3], elem).length
        }, header: function (elem) {
          return /h\d/i.test(elem.nodeName)
        }, text: function (elem) {
          return "text" === elem.type
        }, radio: function (elem) {
          return "radio" === elem.type
        }, checkbox: function (elem) {
          return "checkbox" === elem.type
        }, file: function (elem) {
          return "file" === elem.type
        }, password: function (elem) {
          return "password" === elem.type
        }, submit: function (elem) {
          return "submit" === elem.type
        }, image: function (elem) {
          return "image" === elem.type
        }, reset: function (elem) {
          return "reset" === elem.type
        }, button: function (elem) {
          return "button" === elem.type || elem.nodeName.toLowerCase() === "button"
        }, input: function (elem) {
          return /input|select|textarea|button/i.test(elem.nodeName)
        }
      },
      setFilters: {
        first: function (elem, i) {
          return i === 0
        }, last: function (elem, i, match, array) {
          return i === array.length - 1
        }, even: function (elem, i) {
          return i % 2 === 0
        }, odd: function (elem, i) {
          return i % 2 === 1
        }, lt: function (elem, i, match) {
          return i < match[3] - 0
        }, gt: function (elem, i, match) {
          return i > match[3] - 0
        }, nth: function (elem, i, match) {
          return match[3] - 0 === i
        }, eq: function (elem, i, match) {
          return match[3] - 0 === i
        }
      },
      filter: {
        PSEUDO: function (elem, match, i, array) {
          var name = match[1], filter = Expr.filters[name];
          if (filter) {
            return filter(elem, i, match, array)
          } else {
            if (name === "contains") {
              return (elem.textContent || elem.innerText || getText([elem]) || "").indexOf(match[3]) >= 0
            } else {
              if (name === "not") {
                var not = match[3];
                for (var i = 0, l = not.length; i < l; i++) {
                  if (not[i] === elem) {
                    return false
                  }
                }
                return true
              } else {
                throw"Syntax error, unrecognized expression: " + name
              }
            }
          }
        }, CHILD: function (elem, match) {
          var type = match[1], node = elem;
          switch (type) {
            case"only":
            case"first":
              while ((node = node.previousSibling)) {
                if (node.nodeType === 1) {
                  return false
                }
              }
              if (type === "first") {
                return true
              }
              node = elem;
            case"last":
              while ((node = node.nextSibling)) {
                if (node.nodeType === 1) {
                  return false
                }
              }
              return true;
            case"nth":
              var first = match[2], last = match[3];
              if (first === 1 && last === 0) {
                return true
              }
              var doneName = match[0], parent = elem.parentNode;
              if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
                var count = 0;
                for (node = parent.firstChild; node; node = node.nextSibling) {
                  if (node.nodeType === 1) {
                    node.nodeIndex = ++count
                  }
                }
                parent.sizcache = doneName
              }
              var diff = elem.nodeIndex - last;
              if (first === 0) {
                return diff === 0
              } else {
                return (diff % first === 0 && diff / first >= 0)
              }
          }
        }, ID: function (elem, match) {
          return elem.nodeType === 1 && elem.getAttribute("id") === match
        }, TAG: function (elem, match) {
          return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match
        }, CLASS: function (elem, match) {
          return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1
        }, ATTR: function (elem, match) {
          var name = match[1], result = Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name), value = result + "", type = match[2], check = match[4];
          return result == null ? type === "!=" : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && result !== false : type === "!=" ? value !== check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false
        }, POS: function (elem, match, i, array) {
          var name = match[2], filter = Expr.setFilters[name];
          if (filter) {
            return filter(elem, i, match, array)
          }
        }
      }
    };
    var origPOS = Expr.match.POS;
    for (var type in Expr.match) {
      Expr.match[type] = new RegExp(Expr.match[type].source + /(?![^\[]*\])(?![^\(]*\))/.source);
      Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source)
    }
    var makeArray = function (array, results) {
      array = Array.prototype.slice.call(array, 0);
      if (results) {
        results.push.apply(results, array);
        return results
      }
      return array
    };
    try {
      Array.prototype.slice.call(document.documentElement.childNodes, 0)
    } catch (e) {
      makeArray = function (array, results) {
        var ret = results || [];
        if (toString.call(array) === "[object Array]") {
          Array.prototype.push.apply(ret, array)
        } else {
          if (typeof array.length === "number") {
            for (var i = 0, l = array.length; i < l; i++) {
              ret.push(array[i])
            }
          } else {
            for (var i = 0; array[i]; i++) {
              ret.push(array[i])
            }
          }
        }
        return ret
      }
    }
    var sortOrder;
    if (document.documentElement.compareDocumentPosition) {
      sortOrder = function (a, b) {
        if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
          if (a == b) {
            hasDuplicate = true
          }
          return a.compareDocumentPosition ? -1 : 1
        }
        var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
        if (ret === 0) {
          hasDuplicate = true
        }
        return ret
      }
    } else {
      if ("sourceIndex" in document.documentElement) {
        sortOrder = function (a, b) {
          if (!a.sourceIndex || !b.sourceIndex) {
            if (a == b) {
              hasDuplicate = true
            }
            return a.sourceIndex ? -1 : 1
          }
          var ret = a.sourceIndex - b.sourceIndex;
          if (ret === 0) {
            hasDuplicate = true
          }
          return ret
        }
      } else {
        if (document.createRange) {
          sortOrder = function (a, b) {
            if (!a.ownerDocument || !b.ownerDocument) {
              if (a == b) {
                hasDuplicate = true
              }
              return a.ownerDocument ? -1 : 1
            }
            var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
            aRange.setStart(a, 0);
            aRange.setEnd(a, 0);
            bRange.setStart(b, 0);
            bRange.setEnd(b, 0);
            var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
            if (ret === 0) {
              hasDuplicate = true
            }
            return ret
          }
        }
      }
    }
    function getText(elems) {
      var ret = "", elem;
      for (var i = 0; elems[i]; i++) {
        elem = elems[i];
        if (elem.nodeType === 3 || elem.nodeType === 4) {
          ret += elem.nodeValue
        } else {
          if (elem.nodeType !== 8) {
            ret += getText(elem.childNodes)
          }
        }
      }
      return ret
    }

    (function () {
      var form = document.createElement("div"), id = "script" + (new Date).getTime();
      form.innerHTML = "<a name='" + id + "'/>";
      var root = document.documentElement;
      root.insertBefore(form, root.firstChild);
      if (document.getElementById(id)) {
        Expr.find.ID = function (match, context, isXML) {
          if (typeof context.getElementById !== "undefined" && !isXML) {
            var m = context.getElementById(match[1]);
            return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : []
          }
        };
        Expr.filter.ID = function (elem, match) {
          var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
          return elem.nodeType === 1 && node && node.nodeValue === match
        }
      }
      root.removeChild(form);
      root = form = null
    })();
    (function () {
      var div = document.createElement("div");
      div.appendChild(document.createComment(""));
      if (div.getElementsByTagName("*").length > 0) {
        Expr.find.TAG = function (match, context) {
          var results = context.getElementsByTagName(match[1]);
          if (match[1] === "*") {
            var tmp = [];
            for (var i = 0; results[i]; i++) {
              if (results[i].nodeType === 1) {
                tmp.push(results[i])
              }
            }
            results = tmp
          }
          return results
        }
      }
      div.innerHTML = "<a href='#'></a>";
      if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
        Expr.attrHandle.href = function (elem) {
          return elem.getAttribute("href", 2)
        }
      }
      div = null
    })();
    if (document.querySelectorAll) {
      (function () {
        var oldSizzle = Sizzle, div = document.createElement("div");
        div.innerHTML = "<p class='TEST'></p>";
        if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
          return
        }
        Sizzle = function (query, context, extra, seed) {
          context = context || document;
          if (!seed && context.nodeType === 9 && !isXML(context)) {
            try {
              return makeArray(context.querySelectorAll(query), extra)
            } catch (e) {
            }
          }
          return oldSizzle(query, context, extra, seed)
        };
        for (var prop in oldSizzle) {
          Sizzle[prop] = oldSizzle[prop]
        }
        div = null
      })()
    }
    (function () {
      var div = document.createElement("div");
      div.innerHTML = "<div class='test e'></div><div class='test'></div>";
      if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
        return
      }
      div.lastChild.className = "e";
      if (div.getElementsByClassName("e").length === 1) {
        return
      }
      Expr.order.splice(1, 0, "CLASS");
      Expr.find.CLASS = function (match, context, isXML) {
        if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
          return context.getElementsByClassName(match[1])
        }
      };
      div = null
    })();
    function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
      for (var i = 0, l = checkSet.length; i < l; i++) {
        var elem = checkSet[i];
        if (elem) {
          elem = elem[dir];
          var match = false;
          while (elem) {
            if (elem.sizcache === doneName) {
              match = checkSet[elem.sizset];
              break
            }
            if (elem.nodeType === 1 && !isXML) {
              elem.sizcache = doneName;
              elem.sizset = i
            }
            if (elem.nodeName.toLowerCase() === cur) {
              match = elem;
              break
            }
            elem = elem[dir]
          }
          checkSet[i] = match
        }
      }
    }

    function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
      for (var i = 0, l = checkSet.length; i < l; i++) {
        var elem = checkSet[i];
        if (elem) {
          elem = elem[dir];
          var match = false;
          while (elem) {
            if (elem.sizcache === doneName) {
              match = checkSet[elem.sizset];
              break
            }
            if (elem.nodeType === 1) {
              if (!isXML) {
                elem.sizcache = doneName;
                elem.sizset = i
              }
              if (typeof cur !== "string") {
                if (elem === cur) {
                  match = true;
                  break
                }
              } else {
                if (Sizzle.filter(cur, [elem]).length > 0) {
                  match = elem;
                  break
                }
              }
            }
            elem = elem[dir]
          }
          checkSet[i] = match
        }
      }
    }

    var contains = document.compareDocumentPosition ? function (a, b) {
      return a.compareDocumentPosition(b) & 16
    } : function (a, b) {
      return a !== b && (a.contains ? a.contains(b) : true)
    };
    var isXML = function (elem) {
      var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
      return documentElement ? documentElement.nodeName !== "HTML" : false
    };
    var posProcess = function (selector, context) {
      var tmpSet = [], later = "", match, root = context.nodeType ? [context] : context;
      while ((match = Expr.match.PSEUDO.exec(selector))) {
        later += match[0];
        selector = selector.replace(Expr.match.PSEUDO, "")
      }
      selector = Expr.relative[selector] ? selector + "*" : selector;
      for (var i = 0, l = root.length; i < l; i++) {
        Sizzle(selector, root[i], tmpSet)
      }
      return Sizzle.filter(later, tmpSet)
    };
    return Sizzle
  })();
  /*
   * SWFObject v2.1 <http://code.google.com/p/swfobject/>
   * Copyright (c) 2007-2008 Geoff Stearns, Michael Williams, and Bobby van der Sluis
   * This software is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
   *
   * Modified for inclusion in Shadowbox.js
   */
  S.flash = (function () {
    var swfobject = function () {
      var UNDEF = "undefined", OBJECT = "object", SHOCKWAVE_FLASH = "Shockwave Flash", SHOCKWAVE_FLASH_AX = "ShockwaveFlash.ShockwaveFlash", FLASH_MIME_TYPE = "application/x-shockwave-flash", EXPRESS_INSTALL_ID = "SWFObjectExprInst", win = window, doc = document, nav = navigator, domLoadFnArr = [], regObjArr = [], objIdArr = [], listenersArr = [], script, timer = null, storedAltContent = null, storedAltContentId = null, isDomLoaded = false, isExpressInstallActive = false;
      var ua = function () {
        var w3cdom = typeof doc.getElementById != UNDEF && typeof doc.getElementsByTagName != UNDEF && typeof doc.createElement != UNDEF, playerVersion = [0, 0, 0], d = null;
        if (typeof nav.plugins != UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] == OBJECT) {
          d = nav.plugins[SHOCKWAVE_FLASH].description;
          if (d && !(typeof nav.mimeTypes != UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && !nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) {
            d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
            playerVersion[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10);
            playerVersion[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
            playerVersion[2] = /r/.test(d) ? parseInt(d.replace(/^.*r(.*)$/, "$1"), 10) : 0
          }
        } else {
          if (typeof win.ActiveXObject != UNDEF) {
            var a = null, fp6Crash = false;
            try {
              a = new ActiveXObject(SHOCKWAVE_FLASH_AX + ".7")
            } catch (e) {
              try {
                a = new ActiveXObject(SHOCKWAVE_FLASH_AX + ".6");
                playerVersion = [6, 0, 21];
                a.AllowScriptAccess = "always"
              } catch (e) {
                if (playerVersion[0] == 6) {
                  fp6Crash = true
                }
              }
              if (!fp6Crash) {
                try {
                  a = new ActiveXObject(SHOCKWAVE_FLASH_AX)
                } catch (e) {
                }
              }
            }
            if (!fp6Crash && a) {
              try {
                d = a.GetVariable("$version");
                if (d) {
                  d = d.split(" ")[1].split(",");
                  playerVersion = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)]
                }
              } catch (e) {
              }
            }
          }
        }
        var u = nav.userAgent.toLowerCase(), p = nav.platform.toLowerCase(), webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, ie = false, windows = p ? /win/.test(p) : /win/.test(u), mac = p ? /mac/.test(p) : /mac/.test(u);
        /*@cc_on
         ie = true;
         @if (@_win32)
         windows = true;
         @elif (@_mac)
         mac = true;
         @end
         @*/
        return {w3cdom: w3cdom, pv: playerVersion, webkit: webkit, ie: ie, win: windows, mac: mac}
      }();
      var onDomLoad = function () {
        if (!ua.w3cdom) {
          return
        }
        addDomLoadEvent(main);
        if (ua.ie && ua.win) {
          try {
            doc.write("<script id=__ie_ondomload defer=true src=//:><\/script>");
            script = getElementById("__ie_ondomload");
            if (script) {
              addListener(script, "onreadystatechange", checkReadyState)
            }
          } catch (e) {
          }
        }
        if (ua.webkit && typeof doc.readyState != UNDEF) {
          timer = setInterval(function () {
            if (/loaded|complete/.test(doc.readyState)) {
              callDomLoadFunctions()
            }
          }, 10)
        }
        if (typeof doc.addEventListener != UNDEF) {
          doc.addEventListener("DOMContentLoaded", callDomLoadFunctions, null)
        }
        addLoadEvent(callDomLoadFunctions)
      }();

      function checkReadyState() {
        if (script.readyState == "complete") {
          script.parentNode.removeChild(script);
          callDomLoadFunctions()
        }
      }

      function callDomLoadFunctions() {
        if (isDomLoaded) {
          return
        }
        if (ua.ie && ua.win) {
          var s = createElement("span");
          try {
            var t = doc.getElementsByTagName("body")[0].appendChild(s);
            t.parentNode.removeChild(t)
          } catch (e) {
            return
          }
        }
        isDomLoaded = true;
        if (timer) {
          clearInterval(timer);
          timer = null
        }
        var dl = domLoadFnArr.length;
        for (var i = 0; i < dl; i++) {
          domLoadFnArr[i]()
        }
      }

      function addDomLoadEvent(fn) {
        if (isDomLoaded) {
          fn()
        } else {
          domLoadFnArr[domLoadFnArr.length] = fn
        }
      }

      function addLoadEvent(fn) {
        if (typeof win.addEventListener != UNDEF) {
          win.addEventListener("load", fn, false)
        } else {
          if (typeof doc.addEventListener != UNDEF) {
            doc.addEventListener("load", fn, false)
          } else {
            if (typeof win.attachEvent != UNDEF) {
              addListener(win, "onload", fn)
            } else {
              if (typeof win.onload == "function") {
                var fnOld = win.onload;
                win.onload = function () {
                  fnOld();
                  fn()
                }
              } else {
                win.onload = fn
              }
            }
          }
        }
      }

      function main() {
        var rl = regObjArr.length;
        for (var i = 0; i < rl; i++) {
          var id = regObjArr[i].id;
          if (ua.pv[0] > 0) {
            var obj = getElementById(id);
            if (obj) {
              regObjArr[i].width = obj.getAttribute("width") ? obj.getAttribute("width") : "0";
              regObjArr[i].height = obj.getAttribute("height") ? obj.getAttribute("height") : "0";
              if (hasPlayerVersion(regObjArr[i].swfVersion)) {
                if (ua.webkit && ua.webkit < 312) {
                  fixParams(obj)
                }
                setVisibility(id, true)
              } else {
                if (regObjArr[i].expressInstall && !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac)) {
                  showExpressInstall(regObjArr[i])
                } else {
                  displayAltContent(obj)
                }
              }
            }
          } else {
            setVisibility(id, true)
          }
        }
      }

      function fixParams(obj) {
        var nestedObj = obj.getElementsByTagName(OBJECT)[0];
        if (nestedObj) {
          var e = createElement("embed"), a = nestedObj.attributes;
          if (a) {
            var al = a.length;
            for (var i = 0; i < al; i++) {
              if (a[i].nodeName == "DATA") {
                e.setAttribute("src", a[i].nodeValue)
              } else {
                e.setAttribute(a[i].nodeName, a[i].nodeValue)
              }
            }
          }
          var c = nestedObj.childNodes;
          if (c) {
            var cl = c.length;
            for (var j = 0; j < cl; j++) {
              if (c[j].nodeType == 1 && c[j].nodeName == "PARAM") {
                e.setAttribute(c[j].getAttribute("name"), c[j].getAttribute("value"))
              }
            }
          }
          obj.parentNode.replaceChild(e, obj)
        }
      }

      function showExpressInstall(regObj) {
        isExpressInstallActive = true;
        var obj = getElementById(regObj.id);
        if (obj) {
          if (regObj.altContentId) {
            var ac = getElementById(regObj.altContentId);
            if (ac) {
              storedAltContent = ac;
              storedAltContentId = regObj.altContentId
            }
          } else {
            storedAltContent = abstractAltContent(obj)
          }
          if (!(/%$/.test(regObj.width)) && parseInt(regObj.width, 10) < 310) {
            regObj.width = "310"
          }
          if (!(/%$/.test(regObj.height)) && parseInt(regObj.height, 10) < 137) {
            regObj.height = "137"
          }
          doc.title = doc.title.slice(0, 47) + " - Flash Player Installation";
          var pt = ua.ie && ua.win ? "ActiveX" : "PlugIn", dt = doc.title, fv = "MMredirectURL=" + win.location + "&MMplayerType=" + pt + "&MMdoctitle=" + dt, replaceId = regObj.id;
          if (ua.ie && ua.win && obj.readyState != 4) {
            var newObj = createElement("div");
            replaceId += "SWFObjectNew";
            newObj.setAttribute("id", replaceId);
            obj.parentNode.insertBefore(newObj, obj);
            obj.style.display = "none";
            var fn = function () {
              obj.parentNode.removeChild(obj)
            };
            addListener(win, "onload", fn)
          }
          createSWF({
            data: regObj.expressInstall,
            id: EXPRESS_INSTALL_ID,
            width: regObj.width,
            height: regObj.height
          }, {flashvars: fv}, replaceId)
        }
      }

      function displayAltContent(obj) {
        if (ua.ie && ua.win && obj.readyState != 4) {
          var el = createElement("div");
          obj.parentNode.insertBefore(el, obj);
          el.parentNode.replaceChild(abstractAltContent(obj), el);
          obj.style.display = "none";
          var fn = function () {
            obj.parentNode.removeChild(obj)
          };
          addListener(win, "onload", fn)
        } else {
          obj.parentNode.replaceChild(abstractAltContent(obj), obj)
        }
      }

      function abstractAltContent(obj) {
        var ac = createElement("div");
        if (ua.win && ua.ie) {
          ac.innerHTML = obj.innerHTML
        } else {
          var nestedObj = obj.getElementsByTagName(OBJECT)[0];
          if (nestedObj) {
            var c = nestedObj.childNodes;
            if (c) {
              var cl = c.length;
              for (var i = 0; i < cl; i++) {
                if (!(c[i].nodeType == 1 && c[i].nodeName == "PARAM") && !(c[i].nodeType == 8)) {
                  ac.appendChild(c[i].cloneNode(true))
                }
              }
            }
          }
        }
        return ac
      }

      function createSWF(attObj, parObj, id) {
        var r, el = getElementById(id);
        if (el) {
          if (typeof attObj.id == UNDEF) {
            attObj.id = id
          }
          if (ua.ie && ua.win) {
            var att = "";
            for (var i in attObj) {
              if (attObj[i] != Object.prototype[i]) {
                if (i.toLowerCase() == "data") {
                  parObj.movie = attObj[i]
                } else {
                  if (i.toLowerCase() == "styleclass") {
                    att += ' class="' + attObj[i] + '"'
                  } else {
                    if (i.toLowerCase() != "classid") {
                      att += " " + i + '="' + attObj[i] + '"'
                    }
                  }
                }
              }
            }
            var par = "";
            for (var j in parObj) {
              if (parObj[j] != Object.prototype[j]) {
                par += '<param name="' + j + '" value="' + parObj[j] + '" />'
              }
            }
            el.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + att + ">" + par + "</object>";
            objIdArr[objIdArr.length] = attObj.id;
            r = getElementById(attObj.id)
          } else {
            if (ua.webkit && ua.webkit < 312) {
              var e = createElement("embed");
              e.setAttribute("type", FLASH_MIME_TYPE);
              for (var k in attObj) {
                if (attObj[k] != Object.prototype[k]) {
                  if (k.toLowerCase() == "data") {
                    e.setAttribute("src", attObj[k])
                  } else {
                    if (k.toLowerCase() == "styleclass") {
                      e.setAttribute("class", attObj[k])
                    } else {
                      if (k.toLowerCase() != "classid") {
                        e.setAttribute(k, attObj[k])
                      }
                    }
                  }
                }
              }
              for (var l in parObj) {
                if (parObj[l] != Object.prototype[l]) {
                  if (l.toLowerCase() != "movie") {
                    e.setAttribute(l, parObj[l])
                  }
                }
              }
              el.parentNode.replaceChild(e, el);
              r = e
            } else {
              var o = createElement(OBJECT);
              o.setAttribute("type", FLASH_MIME_TYPE);
              for (var m in attObj) {
                if (attObj[m] != Object.prototype[m]) {
                  if (m.toLowerCase() == "styleclass") {
                    o.setAttribute("class", attObj[m])
                  } else {
                    if (m.toLowerCase() != "classid") {
                      o.setAttribute(m, attObj[m])
                    }
                  }
                }
              }
              for (var n in parObj) {
                if (parObj[n] != Object.prototype[n] && n.toLowerCase() != "movie") {
                  createObjParam(o, n, parObj[n])
                }
              }
              el.parentNode.replaceChild(o, el);
              r = o
            }
          }
        }
        return r
      }

      function createObjParam(el, pName, pValue) {
        var p = createElement("param");
        p.setAttribute("name", pName);
        p.setAttribute("value", pValue);
        el.appendChild(p)
      }

      function removeSWF(id) {
        var obj = getElementById(id);
        if (obj && (obj.nodeName == "OBJECT" || obj.nodeName == "EMBED")) {
          if (ua.ie && ua.win) {
            if (obj.readyState == 4) {
              removeObjectInIE(id)
            } else {
              win.attachEvent("onload", function () {
                removeObjectInIE(id)
              })
            }
          } else {
            obj.parentNode.removeChild(obj)
          }
        }
      }

      function removeObjectInIE(id) {
        var obj = getElementById(id);
        if (obj) {
          for (var i in obj) {
            if (typeof obj[i] == "function") {
              obj[i] = null
            }
          }
          obj.parentNode.removeChild(obj)
        }
      }

      function getElementById(id) {
        var el = null;
        try {
          el = doc.getElementById(id)
        } catch (e) {
        }
        return el
      }

      function createElement(el) {
        return doc.createElement(el)
      }

      function addListener(target, eventType, fn) {
        target.attachEvent(eventType, fn);
        listenersArr[listenersArr.length] = [target, eventType, fn]
      }

      function hasPlayerVersion(rv) {
        var pv = ua.pv, v = rv.split(".");
        v[0] = parseInt(v[0], 10);
        v[1] = parseInt(v[1], 10) || 0;
        v[2] = parseInt(v[2], 10) || 0;
        return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false
      }

      function createCSS(sel, decl) {
        if (ua.ie && ua.mac) {
          return
        }
        var h = doc.getElementsByTagName("head")[0], s = createElement("style");
        s.setAttribute("type", "text/css");
        s.setAttribute("media", "screen");
        if (!(ua.ie && ua.win) && typeof doc.createTextNode != UNDEF) {
          s.appendChild(doc.createTextNode(sel + " {" + decl + "}"))
        }
        h.appendChild(s);
        if (ua.ie && ua.win && typeof doc.styleSheets != UNDEF && doc.styleSheets.length > 0) {
          var ls = doc.styleSheets[doc.styleSheets.length - 1];
          if (typeof ls.addRule == OBJECT) {
            ls.addRule(sel, decl)
          }
        }
      }

      function setVisibility(id, isVisible) {
        var v = isVisible ? "visible" : "hidden";
        if (isDomLoaded && getElementById(id)) {
          getElementById(id).style.visibility = v
        } else {
          createCSS("#" + id, "visibility:" + v)
        }
      }

      function urlEncodeIfNecessary(s) {
        var regex = /[\\\"<>\.;]/;
        var hasBadChars = regex.exec(s) != null;
        return hasBadChars ? encodeURIComponent(s) : s
      }

      var cleanup = function () {
        if (ua.ie && ua.win) {
          window.attachEvent("onunload", function () {
            var ll = listenersArr.length;
            for (var i = 0; i < ll; i++) {
              listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2])
            }
            var il = objIdArr.length;
            for (var j = 0; j < il; j++) {
              removeSWF(objIdArr[j])
            }
            for (var k in ua) {
              ua[k] = null
            }
            ua = null;
            for (var l in swfobject) {
              swfobject[l] = null
            }
            swfobject = null
          })
        }
      }();
      return {
        registerObject: function (objectIdStr, swfVersionStr, xiSwfUrlStr) {
          if (!ua.w3cdom || !objectIdStr || !swfVersionStr) {
            return
          }
          var regObj = {};
          regObj.id = objectIdStr;
          regObj.swfVersion = swfVersionStr;
          regObj.expressInstall = xiSwfUrlStr ? xiSwfUrlStr : false;
          regObjArr[regObjArr.length] = regObj;
          setVisibility(objectIdStr, false)
        },
        getObjectById: function (objectIdStr) {
          var r = null;
          if (ua.w3cdom) {
            var o = getElementById(objectIdStr);
            if (o) {
              var n = o.getElementsByTagName(OBJECT)[0];
              if (!n || (n && typeof o.SetVariable != UNDEF)) {
                r = o
              } else {
                if (typeof n.SetVariable != UNDEF) {
                  r = n
                }
              }
            }
          }
          return r
        },
        embedSWF: function (swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj) {
          if (!ua.w3cdom || !swfUrlStr || !replaceElemIdStr || !widthStr || !heightStr || !swfVersionStr) {
            return
          }
          widthStr += "";
          heightStr += "";
          if (hasPlayerVersion(swfVersionStr)) {
            setVisibility(replaceElemIdStr, false);
            var att = {};
            if (attObj && typeof attObj === OBJECT) {
              for (var i in attObj) {
                if (attObj[i] != Object.prototype[i]) {
                  att[i] = attObj[i]
                }
              }
            }
            att.data = swfUrlStr;
            att.width = widthStr;
            att.height = heightStr;
            var par = {};
            if (parObj && typeof parObj === OBJECT) {
              for (var j in parObj) {
                if (parObj[j] != Object.prototype[j]) {
                  par[j] = parObj[j]
                }
              }
            }
            if (flashvarsObj && typeof flashvarsObj === OBJECT) {
              for (var k in flashvarsObj) {
                if (flashvarsObj[k] != Object.prototype[k]) {
                  if (typeof par.flashvars != UNDEF) {
                    par.flashvars += "&" + k + "=" + flashvarsObj[k]
                  } else {
                    par.flashvars = k + "=" + flashvarsObj[k]
                  }
                }
              }
            }
            addDomLoadEvent(function () {
              createSWF(att, par, replaceElemIdStr);
              if (att.id == replaceElemIdStr) {
                setVisibility(replaceElemIdStr, true)
              }
            })
          } else {
            if (xiSwfUrlStr && !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac)) {
              isExpressInstallActive = true;
              setVisibility(replaceElemIdStr, false);
              addDomLoadEvent(function () {
                var regObj = {};
                regObj.id = regObj.altContentId = replaceElemIdStr;
                regObj.width = widthStr;
                regObj.height = heightStr;
                regObj.expressInstall = xiSwfUrlStr;
                showExpressInstall(regObj)
              })
            }
          }
        },
        getFlashPlayerVersion: function () {
          return {major: ua.pv[0], minor: ua.pv[1], release: ua.pv[2]}
        },
        hasFlashPlayerVersion: hasPlayerVersion,
        createSWF: function (attObj, parObj, replaceElemIdStr) {
          if (ua.w3cdom) {
            return createSWF(attObj, parObj, replaceElemIdStr)
          } else {
            return undefined
          }
        },
        removeSWF: function (objElemIdStr) {
          if (ua.w3cdom) {
            removeSWF(objElemIdStr)
          }
        },
        createCSS: function (sel, decl) {
          if (ua.w3cdom) {
            createCSS(sel, decl)
          }
        },
        addDomLoadEvent: addDomLoadEvent,
        addLoadEvent: addLoadEvent,
        getQueryParamValue: function (param) {
          var q = doc.location.search || doc.location.hash;
          if (param == null) {
            return urlEncodeIfNecessary(q)
          }
          if (q) {
            var pairs = q.substring(1).split("&");
            for (var i = 0; i < pairs.length; i++) {
              if (pairs[i].substring(0, pairs[i].indexOf("=")) == param) {
                return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf("=") + 1)))
              }
            }
          }
          return ""
        },
        expressInstallCallback: function () {
          if (isExpressInstallActive && storedAltContent) {
            var obj = getElementById(EXPRESS_INSTALL_ID);
            if (obj) {
              obj.parentNode.replaceChild(storedAltContent, obj);
              if (storedAltContentId) {
                setVisibility(storedAltContentId, true);
                if (ua.ie && ua.win) {
                  storedAltContent.style.display = "block"
                }
              }
              storedAltContent = null;
              storedAltContentId = null;
              isExpressInstallActive = false
            }
          }
        }
      }
    }();
    return swfobject
  })();
  S.lang = {
    code: "en",
    of: "of",
    loading: "loading",
    cancel: "Cancel",
    next: "Next",
    previous: "Previous",
    play: "Play",
    pause: "Pause",
    close: "Close",
    errors: {
      single: 'You must install the <a href="{0}">{1}</a> browser plugin to view this content.',
      shared: 'You must install both the <a href="{0}">{1}</a> and <a href="{2}">{3}</a> browser plugins to view this content.',
      either: 'You must install either the <a href="{0}">{1}</a> or the <a href="{2}">{3}</a> browser plugin to view this content.'
    }
  };
  var jwControllerHeight = 20;
  S.flv = function (obj, id) {
    this.obj = obj;
    this.id = id;
    this.height = obj.height ? parseInt(obj.height, 10) : 300;
    if (S.options.showMovieControls) {
      this.height += jwControllerHeight
    }
    this.width = obj.width ? parseInt(obj.width, 10) : 300
  };
  S.flv.ext = ["flv", "m4v"];
  S.flv.prototype = {
    append: function (body, dims) {
      var tmp = document.createElement("div");
      tmp.id = this.id;
      body.appendChild(tmp);
      var height = dims.innerHeight, width = dims.innerWidth, swf = S.path + "player.swf", version = S.options.flashVersion, express = S.path + "expressInstall.swf", flashvars = apply({
        file: this.obj.content,
        height: height,
        width: width,
        autostart: (S.options.autoplayMovies ? "true" : "false"),
        controlbar: (S.options.showMovieControls ? "bottom" : "none"),
        backcolor: "0x000000",
        frontcolor: "0xCCCCCC",
        lightcolor: "0x557722"
      }, S.options.flashVars), params = S.options.flashParams;
      S.flash.embedSWF(swf, this.id, width, height, version, express, flashvars, params)
    }, remove: function () {
      S.flash.expressInstallCallback();
      S.flash.removeSWF(this.id)
    }, onWindowResize: function () {
      var dims = S.dimensions, el = get(this.id);
      el.height = dims.innerHeight;
      el.width = dims.innerWidth
    }
  };
  S.html = function (obj, id) {
    this.obj = obj;
    this.id = id;
    this.height = obj.height ? parseInt(obj.height, 10) : 300;
    this.width = obj.width ? parseInt(obj.width, 10) : 500
  };
  S.html.prototype = {
    append: function (body, dims) {
      var div = document.createElement("div");
      div.id = this.id;
      div.className = "html";
      div.innerHTML = this.obj.content;
      body.appendChild(div)
    }, remove: function () {
      var el = get(this.id);
      if (el) {
        remove(el)
      }
    }
  };
  S.iframe = function (obj, id) {
    this.obj = obj;
    this.id = id;
    var overlay = get("sb-overlay");
    this.height = obj.height ? parseInt(obj.height, 10) : overlay.offsetHeight;
    this.width = obj.width ? parseInt(obj.width, 10) : overlay.offsetWidth
  };
  S.iframe.prototype = {
    append: function (body, dims) {
      var html = '<iframe id="' + this.id + '" name="' + this.id + '" height="100%" width="100%" frameborder="0" marginwidth="0" marginheight="0" style="visibility:hidden" onload="this.style.visibility=\'visible\'" scrolling="auto"';
      if (S.isIE) {
        html += ' allowtransparency="true"';
        if (S.isIE6) {
          html += " src=\"javascript:false;document.write('');\""
        }
      }
      html += "></iframe>";
      body.innerHTML = html
    }, remove: function () {
      var el = get(this.id);
      if (el) {
        remove(el);
        if (S.isGecko) {
          delete window.frames[this.id]
        }
      }
    }, onLoad: function () {
      var win = S.isIE ? get(this.id).contentWindow : window.frames[this.id];
      win.location.href = this.obj.content
    }
  };
  var pre, proxyId = "sb-drag-proxy", dragData, dragProxy, dragTarget;

  function resetDrag() {
    dragData = {x: 0, y: 0, startX: null, startY: null}
  }

  function updateProxy() {
    var dims = S.dimensions;
    apply(dragProxy.style, {height: dims.innerHeight + "px", width: dims.innerWidth + "px"})
  }

  function enableDrag() {
    resetDrag();
    var style = ["position:absolute", "cursor:" + (S.isGecko ? "-moz-grab" : "move"), "background-color:" + (S.isIE ? "#fff;filter:alpha(opacity=0)" : "transparent")].join(";");
    S.appendHTML(S.skin.body, '<div id="' + proxyId + '" style="' + style + '"></div>');
    dragProxy = get(proxyId);
    updateProxy();
    addEvent(dragProxy, "mousedown", startDrag)
  }

  function disableDrag() {
    if (dragProxy) {
      removeEvent(dragProxy, "mousedown", startDrag);
      remove(dragProxy);
      dragProxy = null
    }
    dragTarget = null
  }

  function startDrag(e) {
    preventDefault(e);
    var xy = getPageXY(e);
    dragData.startX = xy[0];
    dragData.startY = xy[1];
    dragTarget = get(S.player.id);
    addEvent(document, "mousemove", positionDrag);
    addEvent(document, "mouseup", endDrag);
    if (S.isGecko) {
      dragProxy.style.cursor = "-moz-grabbing"
    }
  }

  function positionDrag(e) {
    var player = S.player, dims = S.dimensions, xy = getPageXY(e);
    var moveX = xy[0] - dragData.startX;
    dragData.startX += moveX;
    dragData.x = Math.max(Math.min(0, dragData.x + moveX), dims.innerWidth - player.width);
    var moveY = xy[1] - dragData.startY;
    dragData.startY += moveY;
    dragData.y = Math.max(Math.min(0, dragData.y + moveY), dims.innerHeight - player.height);
    apply(dragTarget.style, {left: dragData.x + "px", top: dragData.y + "px"})
  }

  function endDrag() {
    removeEvent(document, "mousemove", positionDrag);
    removeEvent(document, "mouseup", endDrag);
    if (S.isGecko) {
      dragProxy.style.cursor = "-moz-grab"
    }
  }

  S.img = function (obj, id) {
    this.obj = obj;
    this.id = id;
    this.ready = false;
    var self = this;
    pre = new Image();
    pre.onload = function () {
      self.height = obj.height ? parseInt(obj.height, 10) : pre.height;
      self.width = obj.width ? parseInt(obj.width, 10) : pre.width;
      self.ready = true;
      pre.onload = null;
      pre = null
    };
    pre.src = obj.content
  };
  S.img.ext = ["bmp", "gif", "jpg", "jpeg", "png"];
  S.img.prototype = {
    append: function (body, dims) {
      var img = document.createElement("img");
      img.id = this.id;
      img.src = this.obj.content;
      img.style.position = "absolute";
      var height, width;
      if (dims.oversized && S.options.handleOversize == "resize") {
        height = dims.innerHeight;
        width = dims.innerWidth
      } else {
        height = this.height;
        width = this.width
      }
      img.setAttribute("height", height);
      img.setAttribute("width", width);
      body.appendChild(img)
    }, remove: function () {
      var el = get(this.id);
      if (el) {
        remove(el)
      }
      disableDrag();
      if (pre) {
        pre.onload = null;
        pre = null
      }
    }, onLoad: function () {
      var dims = S.dimensions;
      if (dims.oversized && S.options.handleOversize == "drag") {
        enableDrag()
      }
    }, onWindowResize: function () {
      var dims = S.dimensions;
      switch (S.options.handleOversize) {
        case"resize":
          var el = get(this.id);
          el.height = dims.innerHeight;
          el.width = dims.innerWidth;
          break;
        case"drag":
          if (dragTarget) {
            var top = parseInt(S.getStyle(dragTarget, "top")), left = parseInt(S.getStyle(dragTarget, "left"));
            if (top + this.height < dims.innerHeight) {
              dragTarget.style.top = dims.innerHeight - this.height + "px"
            }
            if (left + this.width < dims.innerWidth) {
              dragTarget.style.left = dims.innerWidth - this.width + "px"
            }
            updateProxy()
          }
          break
      }
    }
  };
  var qtControllerHeight = 16;
  S.qt = function (obj, id) {
    this.obj = obj;
    this.id = id;
    this.height = obj.height ? parseInt(obj.height, 10) : 300;
    if (S.options.showMovieControls) {
      this.height += qtControllerHeight
    }
    this.width = obj.width ? parseInt(obj.width, 10) : 300
  };
  S.qt.ext = ["dv", "mov", "moov", "movie", "mp4", "avi", "mpg", "mpeg"];
  S.qt.prototype = {
    append: function (body, dims) {
      var opt = S.options, autoplay = String(opt.autoplayMovies), controls = String(opt.showMovieControls);
      var html = "<object", movie = {
        id: this.id,
        name: this.id,
        height: this.height,
        width: this.width,
        kioskmode: "true"
      };
      if (S.isIE) {
        movie.classid = "clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B";
        movie.codebase = "http://www.apple.com/qtactivex/qtplugin.cab#version=6,0,2,0"
      } else {
        movie.type = "video/quicktime";
        movie.data = this.obj.content
      }
      for (var m in movie) {
        html += " " + m + '="' + movie[m] + '"'
      }
      html += ">";
      var params = {src: this.obj.content, scale: "aspect", controller: controls, autoplay: autoplay};
      for (var p in params) {
        html += '<param name="' + p + '" value="' + params[p] + '">'
      }
      html += "</object>";
      body.innerHTML = html
    }, remove: function () {
      try {
        document[this.id].Stop()
      } catch (e) {
      }
      var el = get(this.id);
      if (el) {
        remove(el)
      }
    }
  };
  S.swf = function (obj, id) {
    this.obj = obj;
    this.id = id;
    this.height = obj.height ? parseInt(obj.height, 10) : 300;
    this.width = obj.width ? parseInt(obj.width, 10) : 300
  };
  S.swf.ext = ["swf"];
  S.swf.prototype = {
    append: function (body, dims) {
      var tmp = document.createElement("div");
      tmp.id = this.id;
      body.appendChild(tmp);
      var height = dims.innerHeight, width = dims.innerWidth, swf = this.obj.content, version = S.options.flashVersion, express = S.path + "expressInstall.swf", flashvars = S.options.flashVars, params = S.options.flashParams;
      S.flash.embedSWF(swf, this.id, width, height, version, express, flashvars, params)
    }, remove: function () {
      S.flash.expressInstallCallback();
      S.flash.removeSWF(this.id)
    }, onWindowResize: function () {
      var dims = S.dimensions, el = get(this.id);
      el.height = dims.innerHeight;
      el.width = dims.innerWidth
    }
  };
  var wmpControllerHeight = (S.isIE ? 70 : 45);
  S.wmp = function (obj, id) {
    this.obj = obj;
    this.id = id;
    this.height = obj.height ? parseInt(obj.height, 10) : 300;
    if (S.options.showMovieControls) {
      this.height += wmpControllerHeight
    }
    this.width = obj.width ? parseInt(obj.width, 10) : 300
  };
  S.wmp.ext = ["asf", "avi", "mpg", "mpeg", "wm", "wmv"];
  S.wmp.prototype = {
    append: function (body, dims) {
      var opt = S.options, autoplay = opt.autoplayMovies ? 1 : 0;
      var movie = '<object id="' + this.id + '" name="' + this.id + '" height="' + this.height + '" width="' + this.width + '"', params = {autostart: opt.autoplayMovies ? 1 : 0};
      if (S.isIE) {
        movie += ' classid="clsid:6BF52A52-394A-11d3-B153-00C04F79FAA6"';
        params.url = this.obj.content;
        params.uimode = opt.showMovieControls ? "full" : "none"
      } else {
        movie += ' type="video/x-ms-wmv"';
        movie += ' data="' + this.obj.content + '"';
        params.showcontrols = opt.showMovieControls ? 1 : 0
      }
      movie += ">";
      for (var p in params) {
        movie += '<param name="' + p + '" value="' + params[p] + '">'
      }
      movie += "</object>";
      body.innerHTML = movie
    }, remove: function () {
      if (S.isIE) {
        try {
          window[this.id].controls.stop();
          window[this.id].URL = "movie" + now() + ".wmv";
          window[this.id] = function () {
          }
        } catch (e) {
        }
      }
      var el = get(this.id);
      if (el) {
        setTimeout(function () {
          remove(el)
        }, 10)
      }
    }
  };
  var overlayOn = false, visibilityCache = [], pngIds = ["sb-nav-close", "sb-nav-next", "sb-nav-play", "sb-nav-pause", "sb-nav-previous"], container, overlay, wrapper, doWindowResize = true;

  function animate(el, property, to, duration, callback) {
    var isOpacity = (property == "opacity"), anim = isOpacity ? S.setOpacity : function (el, value) {
      el.style[property] = "" + value + "px"
    };
    if (duration == 0 || (!isOpacity && !S.options.animate) || (isOpacity && !S.options.animateFade)) {
      anim(el, to);
      if (callback) {
        callback()
      }
      return
    }
    var from = parseFloat(S.getStyle(el, property)) || 0;
    var delta = to - from;
    if (delta == 0) {
      if (callback) {
        callback()
      }
      return
    }
    duration *= 1000;
    var begin = now(), ease = S.ease, end = begin + duration, time;
    var interval = setInterval(function () {
      time = now();
      if (time >= end) {
        clearInterval(interval);
        interval = null;
        anim(el, to);
        if (callback) {
          callback()
        }
      } else {
        anim(el, from + ease((time - begin) / duration) * delta)
      }
    }, 10)
  }

  function setSize() {
    container.style.height = S.getWindowSize("Height") + "px";
    container.style.width = S.getWindowSize("Width") + "px"
  }

  function setPosition() {
    container.style.top = document.documentElement.scrollTop + "px";
    container.style.left = document.documentElement.scrollLeft + "px"
  }

  function toggleTroubleElements(on) {
    if (on) {
      each(visibilityCache, function (i, el) {
        el[0].style.visibility = el[1] || ""
      })
    } else {
      visibilityCache = [];
      each(S.options.troubleElements, function (i, tag) {
        each(document.getElementsByTagName(tag), function (j, el) {
          visibilityCache.push([el, el.style.visibility]);
          el.style.visibility = "hidden"
        })
      })
    }
  }

  function toggleNav(id, on) {
    var el = get("sb-nav-" + id);
    if (el) {
      el.style.display = on ? "" : "none"
    }
  }

  function toggleLoading(on, callback) {
    var loading = get("sb-loading"), playerName = S.getCurrent().player, anim = (playerName == "img" || playerName == "html");
    if (on) {
      S.setOpacity(loading, 0);
      loading.style.display = "block";
      var wrapped = function () {
        S.clearOpacity(loading);
        if (callback) {
          callback()
        }
      };
      if (anim) {
        animate(loading, "opacity", 1, S.options.fadeDuration, wrapped)
      } else {
        wrapped()
      }
    } else {
      var wrapped = function () {
        loading.style.display = "none";
        S.clearOpacity(loading);
        if (callback) {
          callback()
        }
      };
      if (anim) {
        animate(loading, "opacity", 0, S.options.fadeDuration, wrapped)
      } else {
        wrapped()
      }
    }
  }

  function buildBars(callback) {
    var obj = S.getCurrent();
    get("sb-title-inner").innerHTML = obj.title || "";
    var close, next, play, pause, previous;
    if (S.options.displayNav) {
      close = true;
      var len = S.gallery.length;
      if (len > 1) {
        if (S.options.continuous) {
          next = previous = true
        } else {
          next = (len - 1) > S.current;
          previous = S.current > 0
        }
      }
      if (S.options.slideshowDelay > 0 && S.hasNext()) {
        pause = !S.isPaused();
        play = !pause
      }
    } else {
      close = next = play = pause = previous = false
    }
    toggleNav("close", close);
    toggleNav("next", next);
    toggleNav("play", play);
    toggleNav("pause", pause);
    toggleNav("previous", previous);
    var counter = "";
    if (S.options.displayCounter && S.gallery.length > 1) {
      var len = S.gallery.length;
      if (S.options.counterType == "skip") {
        var i = 0, end = len, limit = parseInt(S.options.counterLimit) || 0;
        if (limit < len && limit > 2) {
          var h = Math.floor(limit / 2);
          i = S.current - h;
          if (i < 0) {
            i += len
          }
          end = S.current + (limit - h);
          if (end > len) {
            end -= len
          }
        }
        while (i != end) {
          if (i == len) {
            i = 0
          }
          counter += '<a onclick="Shadowbox.change(' + i + ');"';
          if (i == S.current) {
            counter += ' class="sb-counter-current"'
          }
          counter += ">" + (++i) + "</a>"
        }
      } else {
        counter = [S.current + 1, S.lang.of, len].join(" ")
      }
    }
    get("sb-counter").innerHTML = counter;
    callback()
  }

  function showBars(callback) {
    var titleInner = get("sb-title-inner"), infoInner = get("sb-info-inner"), duration = 0.35;
    titleInner.style.visibility = infoInner.style.visibility = "";
    if (titleInner.innerHTML != "") {
      animate(titleInner, "marginTop", 0, duration)
    }
    animate(infoInner, "marginTop", 0, duration, callback)
  }

  function hideBars(anim, callback) {
    var title = get("sb-title"), info = get("sb-info"), titleHeight = title.offsetHeight, infoHeight = info.offsetHeight, titleInner = get("sb-title-inner"), infoInner = get("sb-info-inner"), duration = (anim ? 0.35 : 0);
    animate(titleInner, "marginTop", titleHeight, duration);
    animate(infoInner, "marginTop", infoHeight * -1, duration, function () {
      titleInner.style.visibility = infoInner.style.visibility = "hidden";
      callback()
    })
  }

  function adjustHeight(height, top, anim, callback) {
    var wrapperInner = get("sb-wrapper-inner"), duration = (anim ? S.options.resizeDuration : 0);
    animate(wrapper, "top", top, duration);
    animate(wrapperInner, "height", height, duration, callback)
  }

  function adjustWidth(width, left, anim, callback) {
    var duration = (anim ? S.options.resizeDuration : 0);
    animate(wrapper, "left", left, duration);
    animate(wrapper, "width", width, duration, callback)
  }

  function setDimensions(height, width) {
    var bodyInner = get("sb-body-inner"), height = parseInt(height), width = parseInt(width), topBottom = wrapper.offsetHeight - bodyInner.offsetHeight, leftRight = wrapper.offsetWidth - bodyInner.offsetWidth, maxHeight = overlay.offsetHeight, maxWidth = overlay.offsetWidth, padding = parseInt(S.options.viewportPadding) || 20, preserveAspect = (S.player && S.options.handleOversize != "drag");
    return S.setDimensions(height, width, maxHeight, maxWidth, topBottom, leftRight, padding, preserveAspect)
  }

  var K = {};
  K.markup = '<div id="sb-container"><div id="sb-overlay"></div><div id="sb-wrapper"><div id="sb-title"><div id="sb-title-inner"></div></div><div id="sb-wrapper-inner"><div id="sb-body"><div id="sb-body-inner"></div><div id="sb-loading"><div id="sb-loading-inner"><span>{loading}</span></div></div></div></div><div id="sb-info"><div id="sb-info-inner"><div id="sb-counter"></div><div id="sb-nav"><a id="sb-nav-close" title="{close}" onclick="Shadowbox.close()"></a><a id="sb-nav-next" title="{next}" onclick="Shadowbox.next()"></a><a id="sb-nav-play" title="{play}" onclick="Shadowbox.play()"></a><a id="sb-nav-pause" title="{pause}" onclick="Shadowbox.pause()"></a><a id="sb-nav-previous" title="{previous}" onclick="Shadowbox.previous()"></a><a id="sb-nav-download" title="Download image" download="" onclick="Shadowbox.download()"></a></div></div></div></div></div>';
  K.options = {
    animSequence: "sync",
    counterLimit: 10,
    counterType: "default",
    displayCounter: true,
    displayNav: true,
    fadeDuration: 0.35,
    initialHeight: 160,
    initialWidth: 320,
    modal: false,
    overlayColor: "#000",
    overlayOpacity: 0.5,
    resizeDuration: 0.35,
    showOverlay: true,
    troubleElements: ["select", "object", "embed", "canvas"]
  };
  K.init = function () {
    S.appendHTML(document.body, sprintf(K.markup, S.lang));
    K.body = get("sb-body-inner");
    container = get("sb-container");
    overlay = get("sb-overlay");
    wrapper = get("sb-wrapper");
    if (!supportsFixed) {
      container.style.position = "absolute"
    }
    if (!supportsOpacity) {
      var el, m, re = /url\("(.*\.png)"\)/;
      each(pngIds, function (i, id) {
        el = get(id);
        if (el) {
          m = S.getStyle(el, "backgroundImage").match(re);
          if (m) {
            el.style.backgroundImage = "none";
            el.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true,src=" + m[1] + ",sizingMethod=scale);"
          }
        }
      })
    }
    var timer;
    addEvent(window, "resize", function () {
      if (timer) {
        clearTimeout(timer);
        timer = null
      }
      if (open) {
        timer = setTimeout(K.onWindowResize, 10)
      }
    })
  };
  K.onOpen = function (obj, callback) {
    doWindowResize = false;
    container.style.display = "block";
    setSize();
    var dims = setDimensions(S.options.initialHeight, S.options.initialWidth);
    adjustHeight(dims.innerHeight, dims.top);
    adjustWidth(dims.width, dims.left);
    if (S.options.showOverlay) {
      overlay.style.backgroundColor = S.options.overlayColor;
      S.setOpacity(overlay, 0);
      if (!S.options.modal) {
        addEvent(overlay, "click", S.close)
      }
      overlayOn = true
    }
    if (!supportsFixed) {
      setPosition();
      addEvent(window, "scroll", setPosition)
    }
    toggleTroubleElements();
    container.style.visibility = "visible";
    if (overlayOn) {
      animate(overlay, "opacity", S.options.overlayOpacity, S.options.fadeDuration, callback)
    } else {
      callback()
    }
  };
  K.onLoad = function (changing, callback) {
    toggleLoading(true);
    while (K.body.firstChild) {
      remove(K.body.firstChild)
    }
    hideBars(changing, function () {
      if (!open) {
        return
      }
      if (!changing) {
        wrapper.style.visibility = "visible"
      }
      buildBars(callback)
    })
  };
  K.onReady = function (callback) {
    if (!open) {
      return
    }
    var player = S.player, dims = setDimensions(player.height, player.width);
    var wrapped = function () {
      showBars(callback)
    };
    switch (S.options.animSequence) {
      case"hw":
        adjustHeight(dims.innerHeight, dims.top, true, function () {
          adjustWidth(dims.width, dims.left, true, wrapped)
        });
        break;
      case"wh":
        adjustWidth(dims.width, dims.left, true, function () {
          adjustHeight(dims.innerHeight, dims.top, true, wrapped)
        });
        break;
      default:
        adjustWidth(dims.width, dims.left, true);
        adjustHeight(dims.innerHeight, dims.top, true, wrapped)
    }
  };
  K.onShow = function (callback) {
    toggleLoading(false, callback);
    doWindowResize = true
  };
  K.onClose = function () {
    if (!supportsFixed) {
      removeEvent(window, "scroll", setPosition)
    }
    removeEvent(overlay, "click", S.close);
    wrapper.style.visibility = "hidden";
    var callback = function () {
      container.style.visibility = "hidden";
      container.style.display = "none";
      toggleTroubleElements(true)
    };
    if (overlayOn) {
      animate(overlay, "opacity", 0, S.options.fadeDuration, callback)
    } else {
      callback()
    }
  };
  K.onPlay = function () {
    toggleNav("play", false);
    toggleNav("pause", true)
  };
  K.onPause = function () {
    toggleNav("pause", false);
    toggleNav("play", true)
  };
  K.onWindowResize = function () {
    if (!doWindowResize) {
      return
    }
    setSize();
    var player = S.player, dims = setDimensions(player.height, player.width);
    adjustWidth(dims.width, dims.left);
    adjustHeight(dims.innerHeight, dims.top);
    if (player.onWindowResize) {
      player.onWindowResize()
    }
  };
  S.skin = K;
  window.Shadowbox = S
})(window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/crabapple.js */
/**
 * Creates $Crabapple global object which will hold all crabapple core javascript
 */
(function ($) {
	$Crabapple = $.namespace('Crabapple');
}) (jQuery);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/crabapple/class.js */
/**
 * Crabapple Class class is a base parent class for all classes
 * //TODO DOC all features of this class
 */
(function($){
	$Crabapple.Class = function(){};

	/**
	 * Type hierarchy class.
	 * 
	 * This class helps us navigate through type hierarchy.
	 * 
	 * @class
	 * @memberOf $Crabapple.Class
	 * @param type
	 */
	var Hierarchy = $Crabapple.Class.Hierarchy = function(/** Function */type){
		this.type = type;
	}
	/**
	 * @param type
	 * @returns Fluent interface
	 */
	Hierarchy.prototype.set = function(/** Function */type)/** Hierarchy */{
		this.type = type;
		return this;
	}
	/**
	 * @param cb callback will receive ancestor
	 * @returns Fluent interface
	 */
	Hierarchy.prototype.map = function(/** Function */cb)/** Hierarchy */{
		var stack = this.stack = [];
		for (var ancestor = this.type.prototype; 'parentClass' in ancestor; ancestor = ancestor.parentClass) {
			if (false !== cb(ancestor)) {
				stack.push(ancestor);
			}
		}
		return this;
	}
	/**
	 * @param cb callback will receive all matched ancestor and should return array with filtered ancestors 
	 * @returns Fluent interface
	 */
	Hierarchy.prototype.reduce = function(/** Function */cb)/** Hierarchy */{
		this.stack = cb(this.stack);
		return this;
	}
	/**
	 * @param cb callback will receive ancestor
	 * @returns Fluent interface
	 */
	Hierarchy.prototype.apply = function(/** Function */cb)/** Hierarchy */{
		var stack = this.stack;
		for (var i = stack.length - 1; i > -1; -- i) {
			cb(stack[i]);
		}
		return this;
	}

	/**
	 * Create a new Class that inherits from this class.
	 * 
	 * Merge 'options' and 'requires' properties.
	 * 
	 * @param parent parent class to extends
	 * @param child new child class
	 * @param [o] options to add to child's prototype
	 */
	$Crabapple.extend = function(/** Function */parent, /** Function */child, /** Object */o){
		o = o || {};
		var fn = function(){};

		fn.prototype = parent.prototype;
		child.prototype = new fn();
		child.prototype.parentClass = parent.prototype;
		child.prototype.constructor = child;

		for (var key in o) {
			child.prototype[key] = o[key];
		}

		var h = new Hierarchy(child).map(function(ancestor){
			return 'options' in ancestor;

		}).apply(function(ancestor){
			$.extend(child.prototype.options, ancestor.options);
		});
		
		h.set(child).map(function(ancestor){
			return 'requires' in ancestor;

		}).apply(function(ancestor){
			$.extend(child.prototype.requires, ancestor.requires);
		});
	};

	/**
	 * Instantiate new instance of specified type.
	 * 
	 * Calls init() methods step-by-step.
	 * 
	 * @param type type to instantiate
	 * @param args arguments for init() method
	 * @returns initialized new instance of type
	 */
	$Crabapple.instantiate = function(/** Function */type, /** Array */args)/** Object */{
		var o = new type();
		new Hierarchy(type).map(function(ancestor){
			if (ancestor.hasOwnProperty) {
				return ancestor.hasOwnProperty('init');
			} else {
				return 'init' in ancestor;
			}
		}).apply(function(ancestor){
			ancestor.init.apply(o, args);
		});
		return o;
	};

})(jQuery);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/crabapple/module.js */
/**
 * Crabapple Module class is a base parent class for all Crabapple Modules
 */
(function($) {
	$Crabapple.Module = function(){};
	
	$Crabapple.extend($Crabapple.Class, $Crabapple.Module, {
		/**
		 * Default module class options
		 * 
		 * @type Object
		 */
		options: {},

		/**
		 * @type Array
		 */
		required: [],

		/**
		 * Initialize method. Called by chain.
		 * 
		 * @param options
		 * @param elem
		 */
		init: function(/** DOMElement */elem, /** Object */options){
			this.elem  = elem;
			this.$elem = $(elem);
			$.extend(this.options, options);
		}
	});
}) (jQuery);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/crabapple/utils.js */
(function($) {
	/**
	 * @namespace Holds Crabapple utils methods
	 */
	$Crabapple.utils = {};
		
	$Crabapple.utils.DateTime = {};
	$Crabapple.utils.DateTime.currentDate = false;
	$Crabapple.utils.DateTime.format = function(format) {
		var returnStr = '';
		var replace = this.replaceChars;
		for (var i = 0; i < format.length; i++) {
			var curChar = format.charAt(i);
			if (i - 1 >= 0 && format.charAt(i - 1) == "\\") {
				returnStr += curChar;
			}
			else if (replace[curChar]) {
				returnStr += replace[curChar].call(this);
			} else if (curChar != "\\") {
				returnStr += curChar;
			}
		}

		return returnStr;
	};
	
	$Crabapple.utils.DateTime.replaceChars = {
		shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
		longMonths: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
		shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
		longDays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],

		// Day
		d: function() { return (this.currentDate.getDate() < 10 ? '0' : '') + this.currentDate.getDate(); },
		D: function() { return this.replaceChars.shortDays[this.currentDate.getDay()]; },
		j: function() { return this.currentDate.getDate(); },
		l: function() { return this.replaceChars.longDays[this.currentDate.getDay()]; },
		N: function() { return this.currentDate.getDay() + 1; },
		S: function() { return (this.currentDate.getDate() % 10 == 1 && this.currentDate.getDate() != 11 ? 'st' : (this.currentDate.getDate() % 10 == 2 && this.currentDate.getDate() != 12 ? 'nd' : (this.currentDate.getDate() % 10 == 3 && this.currentDate.getDate() != 13 ? 'rd' : 'th'))); },
		w: function() { return this.currentDate.getDay(); },
		z: function() { var d = new Date(this.currentDate.getFullYear(),0,1); return Math.ceil((this.currentDate - d) / 86400000); }, // Fixed now
		// Week
		W: function() { var d = new Date(this.currentDate.getFullYear(), 0, 1); return Math.ceil((((this.currentDate - d) / 86400000) + d.getDay() + 1) / 7); }, // Fixed now
		// Month
		F: function() { return this.replaceChars.longMonths[this.currentDate.getMonth()]; },
		m: function() { return (this.currentDate.getMonth() < 9 ? '0' : '') + (this.currentDate.getMonth() + 1); },
		M: function() { return this.replaceChars.shortMonths[this.currentDate.getMonth()]; },
		n: function() { return this.currentDate.getMonth() + 1; },
		t: function() { var d = new Date(); return new Date(d.getFullYear(), d.getMonth(), 0).getDate(); }, // Fixed now, gets #days of date
		// Year
		L: function() { var year = this.currentDate.getFullYear(); return (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)); },   // Fixed now
		o: function() { var d  = new Date(this.currentDate.valueOf());  d.setDate(d.getDate() - ((this.currentDate.getDay() + 6) % 7) + 3); return d.getFullYear();}, //Fixed now
		Y: function() { return this.currentDate.getFullYear(); },
		y: function() { return ('' + this.currentDate.getFullYear()).substr(2); },
		// Time
		a: function() { return this.currentDate.getHours() < 12 ? 'am' : 'pm'; },
		A: function() { return this.currentDate.getHours() < 12 ? 'AM' : 'PM'; },
		B: function() { return Math.floor((((this.currentDate.getHours() + 1) % 24) + this.currentDate.getMinutes() / 60 + this.currentDate.getSeconds() / 3600) * 1000 / 24); }, // Fixed now
		g: function() { return this.currentDate.getHours() % 12 || 12; },
		G: function() { return this.currentDate.getHours(); },
		h: function() { return ((this.currentDate.getHours() % 12 || 12) < 10 ? '0' : '') + (this.currentDate.getHours() % 12 || 12); },
		H: function() { return (this.currentDate.getHours() < 10 ? '0' : '') + this.currentDate.getHours(); },
		i: function() { return (this.currentDate.getMinutes() < 10 ? '0' : '') + this.currentDate.getMinutes(); },
		s: function() { return (this.currentDate.getSeconds() < 10 ? '0' : '') + this.getSeconds(); },
		u: function() { var m = this.currentDate.getMilliseconds(); return (m < 10 ? '00' : (m < 100 ? '0' : '')) + m; },
		// Timezone
		e: function() { return "Not Yet Supported"; },
		I: function() { return "Not Yet Supported"; },
		O: function() { return (-this.currentDate.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.currentDate.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.currentDate.getTimezoneOffset() / 60)) + '00'; },
		P: function() { return (-this.currentDate.getTimezoneOffset() < 0 ? '-' : '+') + (Math.abs(this.currentDate.getTimezoneOffset() / 60) < 10 ? '0' : '') + (Math.abs(this.currentDate.getTimezoneOffset() / 60)) + ':00'; }, // Fixed now
		T: function() { var m = this.currentDate.getMonth(); this.currentDate.setMonth(0); var result = this.currentDate.toTimeString().replace(/^.+ \(?([^\)]+)\)?$/, '$1'); this.currentDate.setMonth(m); return result;},
		Z: function() { return -this.currentDate.getTimezoneOffset() * 60; },
		// Full Date/Time
		c: function() { return this.format("Y-m-d\\TH:i:sP"); }, // Fixed now
		r: function() { return this.currentDate.toString(); },
		U: function() { return this.currentDate.getTime() / 1000; }
	};
	
	/**
	 * "2009-04-29 08:53:31" => relative time format
	 * "2009-04-29T08:53:31+0000" => relative time format
	 * object Date => relative time format
	 */
	$Crabapple.utils.DateTime.relativeTime = function(originalDate) {
		formatPattern = (arguments[1] && arguments[1].length > 0) ? arguments[1] : "F d, Y";
		if(originalDate instanceof Date){
			this.currentDate = originalDate;
		}else{
			currentDate = (originalDate || "").replace(/-/g,"/").replace(/TZ/g," ").replace(/\+(\w+)/g,"");
			this.currentDate  = new Date(currentDate);
		}
		
		var diff = (((new Date()).getTime() - this.currentDate.getTime()) / 1000);
		var day_diff = Math.floor(diff / 86400);
		
		if ( isNaN(day_diff) || day_diff < 0)
			return;
		
		return day_diff == 0 && (
				diff < 60 && "just now" ||
				diff < 120 && "1 minute ago" ||
				diff < 3600 && Math.floor( diff / 60 ) + " minutes ago" ||
				diff < 7200 && "1 hour ago" ||
				diff < 86400 && Math.floor( diff / 3600 ) + " hours ago") ||
			day_diff == 1 && "Yesterday" ||
			day_diff < 7 && day_diff + " days ago" ||
			day_diff < 30 && (Math.ceil( day_diff / 7 ) > 1 ? Math.ceil( day_diff / 7 ) + " weeks ago" : "1 week ago") ||
			day_diff < 365 && (Math.floor( day_diff / 30 ) > 1 ? Math.floor( day_diff / 30 ) + " months ago" : "1 month ago") ||
			this.format(formatPattern);
	};
	
	
	/**
	 * replace links in text to their html compliance
	 */
	$Crabapple.utils.linkToHtml = function(elm) {
		var returning = [];
		var regexp = /((ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?)/gi;
		elm.each(function() {
			returning.push(this.replace(regexp,"<a href=\"$1\">$1</a>"));
		});

		return jQuery(returning);
	};
}) (jQuery);

// Avoid `console` errors in browsers that lack a console.
(function() {
    var method;
    var noop = function () {};
    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
        'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/triforce.js */
(function($,w) {
	$Crabapple.Triforce = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.Triforce, {
		pageLoaderName: '$Crabapple.TriforcePageLoader',
		pageLoader: null,
		layoutManagerName: '$Crabapple.TriforceLayoutManager',
		layoutManager: null,
		scriptManagerName: '$Crabapple.TriforceScriptManager',
		scriptManager: null,
		feedManager: null,
		moduleRendererName: '$Crabapple.TriforceModuleRenderer',
		moduleRenderer:null,
		mediatorName: '$Crabapple.TriforceMediator',
		mediator: null,
		priorityManagerName: '$Crabapple.TriforcePriorityManager',
		priorityManager: null,
		storageManagerName: '$Crabapple.TriforceStorageManager',
		storageManager: null,
		imageBrokerName: '$Crabapple.TriforceImageBroker',
		imageBroker: null,
		queueName: '$Crabapple.TriforceQueue',
		queue: null,
		firstLoad: true,
		config: null,
		defaultLanguage: 'eng',
		init: function() {
			this.initializeConfig();
			this.initializeMediator();
			this.initializeComponents();
			this.getMediator().trigger('triforce:pageloaded');
		},
		initializeConfig: function() {
			if (window.TriforceConfiguration) {
				this.config = window.TriforceConfiguration;
			} else {
				// Default configuration object
				this.config = {
					'debug':false,
					'priorityTimeout':300,
					'stragglersTimeout':3000,
					'manifestFeed':'/feeds/triforce/manifest/v2',
					'tierWrapper':false
				};
				if (typeof (config.getTriforceScriptLoader) == 'function') this.config.scriptConcatenator = config.getTriforceScriptLoader();
				if (typeof (config.getTriforceDebugEnabled) == 'function') this.config.debug = config.getTriforceDebugEnabled();
				if (typeof (config.getTriforceGlobalZones) == 'function') this.config.globalZones = config.getTriforceGlobalZones().split(',');
				if (typeof (config.getTriforceManifestFeed) == 'function') this.config.manifestFeed = config.getTriforceManifestFeed();
				if (typeof (config.getTriforcePriorityTimeout) == 'function') this.config.priorityTimeout = parseInt(config.getTriforcePriorityTimeout());
				if (typeof (config.getTriforceStragglersTimeout) == 'function') this.config.stragglersTimeout = parseInt(config.getTriforceStragglersTimeout());
				if (typeof (config.getTriforceHelpersCssPackage) == 'function') this.config.CSSHelperPackage = config.getTriforceHelpersCssPackage();
				if (typeof (config.getTriforceHelpersCssDriverName) == 'function') this.config.CSSHelperDriverName = config.getTriforceHelpersCssDriverName();
				if (typeof (config.getTriforceTierWrapper) == 'function') this.config.tierWrapper = config.getTriforceTierWrapper();
			}

			this.initializeLanguage();

		},
		initializeLanguage: function() {
			if (this.config.language) return;
			if (typeof($.cookie) == 'function') {
				var lp = $.cookie('languagePreferences');
				if (lp) {
					this.config.languagePreference = lp;
					if (lp.indexOf(',') >= 0) {
						lp = lp.split(',');
						this.config.language = lp[0];
					} else {
						this.config.language = lp;
					}
				}
			}
			if (!this.config.language) {
				this.config.language = this.defaultLanguage;
			}

		},
		initializeComponents: function() {
			this.initializePageLoader();
			this.initializeModuleRenderer();
			this.initializeScriptManager();
			this.initializeLayoutManager();
			this.initializePriorityManager();
			this.initializeStorageManager();
			this.initializeImageBroker();
			this.initializeQueue();
		},
		initializePageLoader: function() {
			var pls = this.pageLoaderName.split('.');
			var namespace = pls[0];
			var moduleName = pls[1];
			this.pageLoader = new w[namespace][moduleName]();
			this.pageLoader.init();
		},
		initializeLayoutManager: function() {
			var lms = this.layoutManagerName.split('.');
			var namespace = lms[0];
			var moduleName = lms[1];
			this.layoutManager = new w[namespace][moduleName]();
			this.layoutManager.init();
		},
		initializeScriptManager: function() {
			var sms = this.scriptManagerName.split('.');
			var namespace = sms[0];
			var moduleName = sms[1];
			this.scriptManager = new w[namespace][moduleName]();
			this.scriptManager.init();
			this.feedManager = this.scriptManager;
		},
		initializeModuleRenderer: function() {
			var mrs = this.moduleRendererName.split('.');
			var namespace = mrs[0];
			var moduleName = mrs[1];
			this.moduleRenderer = new w[namespace][moduleName]();
			this.moduleRenderer.init();
		},
		initializeMediator: function() {
			var mms = this.mediatorName.split('.');
			var namespace = mms[0];
			var moduleName = mms[1];
			this.mediator = new w[namespace][moduleName]();
			this.mediator.init();
		},
		initializePriorityManager: function() {
			var pmn = this.priorityManagerName.split('.'),
				namespace = pmn[0],
				moduleName = pmn[1];
			this.priorityManager = new w[namespace][moduleName]();
			this.priorityManager.init();
		},
        initializeStorageManager: function() {
            var smn = this.storageManagerName.split('.'),
                namespace = smn[0],
                moduleName = smn[1];
            this.storageManager = new w[namespace][moduleName]();
            this.storageManager.init();
        },
		initializeImageBroker: function () {
			var smn = this.imageBrokerName.split('.'),
				namespace = smn[0],
				moduleName = smn[1];

			this.imageBroker = new w[namespace][moduleName]();
			this.imageBroker.init();
		},
		initializeQueue: function() {
			var smn = this.queueName.split('.'),
				namespace = smn[0],
				moduleName = smn[1];
			this.queue = new w[namespace][moduleName]();
			this.queue.init();
		},
		getMediator: function() {
			return this.mediator;
		},
		getPageLoader: function() {
			return this.pageLoader;
		},
		getModuleRenderer: function() {
			return this.moduleRenderer;
		},
		getPriorityManager: function() {
			return this.priorityManager;
		},
		getStorageManager: function() {
			return this.storageManager;
		},
		loadPage: function(url, pageStatus) {
			this.pageLoader.loadPage(url, pageStatus);
		},
		pageReady: function() {
			if (this.firstLoad) {
				this.firstLoad = false;
			} else {
				this.scrollToTop();
			}
            if (w.Triforce.config && w.Triforce.config.monitorEnabled) {
                w.Triforce.getMediator().trigger('triforce:monitorPageChange');
            }
			var priorities = this.layoutManager.startLayout();
			this.priorityManager.startRenderPriorities(priorities);
		},
		loadLegacyPage: function() {
			var priorities = this.layoutManager.fetchLegacyPriorities();
			if (priorities) {
				this.priorityManager.startRenderPriorities(priorities);
			}
		},
		queueFeedLoad: function(feedURL, module) {
			this.feedManager.queueFeedLoad(feedURL, module);
		},
		registerFeedLoaded: function(feedURL, feedData, module) {
			this.feedManager.registerFeedLoaded(feedURL, feedData, module);
		},
		getFeedData: function(feedURL) {
			return this.feedManager.getFeedData(feedURL);
		},
		queueJavascript: function (scripts, module, hashes) {
			this.scriptManager.queueJavascript(scripts, module, hashes);
		},
		moduleTimeout: function(module) {
			var message = 'Module ' + module.data('tfdriver') + ' failed rendering in zone ' + module.data('zone');
			this.getMediator().trigger('triforce:message', {'type':'warning', 'message':message});
		},
		scrollToTop: function() {
			$(window).scrollTop(0);
		},

		abortAllRequests: function () {
			this.scriptManager.abortAllFeedRequests();
			this.scriptManager.unqueueAllScripts();
		}
	});
}) (jQuery, window);

$(document).ready(function() {
	window.Triforce = new $Crabapple.Triforce();
	window.Triforce.init();
});
/*endFile*/
/*file=/nickpress.com/javascript/shared/picturefill.js */
/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */

window.matchMedia || (window.matchMedia = function() {
    "use strict";

    // For browsers that support matchMedium api such as IE 9 and webkit
    var styleMedia = (window.styleMedia || window.media);

    // For those that don't support matchMedium
    if (!styleMedia) {
        var style       = document.createElement('style'),
            script      = document.getElementsByTagName('script')[0],
            info        = null;

        style.type  = 'text/css';
        style.id    = 'matchmediajs-test';

        script.parentNode.insertBefore(style, script);

        // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
        info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;

        styleMedia = {
            matchMedium: function(media) {
                var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

                // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                if (style.styleSheet) {
                    style.styleSheet.cssText = text;
                } else {
                    style.textContent = text;
                }

                // Test if media query is true or false
                return info.width === '1px';
            }
        };
    }

    return function(media) {
        return {
            matches: styleMedia.matchMedium(media || 'all'),
            media: media || 'all'
        };
    };
}());

/*! Picturefill - Responsive Images that work today. (and mimic the proposed Picture element with span elements). Author: Scott Jehl, Filament Group, 2012 | License: MIT/GPLv2 */

;(function( w ){

	// Enable strict mode
	"use strict";

	w.picturefill = function() {
		var ps = w.document.getElementsByTagName( "span" );

		// Loop the pictures
		for( var i = 0, il = ps.length; i < il; i++ ){
				if( ps[ i ].getAttribute( "data-picture" ) !== null ){

					var sources = ps[ i ].getElementsByTagName( "span" ),
						matches = [];

					// See if which sources match
					for( var j = 0, jl = sources.length; j < jl; j++ ){
						var media = sources[ j ].getAttribute( "data-media" );
						// if there's no media specified, OR w.matchMedia is supported 
						if( !media || ( w.matchMedia && w.matchMedia( media ).matches ) ){
							matches.push( sources[ j ] );
						}
					}

				// Find any existing img element in the picture element
				var picImg = ps[ i ].getElementsByTagName( "img" )[ 0 ];

				if( matches.length ){
					var matchedEl = matches.pop();
					if( !picImg ){
						picImg = w.document.createElement( "img" );
						picImg.alt = ps[ i ].getAttribute( "data-alt" );
						if (picImg.alt == null || picImg.alt == "null") picImg.alt = '';
					}

					picImg.src =  matchedEl.getAttribute( "data-src" );
					matchedEl.appendChild( picImg );
				}
				else if( picImg ){
					picImg.parentNode.removeChild( picImg );
				}
			}
		}
	};

	// custom function for loading image in specific context
	w.picturefill.loadImage = function (el) {

		if (el !== null) {
			var sources = el.getElementsByTagName( "span" ),
				matches = [];

			// See if which sources match
			for( var j = 0, jl = sources.length; j < jl; j++ ){
				var media = sources[ j ].getAttribute( "data-media" );
				// if there's no media specified, OR w.matchMedia is supported 
				if( !media || ( w.matchMedia && w.matchMedia( media ).matches ) ){
					matches.push( sources[ j ] );
				}
			}

			// Find any existing img element in the picture element
			var picImg = el.getElementsByTagName( "img" )[ 0 ];

			if( matches.length ){
				var matchedEl = matches.pop();
				if( !picImg ){
					picImg = w.document.createElement( "img" );
					picImg.alt = el.getAttribute( "data-alt" );
					if (picImg.alt == null || picImg.alt == "null") picImg.alt = "";
				}

				picImg.src =  matchedEl.getAttribute( "data-src" );
				matchedEl.appendChild( picImg );
			} else if ( picImg ) {
				picImg.parentNode.removeChild( picImg );
			}
		}
	};

	// Run on resize and domready (w.load as a fallback)
	if( w.addEventListener ){
		w.addEventListener( "resize", w.picturefill, false );
		w.addEventListener( "DOMContentLoaded", function(){
			w.picturefill();
			// Run once only
			w.removeEventListener( "load", w.picturefill, false );
		}, false );
		w.addEventListener( "load", w.picturefill, false );
	}
	else if( w.attachEvent ){
		w.attachEvent( "onload", w.picturefill );
	}

}( window ));
/*endFile*/
/*file=/nickpress.com/javascript/shared/facebook_init.js */
var facebookInitDone = false;

function fbRootInit() {
	// Test to make sure facebook div does not already exist & create if it does not
	if ( !jQuery('#fb-root').length ) {
		var fbDiv = document.createElement('div');
		fbDiv.id='fb-root';

		document.body.appendChild(fbDiv);
	}
}

function facebookInit(faceBookAppId) {
	fbRootInit();
	// exit if this has already been defined
	if ( facebookInitDone == true || typeof(FB) !='undefined' ) { window.fbAsyncInit(faceBookAppId); return true};

	window.fbAsyncInit = function(faceBookAppId) { 
		FB.init({
			xfbml: true
		});
	};

	(function(d, s, id) {
	  var js, fjs = d.getElementsByTagName(s)[0];
	  if (d.getElementById(id)) return;
	  js = d.createElement(s); js.id = id;
	  js.src = "//connect.facebook.net/en_US/all.js";
	  fjs.parentNode.insertBefore(js, fjs);
	}(document, 'script', 'facebook-jssdk'));
	
	return true;
}

/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/module/controller.js */
(function($) {
	$Crabapple.TriforceModule = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceModule, {
		moduleElement: null,
		view: null,
		views: null,
		viewsListOrdered: null,
		helpers: null,
		feedResponse: null,
		name:'default',
		enhance: false,
		forceHide: false,

        /**
         * Represents what events should be listened on which elements
         * the listeners will be attached to the root module element
         * and whenever event is fired we'll check if that's a target
         * element that we care about, and if it's we'll call the handler
         *
         * events: {
         *      'eventName elementSelector': 'methodName'
         * }
         *
         * @type {?object}
         */
        defaultEvents: null,

        /**
         * Represents the final events object, which can be changed by the module script based on some checks
         *
         * @type (?object)
         */
        events: null,

        /**
         * Regular expression to parse the events object key to get
         * event name and element selector it should be applied to:
         * * First group represents the event name
         * * Second group represents the selector
         *
         * @type {RegExp}
         */
        eventsSplitter: /^(\S+)\s*(.*)$/,

		init: function(element, feedData) {
			this.moduleElement = element;
			this.feedResponse = feedData;
            this.events = {};
			if (this.moduleElement.data('tfdriver')) {
				this.name = this.moduleElement.data('tfdriver');
			}

			try {
				this.initializeHelpers();
				this.initViewComponents();
				this.initView();
			} catch (e) {
				// trigger an error here
				console.error('Triforce Module Render Failed: '+this.moduleElement.attr('class'), e.message, e.stack);
				window.Triforce.getMediator().trigger('triforce:moduleRenderFailed', {'instance':this, 'exception': e});
			}
			this.moduleElement.data('tfrendered', true);
			// trigger render complete here
			window.Triforce.getMediator().trigger('triforce:moduleRenderComplete', this);
		},
		initView: function () {
			this.runViewInheritance();
			if (this.moduleElement.attr('data-tfstatic')) {
				this.enhanceModule();
			} else {
				this.drawModule();
			}
            this.moduleElement.removeAttr('data-tfpriority data-tfloading');
            this.moduleElement.data('tfrendered', true);
		},
		initViewComponents: function () {
			this.views = {};

			for (var viewName in this.viewNames) {
				this.views[viewName] = this.inheritView(this.viewNames[viewName]);
				this.views[viewName].init();
			}

			if (this.viewsListOrdered && this.viewsListOrdered.length) {
				var viewsList = this.viewsListOrdered,
					viewInfo,
					i, len;

				for (i = 0, len = viewsList.length; i < len; i++) {
					viewInfo = viewsList[i];
					this.views[viewInfo.name] = this.inheritView(viewInfo.viewName);
					this.views[viewInfo.name].init();
				}
			}
		},
		processOrderedViews: function (methodName) {
			var viewsList = this.viewsListOrdered,
				views = this.views,
				data = this.data,
				viewInfo,
				coreElement,
				i, len;

			if (viewsList) {
				for (i = 0, len = viewsList.length; i < len; i++) {
					viewInfo = viewsList[i];
					coreElement = viewInfo.parentView ? views[viewInfo.parentView].coreElement : this.view.coreElement;

					views[viewInfo.name][methodName](coreElement, data);
				}
			}
		},
		runViewInheritance: function () {
			//IE8 doesn't support getPrototypeOf
			var moduleController = Object.getPrototypeOf(this);

			if (!moduleController.viewName) {
				return;
			}

			this.view = this.inheritView(moduleController.viewName);
			this.view.init(this.moduleElement);
		},
		inheritView: function(fullViewName, recursiveDeep) {
			var view, parentView, viewName, extention;

			recursiveDeep = recursiveDeep || 0;
			viewName = fullViewName.split('.');
			view = window[viewName[0]][viewName[1]];

			if (typeof view === 'function') {
				return recursiveDeep ? view : new view();
			}
			if(view == null){
				window.Triforce.getMediator().trigger('triforce:message', {'type':'error','message':'Failed to load parent class for view: '+fullViewName});
			}
			parentView = this.inheritView(view.parentView, recursiveDeep + 1);
			extention = view.extention;
			view = function () {};
			$Crabapple.extend(parentView, view, extention);
			window[viewName[0]][viewName[1]] = view;
			return recursiveDeep ? view : new view();
		},
		prepareModuleElement: function() {
			this.moduleElement.removeClass('triforce-module');
			this.moduleElement.removeAttr('data-tfpriority');
			this.addClasses();
		},
		drawModule: function() {
			this.prepareModuleElement();
			this.initializeView();
			if (this.forceHide == true) {
				this.moduleElement.hide();
				return;
			}
			this.addEvents();
			this.addAds();
			this.addLinkHandler();
		},
		enhanceModule: function() {
			this.enhance = true;
			this.moduleElement.removeAttr('data-tfpriority');
			this.addEvents();
			this.addLinkHandler();
		},
		initializeView: function() {

		},
		initializeHelpers: function() {
			this.helpers = {};

			if (!this.helperNames) return;
			for (var i in this.helperNames) {
				this.helpers[i] = this.createHelper(this.helperNames[i]);
			}
		},
		createHelper: function(helper) {
			var helperName = helper.split('.'),
				tmpHelper = false;
			try {
				tmpHelper = new window[helperName[0]][helperName[1]]();
			} catch (e) {
				window.Triforce.getMediator().trigger('triforce:message', {'type':'error','message':'Error creating helper', 'exception':e});
			}
			return tmpHelper;

		},
		addEvents: function() {
            this.processEventsObject();
		},

        /**
         * Takes the `events` object and processes it so described events
         * are listened, in case if it's some of global object, you've to
         * attach it by your self, and take care about detaching it when
         * you don't need it anymore(for ex. after your module is destroyed)
         */
        processEventsObject: function () {
            var method,
                matches,
                key;

            if (this.events || this.defaultEvents) {
                this.events = $.extend({}, this.defaultEvents, this.events);

                for (key in this.events) {
                    method = this[this.events[key]];

                    if (typeof method === 'function') {
                        matches = key.match(this.eventsSplitter);

                        if (matches) {
                            this.delegateEvent(matches[1], matches[2], method);
                        } else {
							window.Triforce.getMediator().trigger('triforce:message', {
								type: 'warning',
								message: 'Event is not defined right way, as it doesn\'t matche the eventsSplitter RegExp ' + key
							});
						}
                    } else {
						window.Triforce.getMediator().trigger('triforce:message', {
							type: 'warning',
							message: 'Event handler isn\'t a function, or either is not defined for event ' + key + ': ' + this.events[key]
						});
					}
                }
            }
        },

        /**
         * Attaches listener to moduleElement, that decreases
         * amount of listeners that we attach to DOM nodes.
         * The handler is called within Controllers context,
         * so we still can reference to the Controller's methods.
         *
         * In case if you need to get the target element, use
         * `event.currentTarget` (an event is passed as first argument to
         * the handler function).
         *
         * @param eventName {string}
         * @param selector {?string}
         * @param handler {function}
         */
        delegateEvent: function (eventName, selector, handler) {
            if (this.moduleElement) {
                var self = this;

                this.moduleElement.on(eventName, selector, function eventHandler () {
                    handler.apply(self, arguments);
                });
            }
        },

		addClasses: function() {
			var promo = null;
			if (this.feedResponse && this.feedResponse.result) {
				if (this.feedResponse.result.promo) {
					promo = this.feedResponse.result.promo;
				}
				if (this.feedResponse.result.promotion) {
					promo = this.feedResponse.result.promotion;
				}
                if(this.feedResponse.result.data && this.feedResponse.result.data.promoType){
                    promo = {};
                    promo.promoType = this.feedResponse.result.data.promoType;
                }
			}

			var regexp = this.name.match(/(ent_m[0-9]{3})_[a-zA-Z]*_.*/);
			var moduleNumber = (regexp && regexp.length > 0)?regexp[1]:'';
			this.moduleElement.addClass('module').addClass(this.name).addClass(moduleNumber);

            if(promo && promo.promoType) {
                this.moduleElement.addClass(promo.promoType.toLowerCase());
            }
        },
		addAds: function() {
			//FIXME: this shouldn't be here
			if (this.moduleElement.find('[data-adsize]').length) {
				this.moduleElement.find('[data-adsize]').each(function() {
					if (typeof($Crabapple.TriforceModule_reporting_v1) == 'function' && typeof('mtvn') != 'undefined') {
						$Crabapple.TriforceModule_reporting_v1.prototype.placeAd($(this));
					}
					if (typeof($Crabapple.TriforceModule_ENT_Reporting) == 'function' && typeof('mtvn') != 'undefined') {
						$Crabapple.TriforceModule_ENT_Reporting.prototype.placeAd($(this));
					}
				});
			}
		},

		addLinkHandler: function() {
			var self = this;

			$(this.moduleElement).find('a').each(function() {
				if (!self.isTriforceLink(this)) {
					return;
				}

				$(this).on('click', self.linkHandler);
			});
		},

		/**
		 * Determines whether passed link is "Triforce" one, based on some rules
		 *
		 * @param {DOM.Element} link Anchor DOM element
		 *
		 * @returns {boolean}
         */
		isTriforceLink: function (link) {
			var $link = $(link);

            // ignore if we are not on triforce page
			if (!window.triforceManifestFeed || window.triforceManifestFeed === false) {
				return false;
			}

			// ignore notriforce links
			if ($link.hasClass('notriforce')) return false;

			// ignore target === _blank links
			if ($link.attr('target') === '_blank') return false;

			// if validTriforceLinkMask is defined AND the link doesn't match the pattern, don't capture it
			if (window.TriforceExtraConfig && window.TriforceExtraConfig.validTriforceLinkMask && window.TriforceExtraConfig.validTriforceLinkMask instanceof RegExp) {
				if (link.href.match(window.TriforceExtraConfig.validTriforceLinkMask) === null) return false;
			}

			return true;
		},

		linkHandler: function(event) {
			if (event.ctrlKey || event.metaKey) return;
			event.preventDefault();
			var href = $(this).attr('href');

			if (href.indexOf('#') === 0) {
				// on-page hash
				var anchor = $('a[name="' + href.substring(1) + '"]'),
					anchorPos = anchor.offset(),
					anchorName = anchor.attr('name');
				if (anchorPos && anchorPos.top) {
					// set the hash without jumping to the anchor
					anchor.attr('name','');
					document.location.hash = href;
					anchor.attr('name',anchorName);
					// smooth scroll to the anchor, adjusted for header
					$('html,body').animate({
						scrollTop: anchorPos.top - 50
					}, 300);
				} else {
					// the old-fashioned way; just in case
					document.location.hash = href;
				}
				return;
			}

			if( (href.indexOf('http') === 0 && href.indexOf(window.location.host) === -1) || href.indexOf('mailto:') === 0 ) {
				// another domain url
				document.location.href = href;
				return;
			} else {
				window.Triforce.getMediator().trigger('triforce:loadpage', href);
			}
		},

        renderSubModule: function (wrapper, info) {
            window.Triforce.getMediator().trigger('triforce:module:process', wrapper, info);
        },

        /**
         * Determines whether the user is on mobile device or not
         *
         * @returns {bool}
         */
        isMobile: function () {
            return Triforce.getMediator().isMobile();
        },

		/**
		 * Adds event listener on the Triforce Mediator. Makes sure that listeners are
		 * getting removed after module element is not longer exist in the DOM.
		 *
		 * @param {string} eventName A name of the event to listen
		 * @param {function} callback Callback that executes when event occurs
		 * @param {bool} checkFired Determines whether we should check triggered events or not
		 */
		on: function (eventName, callback, checkFired) {
			var mediator = Triforce.getMediator(),
                controller = this;

			mediator.on(eventName, function moduleEventListener () {
			    if (!controller.moduleElement || controller.moduleElement[0].parentNode === null) {
			        mediator.off(eventName, moduleEventListener);
			        return;
			    }

			    callback(arguments);
			}, checkFired);
		},

		/**
		 * Removes event listener from the Triforce Mediator event
		 *
		 */
		off: function (eventName, callback) {
			var mediator = Triforce.getMediator();

			mediator.off.apply(mediator, arguments);
		},

		/**
		 * Triggers an event globally through Triforce Mediator
		 *
		 * @param {string} eventName
		 * @param {...*} arguments
		 */
		trigger: function (eventName) {
			var mediator = Triforce.getMediator();

			mediator.trigger.apply(mediator, arguments);
		}
	});
})(jQuery);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/module/view.js */
(function($) {
	$Crabapple.TriforceView = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceView, {
		missingImage: (function () {
			if (config && typeof config.getMediaMissingImage === 'function') {
				return config.getMediaMissingImage();
			} else {
				return 'http://comedycentral.mtvnimages.com/images/cc_missing_v6.jpg';
			}
		})(),
		defaultQuality: 0.85,
		moduleElement: {},
        timezonesList: {
            'EST': -5
        },
		init: function(moduleElement) {
			if($.isEmptyObject(this.moduleElement)) {
				this.moduleElement = moduleElement;
			}
		},
		
		/**
		 * Appending dom
		 */
		appendDom: function(parent, element, attributes) {
			var $element = this.createDom(element, attributes);
			try {
				parent.append($element);
			} catch (e) {
				if (console && console.log) {
					console.log(e);
				}
			}
			return $element;
		},

		/**
		 * Replaces $oldChild with $newChild
		 * @returns $newChild
		 */
		replaceModuleElement: function ($oldChild, $newChild) {
			$oldChild[0].parentNode && $oldChild[0].parentNode.replaceChild($newChild[0], $oldChild[0]);

			return $newChild;
		},

		/**
		 * Creates module wrapper
		 * @returns jQuery object of moduleWrapper
		 */
		getModuleWrapper: function ($moduleElement, additionalClasses) {
		   var moduleWrapper = document.createElement($moduleElement[0].nodeName);

		   moduleWrapper.className = $moduleElement[0].className + ( additionalClasses ? ' ' + additionalClasses : '');

		   return $(moduleWrapper);
		},
		
		/**
		 * Creates DOM element
		 */
		createDom: function(elementType, attributes) {
			var newElement = document.createElement(elementType);
			if(attributes) {
				for(var key in attributes) {
					newElement.setAttribute(key, attributes[key]);
				}
			}
			
			return $(newElement);
		},
		
		
		/**
		 * TODO
		 */
		prependDom: function(parent, element, attributes) {
			var $element = this.createDom(element, attributes);
			try {
				parent.prepend($element);
			} catch (e) {
				if (console && console.log) {
					console.log(e);
				}
			}
			return $element;
		},
		
		appendImage: function (parent, image, autoload) {
			var imageHolder,
				imageInformation,
                queuedImage,
                triforceMediator;

			image = image || {};

			if (!autoload) {
				imageInformation = {
					original: {
						width: image.width,
						height: image.height,
						aspectRatio: image.height ? Math.round(image.width / image.height * 10) / 10 : null
					},
					src: image.url || this.missingImage,
					quality: this.defaultQuality
				};

				imageHolder = this.appendDom(parent, 'div', {
					'data-info': JSON.stringify(imageInformation),
					'class': 'image_holder deferred'
				});

                this.queueImage(imageHolder, imageInformation);

				return imageHolder;
			}

			return this.appendDom(parent, 'img', {
				src: image.url + '?quality=' + this.defaultQuality
			});
		},

        /**
         * Tries to find out images that need to be queued in ImageBroker withing passed DOM element
         * It recognizes such images upon selector, the image should have class `image_holder` and
         * data attribute `data-toqueue` which is set to true. The element should also have `data-info`
         * attribute which contains information about the original image. It should be just an object(JSON):
         *
         * {
         *      "src": "http:\/\/mtv.mtvnimages.com\/crop-images\/2015\/07\/28\/MTHD0053-03_Faking_It_S2_TCA.mov.Still023_promo_edited.jpg",
         *      "quality": "0.8",
         *      "original": {
         *          "width": 1920,
         *          "height": 1080,
         *          "aspectRatio": 1.7
         *      }
         * }
         *
         * @param {jQuery} $el - the element where we search for not queued images
         */
        checkForNotQueuedImages: function ($el) {
            var notQueuedImages = $el.find('.image_holder[data-toQueue="true"]'),
                imageHolder,
                i, len;

            for (i = 0, len = notQueuedImages.length; i < len; i++) {
                imageHolder = notQueuedImages.eq(i);
                this.queueImage(imageHolder, JSON.parse(imageHolder.attr('data-info')));
                imageHolder.removeAttr('data-toQueue');
            }
        },

		/**
		 * Queues the image in the ImageBroker
		 *
		 * @param {jQuery} imageHolder - a holder for image
		 * @param {object} imageInformation - contains all the information about the image(its original dimensions etc.)
		 */
		queueImage: function (imageHolder, imageInformation) {
			window.Triforce.getMediator().trigger('triforce:queueimage', {
				'holder': imageHolder[0],
				'info': imageInformation
			});
		},
		
		getDuration: function(duration) {
			var d = parseInt(duration),
				min = Math.floor(d / 60),
				sec = d - (60 * min);
			return min + ":" + ((sec < 10 ? '0' : '') + sec);
		},
		
		dateToString: function(timeStamp, format, timezone) {
			var time = parseInt(timeStamp,10);
			if(isNaN(time)){
				return timeStamp;
			}
			if((new Date(time)).getFullYear() == 1970){
				time = time * 1000;
			}
            if (timezone && this.timezonesList[timezone]) {
                time = this.getTimeInTimezone(time, timezone);
            }
			format = format || "m/d/Y";
			$Crabapple.utils.DateTime.currentDate = new Date( time );
			var result = $Crabapple.utils.DateTime.format(format);
			$Crabapple.utils.DateTime.currentDate = false;

			return result;
		},

        /**
         *
         * @param dateString - should follow RFC2822 format
         * @param format
         * @returns {String}
         */
        formatDateString: function (dateString, format) {
            if (dateString && format) {
                dateString = dateString.substr(0, dateString.length - 5); // Cut the timezone

                $Crabapple.utils.DateTime.currentDate = new Date(dateString);
                var result = $Crabapple.utils.DateTime.format(format);
                $Crabapple.utils.DateTime.currentDate = false;

                return result;
            }

            return dateString;
        },

        getTimeInTimezone: function (time, timezone) {
            var offsetDiff = this.timezonesList[timezone] - this.getFixedTimezoneOffset();

            return new Date(time + offsetDiff * 3600000/* 1hr = 60min = 3600s = 360000ms */);
        },

        getFixedTimezoneOffset: function () {
            var fullYear = new Date().getFullYear();

            // Fix offset with a possible DST change
            // Takes offset in January & July, takes max - this means that we just ignore DST
            return Math.max(new Date(fullYear, 0, 1).getTimezoneOffset(), new Date(fullYear, 6, 1).getTimezoneOffset()) / -60; // Offset is in minutes and inverted, need to get hrs
        },

		/**
		 * Skip module in selenium by specific condition
		 */
		forceHideByConditions : function() {
			var $module = $(this.moduleElement),
				rem_list = '';
			if($('body').data('removedModules')){
				rem_list = $('body').data('removedModules') + '::';
			}
			rem_list += $module[0].className;
			$('body').data('removedModules', rem_list);
		},

		/**
		 * Basic triforce link behaviour
		 */
		addLinkHandlers: function(wrap) {
			
		},
		addCssOverride: function(moduleName, cssOverrideObj){
			var styleTag = document.getElementById(moduleName + '_colorsPallete') || document.createElement('style'),
				css = '';

			styleTag.id = moduleName + '_colorsPallete';

			if(cssOverrideObj && !jQuery.isEmptyObject(cssOverrideObj)){

				for(var cssClass in cssOverrideObj){
					css += cssClass + '{';
					for(var cssRule in cssOverrideObj[cssClass]){
						css += cssRule + ':'+ cssOverrideObj[cssClass][cssRule] + ';'
					}
					css += '}'
				}

				styleTag.innerHTML = css;
				document.head.appendChild(styleTag);
			}
		}
	});
})(jQuery);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/jquery/cookie.js */
/**
 * jQuery Cookie plugin
 *
 * Copyright (c) 2010 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
jQuery.cookie = function (key, value, options) {

    // key and at least value given, set cookie...
    if (arguments.length > 1 && String(value) !== "[object Object]") {
        options = jQuery.extend({}, options);

        if (value === null || value === undefined) {
            options.expires = -1;
        }

        if (typeof options.expires === 'number') {
            var days = options.expires, t = options.expires = new Date();
            t.setDate(t.getDate() + days);
        }

        value = String(value);

        return (document.cookie = [
            encodeURIComponent(key), '=',
            options.raw ? value : encodeURIComponent(value),
            options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
            options.path ? '; path=' + options.path : '',
            options.domain ? '; domain=' + options.domain : '',
            options.secure ? '; secure' : ''
        ].join(''));
    }

    // key and possibly options given, get cookie...
    options = value || {};
    var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;
    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
};

/*endFile*/
/*file=/nickpress.com/javascript/triforce/microtemplating.js */
$NickPress.tmplCache={};
function tmplEngine (module, tmpl, data){
    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = $NickPress.tmplCache[module] ? $NickPress.tmplCache[module] : $NickPress.tmplCache[module] =
    // Generate a reusable function that will serve as a template
    // generator (and which will be cached).
    new Function("obj",
    "var p='';" +
    // Introduce the data as local variables using with(){}
    "with(obj){p+='" +
    // Convert the template into pure JavaScript
    tmpl
        .replace(/[\r\t\n]/g, " ")
        .split("<%").join("\t")
        .replace(/((^|%>)[^\t]*)'/g, "$1\r")
        .replace(/\t=(.*?)%>/g, "'+$1+'")
        .split("\t").join("';")
        .split("%>").join("p+='")
        .split("\r").join("\\'")
    + "';}return p;");
    // provide some basic currying to the user
    return data ? fn( data ) : fn;
}
/*endFile*/
/*file=/nickpress.com/javascript/triforce/triforce.js */
$(document).ready(function() {
	$.mediatorOverride();
});

$.mediatorOverride = function() {
	if (typeof (window.Triforce) != 'undefined') {
		window.Triforce.getMediator().on('triforce:pageready', function() {
			$.highlightMenuElement();
		});
		$.highlightMenuElement();
	}
	else {
		setTimeout(function() {
			$.mediatorOverride();
		}, 1000);
		return;
	}
}

$.highlightMenuElement = function () {
	if (typeof (triforceManifestFeed) == 'undefined') {
        setTimeout(function() {
            $.highlightMenuElement();
        }, 1000);
        return;
    }
	var $backgroundHolder = $('#background_holder');
    $('#m001_v1 .nav li').removeClass('active'); 
    if ($backgroundHolder.hasClass('screening_room') && triforceManifestFeed.id !== 'screeningRoom') {
        $backgroundHolder.removeClass('screening_room');
    }
    if (triforceManifestFeed.id) {
        $('#' + triforceManifestFeed.id).addClass('active');
    }

    if (window.location.href.indexOf('search/') < 0) {
    	$('.search_wrapper').removeClass('persist').removeClass('showing');
    	
    }
    //$.makeReportingCall();
};
$.makeReportingCall = function() {
	$("#background_holder").append('<div id="reporting" style="display:none;" data-tfdriver="reporting_v1"></div>');
	$('#reporting').data('feedloaded', 'true');
	window.Triforce.getMediator().trigger('triforce:loadscript', config.getRepoScript(), $('#reporting'), 'empty');
};
/*endFile*/
/*file=/nickpress.com/javascript/fragments/m001_v1/m001_v1.js */
(function() {
	if ($('#m001_v1').length) {
		var timeoutID,
			timeoutFlag = false;
			hoveredElement = {};

		$NickPress.m001_v1 = {
			elements: {},

			init: function () {
				var $m001_v1 = $('#m001_v1');

				this.elements = {
					$background_holder: $('#background_holder'),
					$m001_v1: $m001_v1,
					$nav: $m001_v1.find('.nav'),
					$aside: $m001_v1.find('.aside'),
					$overlayHolder: $('#overlay_holder'),
					$overlayBody: $('#overlay_holder').find('.body')
				};

				$NickPress.Placeholder.setPlaceholder($m001_v1);
				
				this.initUserMenu();
				this.attachEvents();
			},
			
			initUserMenu: function() {
				if (this.getCookie('ms_ses')) {
					var s = this.getCookie('ms_ses');
					$.getJSON('/feeds/menu?s='+s, function(response) {
						try {
							if (response.user) {
								$(".signed_info").find("li.name").text(response.user.firstname + ' ' + response.user.lastname);
								$(".signup_wrapper").remove();

								$('.login_holder_title').text('Me').parent('.login_holder').addClass('authorised');

								$(".signed_info").attr("style", "");
								$(".signed_info").find("a").each(function () {
									if ($(this).attr("href").indexOf("mailto") < 0)
										$(this).attr("href", $(this).attr("href") + "?s=" + s);
								});
							}
						}
						catch(e) {
							/* response.user is empty or wrong */
						}
					});
				}
			},

			attachEvents: function () {
				var self = this,
					error_message;

				this.elements.$m001_v1.find('#expand_menu').on('click', function() {
					if (!self.elements.$background_holder.hasClass('show_menu')) {
						self.elements.$aside.addClass('show');
						self.elements.$background_holder.addClass('show_menu');
					} else {
						self.hideHamburgerMenu();
					}
				});

				this.elements.$m001_v1.find('.search_wrapper').on('click',function(){
					if (window.innerWidth <= 1024) {
						var $form = $('.search_wrapper form.search'),
							$searchInput = $('#search_input'),
							$searchBackground = $('#search_background'),
							$body = $('body'),
							$reset = $form.find('input[type="reset"]');

						$form.show();
						$searchBackground.show();
						$body.addClass('body_boundary');
						$searchInput.focus().blur(function () {
							$form.hide();
							$searchBackground.hide();
							$body.removeClass('body_boundary');
						});
					}
				});

				function mobileAndTabletcheck() {
					var check = false;
					(function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
					return check;
				}

				if (mobileAndTabletcheck()) {
					console.log("detected a mobile/tablet browser");
					$(".login_holder").on("click", function(e) {
						var target = $(e.target);

						if (!target.hasClass("login_holder")) return;

						target.toggleClass("showing");
						return false;
					});

				} else {
					this.elements.$m001_v1.find('.search_wrapper, .login_holder, .contains').on('mouseenter', function () {
						if (!timeoutFlag) {
							var $this = $(this);

							if (!self.elements.$background_holder.hasClass('show_menu') && !$this.hasClass('showing')) {
								$this.addClass('showing');
							}
						} else if (hoveredElement == this) {
							clearTimeout(timeoutID);
							timeoutFlag = false;
						}
					}).on('mouseleave', function () {
						if( $(this).hasClass('login_holder') && $(this).find('input:focus').length ) {
							timeoutFlag = true;
							hoveredElement = this;
						}
						if (!timeoutFlag) {
							var self = this;

							timeoutID = setTimeout((function () {
								var $this = $(self);

								return function () {
									timeoutFlag = false;
									hoveredElement = {};

									$this.hasClass('showing') && !$this.hasClass('persist') && $this.removeClass('showing');
									//Check if one of "expandable" elements hovered
									hoveredElement = $('#m001_v1').find(':hover').closest('.login_holder, .search_wrapper, .contains');
									if (hoveredElement[0]) {
										//Show it and store in variable un-JQuery element
										hoveredElement = hoveredElement.addClass('showing')[0];
									}
								};
							}()), 200);

							timeoutFlag = true;
							hoveredElement = this;
						}
					});
				}

				$(document).on('click',function(e){
					if(!$(e.target).closest('.login_holder').length) {
						$('.login_holder').removeClass('showing');
						timeoutFlag = false;
						hoveredElement = false;
					}
				});

				this.elements.$m001_v1.find('.contains .subnav a').on('click', function () {
					var $this = $(this);
					$this.parents('.contains').eq(0).removeClass('showing');
					$this.parents('.subnav').eq(0).addClass('hide4sec');
					timeoutID = setTimeout((function () {
						var $this = $(self);
						return function () {
							timeoutFlag = false;
							hoveredElement = {};
							$this.parents('.contains').eq(0).hasClass('showing') && !$this.parents('.contains').eq(0).hasClass('persist') && $this.parents('.contains').eq(0).removeClass('showing');
							hoveredElement = $('#m001_v1').find(':hover').closest('.login_holder, .search_wrapper, .contains');
							hoveredElement = hoveredElement.removeClass('showing')[0];
							$('#m001_v1').find('.hide4sec').removeClass('hide4sec');
						};
					}()), 200);
					timeoutFlag = true;
					hoveredElement = this;
				});


				$(window).on('resize', function () {
					if (window.screen.width > 1023 && !self.elements.$background_holder.hasClass('screening_room')) {
						self.hideHamburgerMenu();
					} 
				});


				this.elements.$nav.find('.contains > a').on('click', function(event) {
					if (self.elements.$background_holder.hasClass('show_menu')) { 
						var $this = $(this);

						event.preventDefault();

						$this.closest('.nav').toggleClass('showing_subnav');
						$this.closest('li').toggleClass('expanded').siblings().toggle();
					}
				});

				this.elements.$m001_v1.find('a').on('click', function(event) {
					var $this = $(this),
						href = $(this).attr('href');

					event.preventDefault();

					if ($this.hasClass('overlay_links')) {
						$NickPress.Overlay.showOverlay(href);
					} else if($this.hasClass('logout_link')) {
						self.deleteCookie('ms_ses');
						self.deleteCookie('ms_pwd');
						self.deleteCookie('ms_user');
						document.location.href = document.location.href;
					} else {
						if( (href.indexOf('http') === 0 && href.indexOf(window.location.host) === -1) || href.indexOf('mailto:') === 0 ) {
							 // another domain url
							document.location.href = href;
						} else {
							if (href !== "" && href !== "#") {
					            if (self.elements.$background_holder.hasClass('show_menu')) {
									self.hideHamburgerMenu();
					            }
								window.Triforce.loadPage(href);
							}
						}
					}
				});

				this.elements.$m001_v1.find('.signup').on('submit', function (event) {
					event.preventDefault();
					var $this;

					if (this.username.value && this.password.value) {
						$this = $(this);

						$this.find('[type="submit"]').attr('value', 'Sending...');

						$.ajax($this.data('link'), {
							type: 'POST',
							success: function(data, status, xhr) {
								switch (data.status) {
								case 'success':
									for (var i in data.cookies) {
										var expiry = 0;
										if (i != 'ms_ses') expiry = 1;
										self.setCookie(i, data.cookies[i], expiry);
									}
									window.location.href = window.location.href;
									break;
                                case 'error':
								case 'exception':
									$('#m001_v1').find('.signup [type="submit"]').attr('value', 'Sign In');
									error_message = 'Sign in failed.  Please enter a valid email and password.';
									self.showOverlay(error_message);
									break;
								}
							},
						  	data: {
						  		username: this.username.value,
						  		password: this.password.value
						  	},
						  	xhrFields: {
						  		widthCredentials:true
						  	},
						  	crossDomain: true
						});
					} else {
						error_message = 'Please enter an email and password.';
						self.showOverlay(error_message);
					}
				});
				this.elements.$m001_v1.find('.search').on('submit', function(event) {
					var a = this.search.value,
					    $form = $('.search_wrapper form.search'),
							$searchBackground = $('#search_background');
					event.preventDefault();
					if (this.search.value && this.search.value != 'Search') {
						window.Triforce.loadPage('http://' + window.location.hostname + '/search/' + encodeURIComponent(this.search.value));
						$form.hide();
						$searchBackground.hide();
						$('body').removeClass('body_boundary');
					}
					else {
						error_message = 'Please enter a search term';
						self.showOverlay(error_message);
					}
				});
				this.elements.$overlayHolder.find('.close_overlay').on('click', function() {
					$('html').removeClass('showing_overlay');
				});

			},
			showOverlay: function (message) {
				$('html').addClass('showing_overlay');
				this.elements.$overlayBody.text(message);
			},

			hideHamburgerMenu: function () {
				var self = this;

				if (window.screen.width <= 1023 || !this.elements.$background_holder.hasClass('screening_room')) {
					setTimeout(function () {
						self.elements.$aside.removeClass('show');
					}, 750);
				}
                if (this.elements.$nav.hasClass('showing_subnav')) {
                    this.elements.$nav.removeClass('showing_subnav').find('.expanded').removeClass('expanded').siblings().toggle();
                }
				this.elements.$background_holder.removeClass('show_menu');
			},

			deleteCookie: function (name) {
				//var pressDomain = window.location.hostname.replace('press.', '.press.');
				//var domain = window.location.hostname.replace('press.', '');
				//document.cookie = name + '=;path=/;domain='+pressDomain+';expires=Thu, 01 Jan 1970 00:00:01 GMT;';
				//document.cookie = name + '=;path=/;domain='+domain+';expires=Thu, 01 Jan 1970 00:00:01 GMT;';
				document.cookie = name + '=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
			},

			getCookie: function(name) {
				var cookieName = name + "=";
				var ca = document.cookie.split(';');
				for (var i=0; i<ca.length; i++) {
					var c = ca[i].trim();
					if (c.indexOf(cookieName) == 0) return c.substring(cookieName.length, c.length);
				}
				return false;
			},
			setCookie: function(name, value, expires) {

				// DEBUG, please remove
				console.log("Setting cookie", name, value, expires);
				///////////////////////

				if (expires > 0) {
					var d = new Date();
					d.setTime(d.getTime() + (expires * 24 * 60 * 60 * 1000));
					var expiryDate = 'expires=' + d.toGMTString();
				}
				else {
					var d = new Date();
					d.setTime(d.getTime() + (60 * 60 * 1000));
					var expiryDate = 'expires=' + d.toGMTString();
				}
				document.cookie = name + '=' + value + '; path=/; ' + expiryDate;
			}
		};

		$NickPress.m001_v1.init();
	}
})();

/*endFile*/
/*file=/nickpress.com/javascript/fragments/m002_v1/m002_v1.js */
(function() {
	$('#m002_v1 .footer_content > ul > li').on('click', 'h6', function () {
		$(this).closest("li").toggleClass('expanded').siblings().removeClass('expanded');
		//$(this).parent().toggleClass('expanded').siblings().removeClass('expanded');
	});
})();

/*endFile*/
/*file=/nickpress.com/javascript/fragments/m003_v1/m003_v1.js */
(function () {
	if($('#m003_v1').length) {

		$(function () {

			$NickPress.NewsletterSignup = {
				settings: {
					url: '/fragments/mail_generator'
				},

				elements: {
					$form: $('#newsletterSignup')
				},
				
				init: function () {
					$NickPress.Placeholder.setPlaceholder(this.elements.$form);
					this.attachEvents();
				},

				attachEvents: function () {
					var self = this;
					
					this.elements.$form.submit(function (event) {
						event.preventDefault();

						self.subscribeUserNewsletter(this);
					})
				},

				subscribeUserNewsletter: function(form) {
					if (this.validateForm(form)) {
						$.post(this.settings.url, {
							email: encodeURIComponent(form.email.value),
							name: encodeURIComponent(form.name.value),
							publication: encodeURIComponent(form.publication.value)
						}, $NickPress.NewsletterSignup.subscribe_status);
					} else {
						// nothing
					}
				},

				validateForm: function(form) {
					if (!this.validateTextField(form.name)) {
						alert('Please enter your name.');
						return false;
					}
					if (!this.validateTextField(form.publication)) {
						alert('Please enter your publication or press affiliation.');
						return false;
					}
					if (!this.validateEmail(form.email.value)) {
						alert('Please enter a valid email address');
						return false;
					}
					return true;
				},

				validateTextField: function (input) {
					return input.value && input.value !== input.getAttribute('data-placeholder'); 
				},

				validateEmail: function(emaillAddress) {
					var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;

					return reg.test(emaillAddress);
				},

				subscribe_status: function(responseText, textStatus, XMLHttpRequest){
					if (responseText.indexOf("success") > -1){
						alert('Thanks for subscribing!');
					}
				}

			};

			try {
				$NickPress.NewsletterSignup.init();
			} catch(error) {
			}
		});
	}

})();
/*endFile*/
/*file=/nickpress.com/javascript/fragments/overlay/overlay.js */
;(function (w, d) {
	$NickPress.Overlay = {
		showingOverlay: '',
		settings: {
			video: {
				width: '100%',
				aspectratio: '16:9'
			},
			player: {
				skinPath: "sitewide/jwplayer/six/six.xml"
			}
		},

		elements: {},

		init: function () {
			this.elements = {
				$html: $('html'),
				$backgroundHolder: $('#background_holder'),
				$overlayHolder: $('#overlay_holder'),
				$overlayBody: $('#overlay_body')
			};

			this.attachEvents();
		},

		attachEvents: function () {
			var elements = this.elements,
				self = this;

			elements.$overlayHolder.on('click', '.close_overlay', function () {
				if($('form').is('.set_new_password')) {
					window.location.href = window.location.origin;
				}
				elements.$html.removeClass('showing_overlay');
				self.stopJWPlayer('jwplayer');
				if (elements.$overlayHolder.hasClass('video')) {
					elements.$overlayHolder.removeClass('video');
					elements.$overlayBody.html('');
					if($('.massive_carousel').length != 0) {
						$NickPress.MassiveCarousel.setTimeout();
					}
				}
			});

			elements.$overlayBody.on('click', '.overlay_links', function (event) {
				event.preventDefault();
				self.showOverlay($(this).attr('href'));
			});

			elements.$overlayHolder.on('click', '.toggle_password', function () {
				self.togglePassword($(this));
			});

			elements.$overlayHolder.on('blur', 'input', function () {
				w.scrollTo(0, 0);
			});

			elements.$overlayBody.on('submit', 'form', function (event) {
				event.preventDefault();

				var $this = $(this),
					data = {},
					submit = $this.find('input[type=submit]');

				if (submit.hasClass('sending')) {
					return;
				}
				$this.find('.error_message').text('');

				if ( self.validateFields($this) ) {
					$.map($this.serializeArray(), function(n, i){
						data[n['name']] = n['value'];
					});

					data['ms_ses'] = self.getCookie('ms_ses');
					data['ms_user'] = self.getCookie('ms_user');
					data['ms_pwd'] = self.getCookie('ms_pwd');
					submit.data('value', submit.val());
					submit.addClass('sending').val('Sending');

					$.ajax({
						type: 'POST',
						url: $this.data('link'),
						data: data
					}).done(function (response) {
						submit.removeClass('sending').val(submit.data('value'));

						switch (response.status) {
							case 'success':
								$this.find('input[type="submit"]').val("Success!");
								if (response.cookies) {
									for (var i in response.cookies) {
										var expiry = 0;
										if (i != 'ms_ses') expiry = 1;
										self.setCookie(i, response.cookies[i], expiry);
									}
								}
                                elements.$overlayBody.text(response.message);
								if($this.hasClass('set_new_password')){
									w.location.href = w.location.origin;
								} else {
									setTimeout(function(){
										w.location.href = w.location.href;
									}, 3000);
								}
								break;
							case 'exception':
								alert(response.message);
								return false;
								break;
							case 'error':
								if (response.errors) {
									var message = "";
									if (response.errors["0"]) {
										$.each(response.errors["0"], function(key, error) {
											if (key == "username") {
												message = "Please enter a valid email address.";
												return false;
											}
											else {
												message = error;
												return false;
											}
										});
									}
									if (message != "") alert(message);
								}
								else if (response.message) {
									if($this.hasClass('set_new_password')) {
										$this.find('.error_message').text(response.message);
									} else {
										alert(response.message.replace('PASSWORD', 'Password'));
									}
								}
							break;
						}
					}).error(function() {
						submit.removeClass('sending').val(submit.data('value'));
					});
				}
			});
		},

		validateFields: function ($form) {
			var validateStatus = true,
				self = this,
				class_name = '',
				alerted = false,
				inputValue;

			$form.find('input[type!="submit"').each(function (key, input) {
				if (input.value === '') {
					validateStatus = false;
				}
			});
			$form.find('span.active').removeClass('active');
			$form.find('input[data-required]').each(function(key, input) {
				class_name = $(input).data('fieldname');

				if (input.value == '') {
					$(input).addClass('invalid');
					$(input).parent().find('span.error_' + class_name.toLowerCase().replace(' ', '_')).addClass('active').text(class_name + ' is required.');
					if (!alerted) {
						$(input).focus();
						alerted = true;
					}
					validateStatus = false;
				} else {
					$(input).removeClass('invalid');
				}
				if ((/[\*\[\]\<\>\=\,]/).test(input.value)) {
					$(input).addClass('invalid');
					$(input).parent().find('span.error_' + class_name.toLowerCase().replace(' ', '_')).addClass('active').text('Characters "*[]<>=," are not permitted');
				}
				if (input.type == 'email' && input.value) {
					if (!validateEmail(input.value)) {
						$(input).addClass('invalid');
						$(input).parent().find('.error_email').text('Email address is not valid').addClass('active');
						validateStatus = false;
					} else {
						$(input).parent().find('.error_email').removeClass('active');
						$(input).removeClass('invalid');
					}
				}
			});

			$form.find('#password').each(function(key, input) {
				var pass = input.value,
					mess = '',
					toggle_icon = $(this).parent().find('.toggle_password');
				$(this).removeClass('invalid');
				$(this).parent().find('span.info').hide();

				mess += (/[a-z]/).test(pass)?'':', must contain at least one lowercase letter';
				mess += (/[A-Z]/).test(pass)?'':', must contain at least one uppercase letter';
				mess += (/[0-9]/).test(pass)?'':', must contain at least one number';
				mess += (/.{8}/).test(pass)?'':', must be 8+ characters';
                mess += (/[\*\[\]\<\>\=\,]/).test(pass)?', characters "*[]<>=," are not permitted' : '';
				mess = mess.slice(2);

				if (mess) {
					$(this).addClass('invalid');
					$(this).parent().find('span.info').show();
					if(!toggle_icon.hasClass('showing')) {
						self.togglePassword(toggle_icon);
					}
					validateStatus = false;
				}
			});

			function validateEmail(email) {
				var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
				return re.test(email);
			}

			return validateStatus;
		},

		getOverlayFeed: function (url) {
			return $.getJSON('/feeds/triforce/module/v1?url=' + url);
		},

		preShowing: function () {
			this.elements.$html.addClass('showing_overlay');
			this.elements.$overlayBody.html('');
			if($('.massive_carousel').length != 0) {
				$NickPress.MassiveCarousel.clearTimeout();
			}
		},
		setCookie: function(name, value, expires) {
			if (expires > 0) {
				var d = new Date();
				d.setTime(d.getTime() + (expires * 24 * 60 * 60 * 1000));
				var expiryDate = 'expires=' + d.toGMTString();
			}
			else {
				var d = new Date();
				d.setTime(d.getTime() + (60 * 60 * 1000));
				var expiryDate = 'expires=' + d.toGMTString();
			}
			document.cookie = name + '=' + value + '; path=/; ' + expiryDate;
		},
		getCookie: function(name) {
			var cookieName = name + "=";
			var ca = document.cookie.split(';');
			for (var i=0; i<ca.length; i++) {
				var c = ca[i].trim();
				if (c.indexOf(cookieName) == 0) return c.substring(cookieName.length, c.length);
			}
			return false;
		},
		showOverlay: function (url) {
			var self = this;

			this.preShowing();

			this.getOverlayFeed(url).done(function(feed) {
				var feed = JSON.parse(feed.content);

				if (feed.content_feed) {
					$.getJSON(feed.content_feed + '/' + $NickPress.m001_v1.getCookie('ms_ses'), function (data) {
						data.feed = feed.feed;
						self.elements.$overlayBody.html(tmplEngine(url, feed.template, data));
						self.showingOverlay = url;
					});
				} else {
					self.elements.$overlayBody.html(tmplEngine(url, feed.template, feed));
					self.showingOverlay = url;
				}
			});
		},

		togglePassword: function (toggleIcon) {
			var $input = toggleIcon.siblings('input');

			toggleIcon.toggleClass('showing');

			if (toggleIcon.hasClass('showing')) {
				$input.prop('type', 'text');
			} else {
				$input.prop('type', 'password');
			}
		},

		showPlayerOverlay: function ($link) {
			this.preShowing();
			this.elements.$overlayHolder.addClass('video');

			this.elements.$overlayBody.append('<div id="jwplayer">');

			this.setupJWPlayer('jwplayer', {
				width: this.settings.video.width,
				aspectratio: this.settings.video.aspectratio,
				skinPath: this.settings.player.skinPath,
				thumbnail: $link.data('thumbnail'),
				fileLink: $link.attr('href')
			});
		},

		setupJWPlayer: function (elementID, settings) {
			jwplayer.key="ffIvvHWj0WVzoiMte+7dyD6X2ov+pqLj7rdjzQ==";
			jwplayer(elementID).setup({
				width: settings.width,
				aspectratio: settings.aspectratio,
				skin: settings.skinPath,
				image: settings.thumbnail,
				file: settings.fileLink,
				flashplayer: '/sitewide/jwplayer/jwplayer.flash.swf'
			});
		},

		stopJWPlayer: function(elementID) {
			try {
				jwplayer(elementID).stop();
			}
			catch(e) {
				/* jwplayer fall down */
			}
		}
	};
	$NickPress.Overlay.init();
})(window, document);

/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/debug.js */
(function($) {
	$Crabapple.TriforceDebug_v1 = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceDebug_v1, {
		sprite: '/webclient/mike/megaman_sprite.png',
		background:"#FFFFFF",
		currentFrame:0,
		elm: null,
		po: null,
		animation: [
			'megaman-0',
			'megaman-1',
			'megaman-2',
			'megaman-3',
			'megaman-4',
			'megaman-5',
			'megaman-6',
			'megaman-7'
		],
		init:function() {
			var self = this;
			this.hasAuthCookie();
		},
		cleanup: function() {
			$('li[data-mode="modes.debug.sections.crap"] .switch').trigger('click');
			$('body').attr('style', '');
			$('head').append('<link rel="stylesheet" type="text/css" href="/media/base.css?r=' + Math.floor(Math.random() * 1000000) + '" />');
		},
		debugEnabled: function() {
			var cookie = $.cookie("crabappleInformation");
			var info = JSON.parse(cookie);
			return this.hasMode('modes.debug.sections.javascript', info);
		},
		hasMode: function(mode, info) {
			var parts = mode.split('.'),
				tmp = info;
			if (tmp == null) return false;
			
			for (var i=0; i<parts.length-1; i++) {
				if (tmp[parts[i]] != null && tmp[parts[i]]) tmp = tmp[parts[i]];
				else return false;
			}
			return tmp[parts[i]];
		},
		drawModule: function() {
			$.ajaxSetup({ cache: true });
			var self = this;
			var body = $('body');
			body.append('<div id="triforce_debug"></div>');
			this.elm = $('#triforce_debug');
			this.elm.html(this.getHTML());
			this.fetchManifests();
			this.fetchArcStages();
			this.startAnimation();
			
			this.elm.find('.corner').on('click', function(event) {
				event.preventDefault();
				if ($(this).hasClass('stopped')) {
					$(this).removeClass('stopped'); 
					self.startAnimation();
					self.hideOverlay();
				}
				else {
					$(this).addClass('stopped');
					self.stopAnimation();
					self.showOverlay();
				}
			});

			this.elm.find('.page-clear').on('click', function(event) {
				if (self.po) {
					self.po.clear();
				} else {
					$.getScript('/triforce/debug/page-clear').done(function() {
						self.po = new $Crabapple.PageClear();
						self.po.showOverlay();
					});
				}
			});

			this.elm.find('.showMore').on('click', function(event) {
				event.preventDefault();
				if (self.elm.find('.moreOptions').hasClass('visible')) {
					self.elm.find('.moreOptions').removeClass('visible').hide();
					$(this).text('More Options');
				} else {
					self.elm.find('.moreOptions').addClass('visible').show();
					$(this).text('Fewer Options');
				}
			});
			
			this.elm.find('div.manifest select').on('change', function(event) {
				var manifest = $(this).val();
				self.setCurrentManifest(manifest);
			});
			
			this.elm.find('div.arcStageOverride select').on('change', function(event) {
				var stage = $(this).val();
				self.setCurrentArcStage(stage);
			});

            this.elm.find('div.logout').on('click', function(event) {
                event.preventDefault();
				$.cookie('crabappleAuthorization', null, {path:'/'});
				$.cookie('crabappleAuthorizationName', null, {path:'/'});
				$.cookie('crabappleInformation', null, {path:'/'});
                window.location.reload();
            });

			var cookie = $.cookie('crabappleInformation');
			if(cookie) {
				cookie = JSON.parse(cookie);
			}
			if (cookie && cookie.modes && cookie.modes.sme){
				$.getScript('/__crabapple_admin/js/sme/v1_0_0/sme.js',function() {
					$Crabapple.SME.init();
				});
			}

			this.elm.find('.switch').on('click', function(event) {
				var mode = $(this).parents('li').attr('data-mode');
				var crabappleInformation = $.cookie('crabappleInformation');
				if (crabappleInformation)
					var crabappleInformationObject = JSON.parse(crabappleInformation);
				
				else {
					var crabappleInformationObject = {
						'modes':{
							'manifest':'production',
						},
						'configuration':{}
					};
				}
				if ($(this).hasClass('on')) {
					$(this).removeClass('on');
					self.setModeValue(mode, false, crabappleInformationObject);
					if(mode.indexOf('sme') > 0){
						if($Crabapple.SME){
							$Crabapple.SME.destroy();
						}
					}
				}
				else {
					$(this).addClass('on');
					if (mode.indexOf('crap') >= 0) {
						$('head').find('link').each(function() {
							var href = $(this).attr('href');
							if (href.indexOf('base.css') >= 0) $(this).remove();
						});
						$('body').attr('style','font-family:"comic sans ms" !important;background:url("http://thecatapi.com/api/images/get?format=src&type=gif") repeat;');
						setTimeout(function() {
							self.cleanup();
						}, 5000);
					}else if(mode.indexOf('sme') > 0){
						$.getScript('/__crabapple_admin/js/sme/v1_0_0/sme.js',function() {
							$Crabapple.SME.init();
						});

					}
					self.setModeValue(mode, true, crabappleInformationObject);
				} 
				$.cookie('crabappleInformation', JSON.stringify(crabappleInformationObject), {path:'/'});
			});

			$('#triforceStandAloneFragment').on('click', function(event) {

				for(var zone in triforceManifestFeed.zones) {				
					var standAlone_url = '/triforce/module_debug/'+triforceManifestFeed.zones[zone].moduleName+'?feedUrl='+triforceManifestFeed.zones[zone].feed+'&crabappleErrors=true',
						html='';

					if (zone.replace('_promo','') == zone) {
						html += '<a title="'+zone+'" class="standalone_debug" target="_blank" href="'+standAlone_url+'">'+zone+': '+triforceManifestFeed.zones[zone].moduleName+' </a>';
					} else {
						var tier = zone.split('_')[0].replace(/(t|tier)/ig, '');
							promo = zone.split('_')[2].replace(/(promo)/ig, '');
						html += '<a title="'+zone+'" class="standalone_debug" target="_blank" href="'+standAlone_url+'">'+zone+': '+triforceManifestFeed.zones[zone].moduleName+' </a>';
					}
					$('body').prepend(html);					
				}

			});
		},
		setModeValue: function(mode, value, o) {
			var parts = mode.split('.');
			for (var i=0, tmp=o; i<parts.length - 1; i++) {
				if (!tmp[parts[i]]) {
					tmp = tmp[parts[i]] = {};
				}
				else { 
					tmp = tmp[parts[i]];
				}
			}
			tmp[parts[i]] = value;
			return o;
		},
		getHTML: function() {
			var self = this;
			var html = '';
			html += '<div class="corner">';
			html += '	<div class="megaman ' + self.animation[self.currentFrame] + '">';
			html += '	</div>';
			html += '</div>';
			html += '<div class="triforce_overlay">';
			html += '   <div class="manifest"></div>';
			html += '   <div class="arcStageOverride"></div>';
			html +=	'	<button class="page-clear">Clear This Page</button>';
			html += '	<div class="showMore">More Options</div>';
			html += '	<ul class="moreOptions" style="display:none;">';
			html +=	'		<li data-mode="modes.debug.sections.javascript" class="debug"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Debug</div></li>';
			html +=	'		<li data-mode="modes.cache.refreshObjects" class="cache"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Cache Refresh</div></li>';
			html +=	'		<li data-mode="modes.cdn.akamai.clearRequests" class="akamai"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Akamai Clear</div></li>';
			html +=	'		<li data-mode="modes.cache.refreshFeeds" class="feed"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">Feed Refresh</div></li>';
			if(config.getTriforceDebugPageClearButton && config.getTriforceDebugPageClearButton() == "1"){
				html +=	'		<li class="feed"><div class="standalone_debug" id="triforceCacheClearButton">Clear Page Cache</div></li>';
			}
			if(config.getSmeEnabled && config.getSmeEnabled() == "1") {
				html += '		<li data-mode="modes.sme" class="feed"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">SME</div></li>';
			}
			html +=	'		<li data-mode="modes.debug.sections.crap" class="feed"><div class="switch"><span class="thumb"></span><input type="checkbox" /></div><div class="text">MEOW!</div></li>';
			html += '	<div class="standalone_debug" id="triforceStandAloneFragment">StandAlone fragment</div>';
			html += '	</ul>';
            html += '   <div class="logout">Logout</div>';
			html += '</div>';
			return html;
		},
		hasAuthCookie: function() {
			var self = this;
			if (document.cookie.indexOf('crabappleAuthorization') > -1) {
				$.getJSON('/debugbar', function(response) {
					if (response && response.access) {
						self.drawModule();
						var cookie = $.cookie('crabappleInformation');
						if (cookie) {
							var info = JSON.parse(cookie);
							self.elm.find('li[data-mode]').each(function() {
								if (self.hasMode($(this).attr('data-mode'), info)) {
									$(this).find('.switch').addClass('on');
									if ($(this).attr('data-mode').indexOf('crap') >= 0) {
										$(this).find('.switch').removeClass('on');
									}
								}
							});
						}
					}
				});
				return true;
			}
			return false;
		},
		nextFrame: function() {
			var self = this;
			var timeout = 100;
			var previousFrame = self.currentFrame;
			if (self.currentFrame + 1 == self.animation.length) {
				self.currentFrame = 0;
			}
			else {
				self.currentFrame++;
			}
			
			if (self.currentFrame + 1 == self.animation.length) {
				timeout = 1000;
			}
			var megaman = self.elm.find('.megaman');
			if (megaman.hasClass('stopped')) return;
			megaman.removeClass(self.animation[previousFrame]).addClass(self.animation[self.currentFrame]);
			setTimeout(function() { self.nextFrame(); }, timeout);
		},
		startAnimation: function() {
			var self = this;
			var megaman = self.elm.find('.megaman');
			megaman.removeClass('stopped');
			setTimeout(function() { self.nextFrame(); }, 100);
		},
		stopAnimation: function() {
			var self = this;
			var megaman = self.elm.find('.megaman');
			megaman.removeClass(self.animation[self.currentFrame]);
			self.currentFrame = 0;
			megaman.addClass('stopped');
		},
		showOverlay: function() {
			this.elm.find('.triforce_overlay').fadeIn('fast');
		},
		hideOverlay: function() {
			this.elm.find('.triforce_overlay').fadeOut('fast');
		},
		fetchManifests: function() {
			var self = this,
			currentManifest = this.getCurrentManifest();
			this.elm.find('div.manifest').append('Manifest: <select name="modes.manifest"></select>');
			$.getJSON('/__crabapple_admin/manifest/ajax/list', function(response) {
				if (response.result) {
					for (var i in response.result) {
						if (response.result[i].id == currentManifest) {
							self.elm.find('div.manifest select').append('<option value="' + response.result[i].id + '" selected>' + response.result[i].name + '</option>');
						}
						else {
							self.elm.find('div.manifest select').append('<option value="' + response.result[i].id + '">' + response.result[i].name + '</option>');
						}
						
					}
				}
			});
		},
		getCurrentManifest: function() {
			var cookie = $.cookie('crabappleInformation');
			cookie = JSON.parse(cookie);
			if (cookie != null && cookie.modes && cookie.modes.manifest) return cookie.modes.manifest;
			return "production";
		},
		setCurrentManifest: function(manifest) {
			var cookie = $.cookie('crabappleInformation');
			cookie = JSON.parse(cookie);
            if (cookie == null) {
                cookie  = {
                    'modes':{
                        'manifest':'',
                    },
                    'configuration':{}
                };
            }
			if (cookie.modes && cookie.modes.manifest) {
				cookie.modes.manifest = manifest;
			}
			else if (cookie.modes) {
				cookie.modes.manifest = manifest;
			}
			else {
				cookie.modes = {
					"manifest":manifest
				};
			}

            if (localStorage && localStorage.clear) {
                localStorage.clear();
            }

			$.cookie('crabappleInformation', JSON.stringify(cookie), {path:'/'});
		},
		fetchArcStages: function() {
			var self = this,
				currentArcStage = this.getCurrentArcStage();
			this.elm.find('div.arcStageOverride').append('Arc Stage: <select name="modes.arcStage"></select>');
			var arcStagesAvailable = [
				{ id:'default',name:'Site Default'},
				{ id:'live',name:'Live'},
				{ id:'staging',name:'Staging'},
				{ id:'authoring',name:'Authoring'}
			];
			for (var stage in arcStagesAvailable)
			{
				var selected = '';
				if (arcStagesAvailable[stage].id == currentArcStage)
				{
					selected = ' selected="selected"';
				}
				
				self.elm.find('div.arcStageOverride select').append('<option value="' + arcStagesAvailable[stage].id + '"' + selected + '>' + arcStagesAvailable[stage].name + '</option>');
			}
		},
		getCurrentArcStage: function() {
			var cookie = $.cookie('crabappleInformation');
			cookie = JSON.parse(cookie);
			if (cookie != null && cookie.modes && cookie.modes.arcStage) return cookie.modes.arcStage;
			return "default";
		},
		setCurrentArcStage: function(arcStage) {
			var cookie = $.cookie('crabappleInformation');
			cookie = JSON.parse(cookie);
            if (cookie == null) {
                cookie  = {
                    'modes':{
                        'arcStage':'',
                    },
                    'configuration':{}
                };
            }
			if (cookie.modes && cookie.modes.arcStage) {
				cookie.modes.arcStage = arcStage;
			}
			else if (cookie.modes) {
				cookie.modes.arcStage = arcStage;
			}
			else {
				cookie.modes = {
					"arcStage":arcStage
				};
			}
            if (localStorage && localStorage.clear) {
                localStorage.clear();
            }

			$.cookie('crabappleInformation', JSON.stringify(cookie), {path:'/'});
		}
	});
}) (jQuery);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/image_broker.js */
(function($,w) {
	$Crabapple.TriforceImageBroker = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceImageBroker, {
		_deferredImages: null,
		devicePixelRatio: null,

		init: function() {
			this._deferredImages = [];
			this.devicePixelRatio = w.devicePixelRatio || 1;

			this.addEvents();
			this.processDeferredImages();
		},

		processDeferredImages: function () {
			var images = document.querySelectorAll('.image_holder.deferred');

			for (var i = 0, len = images.length; i < len; i++) {
				w.Triforce.getMediator().trigger('triforce:queueimage', {
					'holder': images[i],
					'info': JSON.parse(images[i].getAttribute('data-info'))
				});
			}
		},

		addEvents: function () {
			var self = this,
				mediator = w.Triforce.getMediator();

			mediator.on('triforce:pagestartload', function () {
				self._deferredImages = [];
			});
			mediator.on('triforce:queueimage', function (event) {
				var imageToQueue = event[1];

                if (imageToQueue && imageToQueue.holder) {
                    $(imageToQueue.holder).on('loadImage', function () {
                        window.Triforce.getMediator().trigger('triforce:loadqueuedimage', imageToQueue);
                    });
                    self._deferredImages.push(imageToQueue);
                }
			});
			mediator.on('triforce:loadqueuedimage', function (event) {
				self.checkDeferredImage(event[1]);
			});

			mediator.on('triforce:module:rendered triforce:pagerendercomplete triforce:pageintouch', function () {
				self.checkDeferredImages();
			});

			var scrollCounter = 1,
				scrollTimeoutId;

			$(w).on('ontouchmove' in w ? 'touchmove scroll' : 'scroll', function () {
				clearTimeout(scrollTimeoutId);
				if (scrollCounter % 10 === 0) {
					scrollCounter = 1;
					mediator.trigger('triforce:pageintouch');
				}
				scrollCounter++;
				scrollTimeoutId = setTimeout(function () {
					mediator.trigger('triforce:pageintouch');
				}, 50);
			});

			var resizeTimeoutId;

			$(w).on('resize', function () {
				clearTimeout(resizeTimeoutId);
				resizeTimeoutId = setTimeout(function () {
					self.checkDeferredImages();
				}, 200);
			});
		},

		checkDeferredImages: function () {
			for (var i = 0, len = this._deferredImages.length; i < len; i++) {
				if (this.isVisible(this._deferredImages[i].holder)) {
					this.checkDeferredImage(this._deferredImages[i]);
				} else {
					if (this._deferredImages[i].image && this._deferredImages[i].image.src.indexOf('.gif') >= 1) {
						if (this._deferredImages[i].image.src.indexOf('?format=jpg') < 0) {
							this._deferredImages[i].image.src = this._deferredImages[i].image.src + '?format=jpg';
						}
					}
				}
			}
		},
		checkDeferredImage: function (image) {
			if (image) {
				if (!image.processed) {
					this.processLoadingImage(image);
				} else {
					this.processReloadingImage(image);
				}
			}
		},

		processLoadingImage: function (deferredImage) {
			var image = deferredImage.image = new Image(),
				imageDimensions = {
					width: deferredImage.holder.clientWidth,
					height: deferredImage.holder.clientHeight
				},
				imageInformation = deferredImage.source = this.getAppropriateImage(deferredImage.info, imageDimensions);

			imageInformation.original && this.getImageDimensions(imageDimensions, imageInformation.original);

			// Store information about the currently selected image dimensions
			deferredImage.width = imageDimensions.width;
			if (imageDimensions.height) {
				deferredImage.height = imageDimensions.height;
				deferredImage.aspectRatio = this.getAspectRatio(imageDimensions);
			}

			image.className = 'image';
			image.onload = function () {
				if ('classList' in deferredImage.holder) {
					deferredImage.holder.classList.remove('deferred');
				} else {
					var classes = deferredImage.holder.className.split(' '),
						index = classes.indexOf('deferred');

					if (index !== -1) {
						classes.splice(index, 1);
						deferredImage.holder.className = classes.join(' ');
					}
				}
			};
			image.src = this.getImageURL(imageInformation.src, {
				width: deferredImage.width,
				height: deferredImage.height,
				quality: imageInformation.quality
			});

			image.alt = imageInformation.alt ? imageInformation.alt : "";

			deferredImage.holder.appendChild(image);
			deferredImage.processed = true;
		},

		processReloadingImage: function (imageObject) {
			var imageDimensions = {
					width: imageObject.holder.clientWidth,
					height: imageObject.holder.clientHeight
				},
				imageInformation = this.getAppropriateImage(imageObject.info, imageDimensions),
				sourceChanged = imageObject.source !== imageInformation,
				aspectRatio,
				image;

			imageObject.source = imageInformation;

			imageInformation.original && this.getImageDimensions(imageDimensions, imageInformation.original);

			// If image was initially loaded based on some aspect ratio - we need to check if it's still persist.
			// So we calculate it
			if (imageObject.aspectRatio) {
				aspectRatio = this.getAspectRatio(imageDimensions);
			}

			// We need to reload the image in cases if the source changed/its width or height is not enough or aspect ratio changed
			if (sourceChanged
				|| imageDimensions.width > imageObject.width
				|| (imageObject.height && (imageDimensions.height > imageObject.height || aspectRatio !== imageObject.aspectRatio)))
			{
				// Update inforamtion about currently selected image
				imageObject.width = imageDimensions.width;
				if (imageObject.height) {
					imageObject.height = imageDimensions.height;
					imageObject.aspectRatio = aspectRatio;
				}

				image = new Image();

				image.className = 'image';
				image.onload = function () {
					imageObject.holder.replaceChild(image, imageObject.image);
					imageObject.image = image;
				};
				image.src = this.getImageURL(imageInformation.src, {
					width: imageObject.width,
					height: imageObject.height,
					quality: imageInformation.quality
				});
				if (imageInformation.alt) {
					image.alt = imageInformation.alt;
				} else {
					image.alt = "";
				}

			}

			if (imageObject.image && imageObject.image.src && imageObject.image.src.indexOf('.gif?format=jpg') > 0) {
				imageObject.image.src = imageObject.image.src.replace('.gif?format=jpg', '.gif');
			}


		},

		getImageURL: function (src, params) {
			var resizeParams = [];

			// We don't resize GIFs, as ImageServer doesn't support it
			if (src.toLowerCase().indexOf('.gif') !== -1) {
				return src;
			}

			if (params.quality) {
				resizeParams.push('quality=' + params.quality);
			}

			if (params.width) {
				resizeParams.push('width=' + params.width);
			}

			if (params.height) {
				resizeParams.push('height=' + params.height);
			}

			// If both width & height are passed - it signalizes us that we need to crop it
			if (params.width && params.height) {
				resizeParams.push('crop=true');
			}

			if (resizeParams.length) {
				src += (src.indexOf('?') !== -1 ? '&' : '?') + resizeParams.join('&');
			}

			return src;
		},

		getAppropriateImage: function (images, dimensions) {
			var i, len,
				bestImage,
				bestAspectRatioDiff,
				image,
				aspectRatioDiff,
				requiredAspectRatio;

			if (images instanceof Array) {
				if (images.length > 1) {
					requiredAspectRatio = this.getAspectRatio(dimensions);

					for (i = 0, len = images.length; i < len; i++) {
						image = images[i];

						// Unfortunately there's no information about the image, so we can't really determine if it's OK
						if (!image || !image.original) {
							continue;
						}

						// Let's calculate the difference between aspect ratio we need and one that image has
						// So we can find out which one would be better to use to fill that space
						aspectRatioDiff = requiredAspectRatio - this.getAspectRatio(image.original);
						if (aspectRatioDiff < 0) {
							aspectRatioDiff *= -1;
						}

						// Check if the best image we've found by that point isn't better than one that we're looking at atm:
						//   * current image is closer to the aspect ratio we need and has enough width
						//   * current image has the same aspect ratio as the best one we've found so far, but has larger width
						//   * current image has enough width, when best image candidate - doesn't
						if (!bestImage || bestAspectRatioDiff > aspectRatioDiff && image.original.width - dimensions.width >= 0
							|| aspectRatioDiff === bestAspectRatioDiff && image.original.width > bestImage.original.width
							|| image.original.width - dimensions.width >= 0 && bestImage.original.width - dimensions.width < 0)
						{
							bestImage = image;
							bestAspectRatioDiff = aspectRatioDiff;
						}
					}

					return bestImage;
				} else {
					return images[0];
				}
			} else {
				return images;
			}
		},

		getImageDimensions: function (dimensions, originalDimensions) {
			var aspectRatioRounded = this.getAspectRatio(dimensions),
				aspectRatio = this.getAspectRatio(dimensions, true);

			if (this.devicePixelRatio > 1) {
				dimensions.width = Math.ceil(this.devicePixelRatio * dimensions.width);
				dimensions.height = Math.ceil(this.devicePixelRatio * dimensions.height);
			}

			if (!dimensions.width || dimensions.width > originalDimensions.width) {
				dimensions.width = originalDimensions.width;
			}

			if (dimensions.height && dimensions.height > originalDimensions.height) {
				dimensions.height = originalDimensions.height;
			}

			if (originalDimensions.aspectRatio !== null) {
				originalDimensions.aspectRatio = this.getAspectRatio(originalDimensions);
			}

			if (originalDimensions.aspectRatio) {
				if (originalDimensions.aspectRatio > aspectRatioRounded) {
					dimensions.width = Math.ceil(dimensions.height * aspectRatio);
				} else {
					dimensions.height = Math.ceil(dimensions.width / aspectRatio);
				}
			}
		},

		getAspectRatio: function (dimension, notRound) {
			var aspectRatio = null;

			if (dimension.height) {
				aspectRatio = dimension.width / dimension.height;

				if (!notRound) {
					aspectRatio = Math.round(aspectRatio * 10) / 10;
				}
			}

			return aspectRatio;
		},

		isVisible: function (el) {
			if (!el.parentNode) {
				return false;
			}
			var elRect = el.getBoundingClientRect(),
				wWidth = w.innerWidth,
				wHeight = w.innerHeight,
				hasRect = elRect.bottom || elRect.height || elRect.left || elRect.right || elRect.top || elRect.width;

			return hasRect && (elRect.top >= 0 ? elRect.top <= wHeight : elRect.bottom >= 0)
			       && (elRect.left >= 0 ? elRect.left <= wWidth : elRect.right >= 0);
		}
	});
}) (jQuery, window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/layout_manager.js */
(function($,w) {
	$Crabapple.TriforceLayoutManager = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceLayoutManager, {
		contentHolder: $('#content_holder'),
		$body: $(document.body),
		globalZones: null,
		globalZoneList: [],
		priorityList: {},
		moduleTimeout: 30000,
		pageClass: null,
		languagePreferences: null,
		init: function() {
			if(window.Triforce && window.Triforce.config && window.Triforce.config.globalZones) {
				this.globalZones = window.Triforce.config.globalZones.join(',');
			}
		},
		startLayout:function() {
			var feed = triforceManifestFeed;
			if (this.pageClass != null) {
				$('body').removeClass(this.pageClass);
			}
			if (feed.pageClass && feed.pageClass != null) {
				$('body').addClass(feed.pageClass);
			}
			if (feed.pageClass) {
				this.pageClass = feed.pageClass;
			} else {
				this.pageClass = null;
			}
			if (!feed || !feed.zones) {
				w.Triforce.getMediator().trigger('triforce:pageerror', 'No zones in feed');
			}

			if (feed.languagePreferences) {
				this.languagePreferences = feed.languagePreferences;
			}

			this.clearBodyCSS();
			if (feed.css != null || feed.supplemental != null) {
				this.addBodyCSS(feed);
			}

			w.Triforce.getMediator().trigger('triforce:bodystart', 'Triggering bodystart');

			if (window.Triforce.config.tierWrapper) {
				var $tierWrapper = $('.tier_wrapper');

				if ($tierWrapper.length) {
					$tierWrapper.children().unwrap();
				}
			}

			if (this.contentHolder.attr('data-initial') && this.contentHolder.attr('data-initial') === 'true') {
				this.contentHolder.removeAttr('data-initial');
			} else {
				this.clearContent(feed.zones);
			}

			this.globalZoneList = [];
			this.priorityList = {};

			this.createZones(feed.zones);

			if (window.Triforce.config.tierWrapper) {
				var $tiersToWrap = $('.tier_2_col, .tier_3_col');

				if ($tiersToWrap.length) {
					$tiersToWrap.wrapInner('<div class="tier_wrapper"></div>');
				}
			}

			return this.priorityList;
		},

		clearContent: function(zones) {
			var _this = this;

			$('.module, .triforce-module').each(function(key, module) {
				var $module = $(module),
					moduleID = $module[0].id;

				if (moduleID && zones[moduleID]) {
					_this.removeGlobalModule($module);
					return true;
				}

				$module.remove();
			});

			var requiredZones = {};
			for(var zone in zones) {
				var zoneLocation = parseInt(zone.split('_')[0].substr(1));
				if(zoneLocation > 0) {
					requiredZones[zoneLocation] = true;
				}
			}

			var tiers = this.contentHolder[0].querySelectorAll('[id^="tier_"]');
			for (var i=0; i<tiers.length; i++) {
				var cols = tiers[i].querySelectorAll('[id$="_lc"],[id$="_rc"],[id$="_mc"]'),
					currentTier = tiers[i].id.split('_')[1],
					tierRequired = requiredZones[tiers[i].id.split('_')[1]];

				if(!tierRequired && tiers[i].parentNode) {
					tiers[i].parentNode.removeChild(tiers[i]);
				} else {
					if (cols.length) {
						for (var j=0; j<cols.length; j++) {
							tiers[i].removeChild(cols[j]);
						}
					}
					tiers[i].className = '';
				}
			}
			window.Triforce.getMediator().trigger('triforce:clearqueues');
		},

		removeGlobalModule: function ($module) {
			var moduleFeed = $module.data().tffeed,
				zone = $module.data().zone,
				feed;

			if (!zone) {
				return;
			}

			feed = triforceManifestFeed.zones[zone].feed;
			if (moduleFeed !== feed) {
				$module.remove();
			}

		},

		createZones: function(zones) {
			for (var key in zones) {
				var zone = zones[key],
					zoneName = zone.zone,
					isGlobal = false;

				if (this.globalZones.indexOf(zoneName) >= 0) {
					isGlobal = true;
					this.addGlobalZone(zone);
					continue;
				}

				if (!isGlobal && zoneName.indexOf('_') < 0)  {
					w.Triforce.getMediator().message({'type':'warning','message':'Zone ' + zoneName + ' seems to be invalid.  It cannot be placed on the page'});
					continue;
				}
				var placement = this.getModulePlacement(zoneName);
				var module = this.placeModule(zoneName, placement);
				this.addModuleAttributes(module, zone);
				this.addPriority(zone.priority, zoneName, module);
				if (!module.attr('data-tfstatic') || module.attr('data-tfstatic') !== true) {
					if (zone.feedData != null) {
						w.Triforce.getMediator().trigger('triforce:feedloaded', zone.feed, zone.feedData, module);
					}
					else {
						if (!module.data('tffeed'))
							w.Triforce.getMediator().trigger('triforce:feedloaded', zone.feed, zone.feedData, module);
						else
							w.Triforce.getMediator().trigger('triforce:loadfeed', module.data('tffeed'), module);
					}
				}
				else {
					if (zone.feedData != null) {
						module.data('tffeed',zone.feed);
						w.Triforce.getMediator().trigger('triforce:feedloaded', zone.feed, zone.feedData, module);
					}
					module.trigger('triforce:module:feedLoaded');
				}
				this.fireModuleEvent(zone);
			}
			this.sortGlobalZones();
			this.createGlobalZones();
		},
		addGlobalZone: function(zone) {
			this.globalZoneList[this.globalZoneList.length] = zone;
		},

		addPriority: function(priority, zone, $module) {
			if (!this.priorityList[priority]) {
				this.priorityList[priority] = [];
			}
			this.priorityList[priority].push({
				'zone': zone,
				'module': $module,
				'uid': $module.data('uid')
			});
		},

		getModulePlacement: function(zone) {
			var tier = zone.split('_')[0].replace(/(t|tier)/ig, ''),
				column = zone.split('_');

			if (column.length === 2) {
				column = '1';
			} else {
				column = column[1].replace(/(c)/ig, '');
			}

			return {
				'tier': tier,
				'column': column
			};
		},
		placeModule: function(zone, placement) {
			var currentTierName = 'tier_' + placement.tier,
				currentColName = 't' + placement.tier + '_' + placement.column + 'c',
				tier = document.getElementById(currentTierName),
				col = document.getElementById(currentColName),
				zoneDiv = document.getElementById(zone);

			// Create the tier and column, if needed.
			if (!tier) {
				var tiers = this.contentHolder[0].querySelectorAll('[id^="tier_"]'),
					tierNumber;

				tier = document.createElement('div');
				tier.id = currentTierName;

				for (var i = 0, tiersCount = tiers.length; i < tiersCount; i++) {
					// Get tier number from tier name
					tierNumber = parseInt(tiers[i].id.replace('tier_', ''), 10);

					if (tierNumber > placement.tier) {
						tiers[i].parentNode.insertBefore(tier, tiers[i]);
						break;
					} else if (i == tiersCount - 1) {
						tiers[i].parentNode.insertBefore(tier, tiers[i].nextSibling);
					}
				}
				//There was no tiers on the page. Inserting into content Holder
				if (!document.getElementById(currentTierName)) {
					tier =  this.contentHolder[0].insertBefore(tier, this.contentHolder[0].lastElementChild);
				}
			} else {
				if (this.getColumnCount(tier) > 1) {
					tier.className = 'tier_' + this.getColumnCount(tier) + '_col';
				}
				else {
					tier.className = '';
				}
			}
			if (!col) {
				col = document.createElement('div');
				col.id = 't' + placement.tier + '_' + placement.column + 'c';
				tier.appendChild(col);
				if (this.getColumnCount(tier) > 1) {
					tier.className = 'tier_' + this.getColumnCount(tier) + '_col';
				}
				else {
					tier.className = '';
				}
			}

			// Check to see if we already have this zone.
			if (zoneDiv && zoneDiv.getAttribute('data-tfstatic') !== 'true') {
				var newZone = this.createZoneDiv(zone);

				zoneDiv.parentNode && zoneDiv.parentNode.replaceChild(newZone, zoneDiv);
				zoneDiv = newZone;
			}
			if (!zoneDiv) {
				zoneDiv = this.createZoneDiv(zone);
				col.appendChild(zoneDiv);
			}

			return $(zoneDiv);
		},

		createZoneDiv: function (zone) {
			var zoneDiv = document.createElement('div');

			zoneDiv.setAttribute('data-zone', zone);

			return zoneDiv;
		},

		getUniqId: function() {
			var id = 0;
			return function() {
				return id++;
			};
		},

		addModuleAttributes: function(module, zone) {

			module.data('uid', this.getUniqId());

			if (module.attr('data-tfstatic') && module.attr('data-tfstatic') === 'true') {
				if (zone.mobile && zone.mobile === true && window.Triforce.getMediator().isMobile()) {
					module.empty();
					module.removeAttr('data-tfstatic');
				} else {
					module.attr({
						'data-tfpriority': zone.priority,
						'data-tfmethod': 'triforce_v1',
						'data-tffeed': zone.feed
					});
					module.data('tfscripthash', zone.scriptHash);
					return;
				}

			}

			if (this.languagePreferences) {
				module.empty();
				module.removeAttr('data-tfstatic');
			}

			module.addClass('triforce-module');

			if (zone.version && zone.version == "V3") {
				module.data('tfversion', '3');
				module.data('tfname', zone.moduleName);
				module.data('tfscripthash', zone.scriptHash);
				module.attr('data-tfdriver', zone.driver);
                if(zone.moduleName) {
                    module.addClass(zone.moduleName.toLowerCase());
                }
				if (zone.mobile && zone.mobile === true && window.Triforce.getMediator().isMobile()) {
					if (zone.feed.indexOf('?') >= 0) {
						zone.feed += '&mobile=true';
					} else {
						zone.feed += '?mobile=true';
					}
				}
			}

			if (this.languagePreferences) {
				if (zone.feed.indexOf('?') >= 0) {
					zone.feed += '&lang=' + this.languagePreferences;
				} else {
					zone.feed += '?lang=' + this.languagePreferences;
				}
			}

			module.attr({
				'data-tffeed': zone.feed,
				'data-tfmethod': zone.method,
				'data-tfpriority': zone.priority,
				'data-tfloading': true,
				'data-tfreload': zone.reload
			});
			module.data('tffeed', zone.feed);
			if (zone.libraries !== null) {
				var libraries = zone.libraries,
					libsString = '',
					hashString = '';

				module.data('tfdriver', zone.moduleDriver);
				if (zone.template)  {
					module.data('tftemplate', zone.template);
				}
                if (libraries) {
                    for (var index = 0; index < libraries.length; index++) {
                        libsString += libraries[index].script;
                        hashString += libraries[index].hash;
						if (index != (libraries.length -1)) {
							libsString += ',';
							hashString += ',';
						}
                    }
                    module.data('tflibs', libsString);
                    module.data('tflibshash', hashString);
                }
			}
		},
		sortGlobalZones: function() {
			this.globalZoneList.sort(function(a, b) {
				if (a.zone.indexOf('menu') || b.zone.indexOf('footer')) {
					return -1;
				}
				if (a.zone.indexOf('footer') || b.zone.indexOf('menu')) {
					return 1;
				}
				return 0;
			});
		},
		createGlobalZones: function() {
			var $zone, zone, zoneName;

			for (var key in this.globalZoneList) {

				zone = this.globalZoneList[key];
				zoneName = zone.zone;
				$zone = $('#' + zoneName);

				if (this.languagePreferences || $zone.currentLanguage != this.languagePreferences) {
					$zone.empty();
					$zone.removeData('tffeed tfrendered feedloaded scriptsloaded');
					$zone.removeAttr('data-tffeed data-tfrendered data-tfstatic data-tfdriver data-tflibs data-feedloaded data-scriptsloaded class');

					if (zone.feed && zone.feed.indexOf('?') >= 0) {
						zone.feed += '&lang=' + this.languagePreferences;
					} else {
						zone.feed += '?lang=' + this.languagePreferences;
					}
				}

				// Checking whether or not this module is registered.
				if ($zone.length && !w.Triforce.getMediator().isModuleRegistered(zoneName, zone.feed, zone.moduleDriver, zone.libraries)) {
					if (!$zone.data('tfstatic')) {
						$zone.empty();
						$zone.removeData('tffeed tfrendered feedloaded scriptsloaded');
						$zone.removeAttr('data-tffeed data-tfrendered data-tfstatic data-tfdriver data-tflibs data-feedloaded data-scriptsloaded class');
					}
				}
				w.Triforce.getMediator().registerModule(zoneName, zone.feed, zone.moduleDriver, zone.libraries);

				if (!$zone.length) {
					if (zoneName.indexOf('menu') >= 0 || zoneName.indexOf('report') >= 0) {
						if (!this.contentHolder.parent().find('.header #' + zoneName).length) {
							if (this.contentHolder.parent().find('.header').length) {
								$zone = $('<div id="' + zoneName + '"/>').prependTo(this.contentHolder.parent().find('.header'));
							} else {
								$zone = $('<div id="' + zoneName + '"/>').prependTo(this.contentHolder);
							}
						}
					} else if (zoneName.indexOf('header') >= 0) {
						$zone = $('<div id="' + zoneName + '"/>').insertBefore(this.contentHolder);
					} else if (zoneName.indexOf('footer') >= 0) {
						$zone = $('<div id="' + zoneName + '"/>').appendTo(this.contentHolder.parent());
					} else {
						$zone = $('<div id="' + zoneName + '"/>').appendTo(this.contentHolder);
					}
				}

				if ($zone.data('tfrendered') === true) {
					// We don't need to take action - this module is rendered.
					$zone.removeAttr('data-tfpriority');
				} else {
					$zone.attr('data-zone', zoneName);
					this.addModuleAttributes($zone, zone);
					this.addPriority(zone.priority, zoneName, $zone);
					if (!$zone.attr('data-tfstatic') || $zone.attr('data-tfstatic') !== true) {
						if (zone.feedData && zone.feedData !== null) {
							w.Triforce.registerFeedLoaded(zone.feed, zone.feedData, $zone);
						} else {
							w.Triforce.queueFeedLoad($zone.data('tffeed'), $zone);
						}
					} else {
						w.Triforce.getMediator().trigger('triforce:module:feedloaded', $zone);
					}
				}
				this.fireModuleEvent(zone);
				$zone.currentLanguage = this.languagePreferences;
			}
		},
		fireModuleEvent: function(zone){
			if(zone.moduleName && zone.feed){
				w.Triforce.getMediator().trigger('triforce:module:load:'+zone.moduleName, zone.feed);
			}
		},
		getColumnCount: function(tier) {
			var nodes = tier.childNodes,
				count = 0;
			if (nodes.length) {
				for (var i=0; i<nodes.length; i++) {
					if (typeof (nodes[i].tagName) != 'undefined' && nodes[i].tagName.toLowerCase() == 'div') {
						count++;
					}
				}
			}

			return count;
		},
		clearBodyCSS: function() {
			var classes = this.$body.attr('class');

			if (classes) {
				classes = classes.split(' ');
				for (var i in classes) {
					if (classes[i].indexOf('from_page') >= 0){
						this.$body.removeClass(classes[i]);
						$('#' + classes[i].replace('from_page_', '')).remove();
					}
				}
			}

            if ($('#color_scheme').length) {
                if ($('#color_scheme').attr('data-setup')) {
                    $('#color_scheme').removeAttr('data-setup');
                } else {
                    $('#color_scheme').remove();
                }
            }
		},
		addBodyCSS: function (feed) {

            if (feed.css) {
                var css = feed.css, pageId = feed.id;
                if (window.Triforce.config.CSSHelperDriverName && window.Triforce.config.CSSHelperPackage) {
                    w.Triforce.scriptManager.loadStandaloneScript(window.Triforce.config.CSSHelperPackage, function() {
                        var driver = new window['$Crabapple']['TriforceHelper_' + window.Triforce.config.CSSHelperDriverName]();
                        driver.init(css, pageId);
                    });
                } else {
                    var prefix = '.from_page_' + pageId,
                        style = document.createElement('style');

                    this.$body.addClass('from_page_' + pageId);

                    style.type = 'text/css';
                    style.id = pageId;
                    style.innerHTML = (this.getCSSContents(css, prefix));
                    document.head.appendChild(style);
                }
            }

            if (feed.supplemental && feed.supplemental.colors && feed.supplemental.colors.colors) {
                var colorScheme = feed.supplemental.colors.colors, s = document.createElement('style'), content = '';

                s.type = 'text/css';
                s.id = 'color_scheme';
                for (var selector in colorScheme) {
                    content += ' .' + selector + ' { ' + 'color:' + colorScheme[selector] + ' } ';
                    content += ' .' + selector + '_background { ' + 'background-color:' + colorScheme[selector] + ' } ';
                }
            }


		},
		getCSSContents: function(css, prefix) {
			var contents = '@media screen and (min-width: 1200px) {',
				selectorsList = '#background_holder';

			if (triforceManifestFeed.CMSTitle.match(/player/i)) {
				selectorsList = '.player';
			}

			if (css.pageBackgroundImage) {
				if (!css.pageBackgroundColor) css.pageBackgroundColor = 'transparent';
				contents += prefix + ' ' + selectorsList + ' {';
				contents += 'background: ' + css.pageBackgroundColor + ' url(' + css.pageBackgroundImage + ') no-repeat top center !important;';
				contents += '}';
			}

			contents += '}';
			return contents;
		},
		fetchLegacyPriorities: function() {
			var self = this;
			this.priorityList = {};

			if ($('[data-tfpriority]').length) {
				$('[data-tfpriority]').each(function() {
					var t = $(this);
					self.addPriority(t.attr('data-tfpriority'), t.attr('data-zone'), t);
					if (!t.attr('data-tffeed')) t.data('feedloaded', 'true');
				});
				return this.priorityList;
			} else {
				return false;
			}
		}
	});
}) (jQuery, window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/mediator.js */
(function($,w) {
	$Crabapple.TriforceMediator = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceMediator, {
		listeners: {},
		registeredModules: {},
		waitTimes: {'priority':1000, 'helper':3000},
		triforceDebugEnabled: false,
		triforceDebug: {},
		triforcePageReady: false,
		triforcePageUrl: '',
		triforceInitialLoad: true,

		/**
		 * Stores arguments list of triggered events, so we can reference to them later if needed
		 *
		 * @var object
		 */
		_firedEvents: null,

		/**
		 * Adds a listener for events. It can be single event or set of events separated by space. If 3rd parameter is passed,
		 * the callback will be called right away if there's some event that has been already fired before the subscription
		 *
		 * @param {string} eventNames Events names separated by space
		 * @param {function} callback A callback function, which will be called when event occurs
		 * @param {bool} checkFired Determines whether we should check for fired events or not
		 */
		on: function(eventNames, callback, checkFired) {
			var eventType;

			eventNames = eventNames.split(' ');
			for (var i = 0, len = eventNames.length; i < len; i++) {
				eventNames[i] = eventNames[i].toLowerCase();
				this.listeners[eventNames[i]] = this.listeners[eventNames[i]] || [];
				this.listeners[eventNames[i]].push(callback);

                // only page events for now
				if (checkFired === true && this.isPageLevelEvent(eventNames[i])) {
					eventType = 'page';

					if (this._firedEvents[eventType] && this._firedEvents[eventType][eventNames[i]]) {
						callback(this._firedEvents[eventType][eventNames[i]]);
					}
				}
			}
		},

		/**
		 * Removes event listener. If there wasn't any specific callback passed - all listeners are removed
		 *
		 * @param {string} eventName A name of the event to remove listener from
		 * @param {function} callback Callback function by which we find the listener to remove
		 */
		off: function (eventName, callback) {
			var toKeepAlive,
			    callbacks,
			    i, len;

			// There's no any callbacks for this event
			if (!this.listeners[eventName] || !this.listeners[eventName].length) {
			    return;
			}
			// There's no callback passed - so we just remove all callbacks for this event
			if (eventName && !callback) {
			    this.listeners[eventName] = null;
			    delete this.listeners[eventName];

			    return;
			}

			callbacks = this.listeners[eventName];
			this.listeners[eventName] = toKeepAlive = [];

			for (i = 0, len = callbacks.length; i< len; i++) {
			    if (callbacks[i].callback !== callback) {
			        toKeepAlive.push(callbacks[i]);
			    }
			}

			if (!toKeepAlive.length) {
			    this.listeners[eventName] = null;
			    delete this.listeners[eventName];
			}
		},

		/**
		 * Triggers an event, first argument is a name of the event. The rest of the arguments are passed as the first
		 * argument into the callback. The arguments list is stored in _firedEvents object by the type of the event(page)
		 *
		 * @param {string} eventName A name of the event to be fired
		*/
		trigger:function(eventName) {
			var eventType;

			if (!arguments || !arguments.length) return;

			eventName = eventName.toLowerCase();

			// do only pages for now, cuz we know when to clear stored info
			if (this.isPageLevelEvent(eventName)) {
				eventType = 'page';

				this._firedEvents[eventType] = this._firedEvents[eventType] || {};
				this._firedEvents[eventType][eventName] = arguments;
			}

			if (!this.listeners[eventName] || !this.listeners[eventName].length) {
				this.message({'type':'debug', 'message':'No listener is registered for ' + eventName});
				return;
			}

			for (var i = 0, len = this.listeners[eventName].length; i < len; i++) {
				try {
					this.listeners[eventName][i](arguments);
				} catch (e) {
					this.message({
						type: 'error',
						message: eventName + ' event callback failed with an error',
						exception: e
					});
				}
			}
		},

		isPageLevelEvent: function (eventName) {
			eventName = eventName.split(':');

			return eventName[0] === 'page' && eventName[1] !== undefined;
		},

		init: function() {
			this.initializeDebug();
			this.initializeEvents();
		},
		initializeDebug: function() {
			if (document.cookie.indexOf('crabappleAuthorization') >= 0) {
				this.triforceDebugEnabled = true;
				this.triforceDebug = new window.$Crabapple.TriforceDebug_v1();
				this.triforceDebug.init();
			}
            else if (typeof(triforceDebugOverride) != 'undefined' && triforceDebugOverride == true) {
                this.triforceDebugEnabled = true;
                this.triforceDebug = new window.$Crabapple.TriforceDebug_v1();
                this.triforceDebug.init();
            }
		},
		initializeEvents: function() {
			this._firedEvents = {};

			this.initializePageEvents();
			this.initializeFeedEvents();
			this.initializeScriptEvents();
			this.initializeModuleEvents();
			this.initializeErrorEvents();
            this.initializeStorageEvents();
            this.initializeMonitorEvents();
		},
		debugEnabled: function() {
			if (window.Triforce.config.debug && window.Triforce.config.debug != 'false') return true;
			
			if (this.triforceDebugEnabled === true) {
				return this.triforceDebug.debugEnabled();
			}
			return false;
		},
		initializePageEvents: function() {
			var self = this;
            this.on('triforce:complete', function() {
                self.message({'type':'message', 'message':':: Triforce:complete - all modules rendered ::.'});
            });
			this.on('triforce:pagestartload', function() {
				self._firedEvents.page = {};
				self.message({'type':'message', 'message':'Triforce Page started loading.'});
			});
			this.on('triforce:pageredirect', function() {
				self.message({'type':'message', 'message':'Triforce Page got redirect.'});
			});
			this.on('triforce:pageloaded', function() {
				w.Triforce.getPageLoader().handleInitialLoad();
			});
			this.on('triforce:pageready', function() {
				w.Triforce.pageReady();
				self.trigger('triforce:message', {'type':'debug','message':'Triforce Page Ready'});
				self.triforcePageReady = true;
				self.triforcePageUrl = document.location.pathname;
			});
			this.on('triforce:rendercomplete', function() {
				self.message({
					'type': 'message',
					'message': 'Page render is complete.  All modules rendered'
				});
			});
			this.on('triforce:message', function(arg) {
				var data = null;
				if (arg && arg.length && arg.length === 2) {
					data = arg[1];
				}
				if (data !== null) {
					self.message(data);
				}
					
			});
			this.on('triforce:loadpage', function (arg) {
				var url = arg[1];
                self.triforceInitialLoad = false;
				self.triforcePageReady = false;
				w.Triforce.abortAllRequests();
				w.Triforce.priorityManager.clearState();
				self.triforcePageUrl = '';
				w.Triforce.loadPage(url, {'eventFired':'pushstate'});
			});
		},
		initializeFeedEvents: function() {
			this.on('triforce:loadfeed', function(arg) {
				if (arg.length && arg.length === 3) {
					w.Triforce.queueFeedLoad(arg[1], arg[2]);
				}
			});
			this.on('triforce:feedloaded', function(arg) {
				if (arg && arg.length && arg.length === 4) {
					w.Triforce.registerFeedLoaded(arg[1], arg[2], arg[3]);
				}
			});
		},
		initializeScriptEvents: function() {
			this.on('triforce:loadscript', function(arg) {
				if (arg.length && arg.length === 4 && !arg[2].scriptFetching) {
					w.Triforce.queueJavascript(arg[1], arg[2], arg[3]);
					arg[2].scriptFetching = true;
				}
			});
		},
		initializeModuleEvents: function() {
			var self = this;
			this.on('triforce:modulerender', function(arg) {
				var $module = arg[1];
				w.Triforce.getModuleRenderer().renderModule($module);
			});
            this.on('triforce:module:process', function (arg) {
                var wrapper = arg[1],
                    info = arg[2],
                    hashList;

                hashList = typeof(btoa) === 'function' ? btoa(hashList) : hashList;

                w.Triforce.layoutManager.addModuleAttributes(wrapper, info);

                if (!info.feedData) {
                    w.Triforce.getMediator().trigger('triforce:loadfeed', info.feed, wrapper);
                } else {
                    w.Triforce.getMediator().trigger('triforce:feedloaded', info.feed, {result: info.feedData}, wrapper);
                }
                w.Triforce.getMediator().trigger('triforce:loadscript', info.moduleName, wrapper, hashList);
            });

			this.on('triforce:module:render', function(arg) {
				var module = arg[1];
				
				w.Triforce.getPageLoader().hideActivityIndicator();
				w.Triforce.getModuleRenderer().moduleReady(module);
			});
			this.on('triforce:module:fail', function(arg) {
				var module = arg[1];
				$(module).remove();
			});
			this.on('triforce:module:scriptsloaded', function(arg) {
				var module = arg[1];
				module.data('scriptsloaded', 'true');
				if (module.data('feedloaded') === 'true') {
					self.trigger('triforce:module:render', module);
				}
			});
			this.on('triforce:module:feedloaded', function(arg) {
				var module = arg[1];
				module.data('feedloaded', 'true');
				if (module.data('tfshouldnotrender') === 'true') {
					self.trigger('triforce:module:fail', module);
					return;
				}
				if (module.data('scriptsloaded') === 'true') {
					self.trigger('triforce:module:render', module);
				}
			});
			this.on('triforce:priority:removemodule', function(arg){
				var module = arg[1];
				w.Triforce.getPriorityManager().removeModule(module);
			});

			this.on('triforce:moduleRenderComplete', function(instance) {
				// this function triggers when a module is done rendering.
			});
			this.on('triforce:moduleRenderFailed', function(data) {
				// triggers on failure.
			});
		},
		initializeErrorEvents: function() {
			var self = this;
			this.on('triforce:pageerror', function(arg) {
				var event, data;
				if (arg && arg.length && arg.length === 2) {
					event = arg[0];
					data = arg[1];
				} else {
					event = arg[0];
				}
				self.message({'type':'error', 'message': data});
			});
			this.on('triforce:legacyload', function(arg) {
				w.Triforce.loadLegacyPage();
			});
		},
        initializeStorageEvents: function() {
            // nada
        },
        initializeMonitorEvents: function() {
            var self = this;
            w.digitalData = {};
            if (w.Triforce.config && w.Triforce.config.monitorEnabled) {
                this.on('triforce:triggermonitor', function(arg) {
                    var event, data;
                    if (arg && arg.length && arg.length == 2) {
                        data = arg[1];
                        if (typeof(_satellite) != 'undefined') {
                            self.message({'type':'message', 'message':'Triggering ' + data + ' monitor event'});
                            _satellite.track(data);
                        }
                    }
                });

                this.on('triforce:monitorPageChange', function(arg) {
                    w.digitalData = {
                        page: {
                            pageURL: w.location.href
                        },
                        user: {
                            loginSocial: 'logged out',
                            loginTVE: 'logged out'
                        }
                    };
                    self.trigger('triforce:triggermonitor', 'pageChange');
                });

                this.on('triforce:monitorContentClick', function(arg) {
                    w.digitalData = {
                        page: {
                            pageURL: w.location.href
                        },
                        user: {
                            loginSocial: 'logged out',
                            loginTVE: 'logged out'
                        }
                    };
                    if (arg && arg.length && arg.length == 2) {
                        w.digitalData.content = {
                            module: arg[1]
                        };
                        self.trigger('triforce:triggermonitor', 'contentClick');
                    } else if (arg && arg.length && arg.length == 3) {
                        w.digitalData.content = {
                            module: arg[1],
                            franchise: arg[2]
                        };
                        self.trigger('triforce:triggermonitor', 'contentClick');
                    }


                });

                this.on('triforce:monitorContentShare', function(arg) {
                    if (arg && arg.length && arg.length == 3) {
                        w.digitalData = {
                            page: {
                                pageURL: w.location.href
                            },
                            user: {
                                loginSocial: 'logged out',
                                loginTVE: 'logged out'
                            },
                            content: {
                                shareContentName: arg[1],
                                shareContentProvider: arg[2]
                            }
                        };

                        self.trigger('triforce:triggermonitor', 'contentShare');
                    }

                });

                this.on('triforce:monitorVideoStart', function(arg) {
                    if (arg && arg.length && arg.length == 2) {
                        //w.digitalData = {
                        //    page: {
                        //        pageURL: w.location.href
                        //    },
                        //    user: {
                        //        loginSocial: 'logged out',
                        //        loginTVE: 'logged out'
                        //    },
                        //    content: {
                        //        videoName: arg[1]
                        //    }
                        //};
                        self.trigger('triforce:triggermonitor', 'videoStart');
                    }
                });

                this.on('triforce:monitorVideoComplete', function(arg) {
                    if (arg && arg.length && arg.length == 2) {
                        w.digitalData = {
                            page: {
                                pageURL: w.location.href
                            },
                            user: {
                                loginSocial: 'logged out',
                                loginTVE: 'logged out'
                            },
                            content: {
                                videoName: arg[1]
                            }
                        };
                        self.trigger('triforce:triggermonitor', 'videoComplete');
                    }
                });
            }
        },
		storeValue: function(key, value) {
			w.Triforce.getStorageManager().storeValue(key, value);
		},
		getValue: function(key) {
			return w.Triforce.getStorageManager().getValue(key);
		},
		storeObject: function(key, obj) {
			w.Triforce.getStorageManager().storeObject(key, obj);
		},
		getObject: function(key) {
			return w.Triforce.getStorageManager().getObject(key);
		},
		storeSharedObject: function(key, obj, expiry) {
			w.Triforce.getStorageManager().setSharedObject(key, obj, expiry);
		},
		getSharedObject: function(key) {
			return w.Triforce.getStorageManager().getSharedObject(key);
		},
		initialLoad: function() {
            return this.triforceInitialLoad;
        },
		message: function(message) {
			if (this.debugEnabled()) {
				if (console && console.log && message.type && message.message) {
					message.message = new Date().toLocaleString() + ' - ' + message.message;
					switch (message.type) {
						case 'message':
							console.debug(message.message);
							break;
						case 'warning':
							console.warn(message.message);
							break;
						case 'debug':
							console.debug(message.message);
							break;
						case 'error':
							console.error(message.message);
							if (message.exception) {
								console.error(message.exception);
							}
							break;
						default:
							console.log(message.message);
					}
				}
			}
		},
		getFeedData: function(feedUrl) {
			return w.Triforce.getFeedData(feedUrl);
		},
        isMobileStored: null,
		isMobile: function() {
			if (this.isMobileStored === null) {
                var c = $.cookie('btg_device');
                if (c != null && c.length) {
                    if (c.indexOf('1') > 0) this.isMobileStored = true;
                }
                if (this.isMobileStored === null) {
                    this.isMobileStored = navigator.userAgent.match(/Android|webOS|iPhone|iPod|iPad|BlackBerry|Windows Phone/i) != null;
                }
            }
            return this.isMobileStored;
		},
		isIOS: function() {
			return navigator.userAgent.match(/(iPod|iPhone|iPad)/);
		},
		isIPad: function() {
			return navigator.userAgent.match(/(iPad)/);
		},
		isAndroid: function() {
			return navigator.userAgent.match(/(andriod|Andriod)/);
		},
		registerModule: function(zone, feed, driver, libraries) {
			var moduleObj = {
				'zone': zone,
				'feed': feed,
				'driver': driver,
				'libraries': libraries
			};
			this.registeredModules[zone] = moduleObj;
		},
		isModuleRegistered: function(zone, feed, driver, libraries) {
			if (!this.registeredModules[zone]) return false;

			var moduleObj = this.registeredModules[zone];

			if (moduleObj.feed == feed && moduleObj.driver == driver) {

                if (!libraries ||this.libraryMatch(libraries, moduleObj.libraries)) {
					return true;
				}

			} else {
				return false;
			}
			return false;
		},
		libraryMatch: function(source, target) {
			if (source.length == target.length) {
				for (var i in source) {
					if (source[i] != target[i]) return false;
				}
				return true;
			}
			return false;
		}
	});
})(jQuery, window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/module_renderer.js */
(function($, w) {
	$Crabapple.TriforceModuleRenderer = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceModuleRenderer, {

		init: function() {},

		moduleReady: function(module) {
			var feedData = (module.data('tffeed')) ? w.Triforce.getMediator().getFeedData(module.data('tffeed')) : null,
				driver = module.data('tfdriver');


			if (module.data('tfrendered') === true) {
				// This module is already rendered
				w.Triforce.getMediator().trigger('triforce:priority:removemodule', module);
				w.Triforce.getMediator().message({
					'type': 'message',
					'message': 'Module ' + driver + ' is already rendered'
				});
				return;
			}

			if (!module.data('scriptsloaded')) {
				return;
			}
			try {
				if (driver) {
					if (!window.$Crabapple['TriforceModule_' + driver]) {
						// not loaded yet - let's try again soon.
						w.Triforce.getMediator().message({
							'type':'message',
							'message':'TriforceModule_' + driver+': not loaded yet or doesn\'t exist may need to check the js library.'
						});
						return;
					}

					if (window.$Crabapple['TriforceModule_' + driver].parentController) {
						this.inheritController('$Crabapple.TriforceModule_' + driver);
					}

					var moduleDriver = new window.$Crabapple['TriforceModule_' + driver]();
					moduleDriver.init(module, feedData);
					w.Triforce.getMediator().trigger('triforce:module:rendered', module);
                    w.Triforce.getMediator().trigger('triforce:priority:removemodule', module);
				} else {
					w.Triforce.getMediator().message({
						'type': 'error',
						'message':'Module has no driver - ' + module.attr('data-zone')
					});
				}
			} catch (e) {
				w.Triforce.getMediator().message({
					'type': 'error',
					'message': 'Module driver is invalid - ' + module.attr('data-zone') + ' driver was ' + driver,
					'exception': e
				});
				w.Triforce.getMediator().trigger('triforce:module:fail', module);
			}
		},

		renderModule: function($module) {
			var data = $module.data(),
				mediator = w.Triforce.getMediator();
			
			if (!$module.length || data.zone === undefined) {
				mediator.trigger('triforce:priority:removemodule', $module);
				return;
			}

			if (!$('[data-zone="' + data.zone + '"]').length) {
				mediator.trigger('triforce:priority:removemodule', $module);
				return;
			}

			mediator.message({
				'type': 'message',
				'message': 'Rendering module in ' + data.zone + ' with priority ' + data.tfpriority
			});
			
			if (data.scriptsloaded === 'true') {
				if (data.feedloaded === 'true') {
					mediator.trigger('triforce:module:render', $module);
				}
				return;
			}
			if (data.tfversion && data.tfversion == '3') {
				var scriptList = data.tfname,
					hashList = data.tfscripthash + data.tfdriver;
				if (typeof(btoa) == 'function') hashList = btoa(hashList);
				mediator.trigger('triforce:loadscript', scriptList, $module, hashList);
			} else if (data.tflibs && data.tflibs.length) {
				var scriptList = data.tflibs,
					hashList = data.tflibshash + data.tfdriver;
					if (data.tfscripthash) hashList = data.tfscripthash + data.tfdriver;

				if (typeof(btoa) == 'function') {
					hashList = btoa(hashList);
				}

				mediator.trigger('triforce:loadscript', scriptList, $module, hashList);
			} else {
				mediator.trigger('triforce:module:scriptsloaded', $module);
			}
		},

		inheritController: function(controllerName) {
			var Controller,
				parentController,
				extension;

			controllerName = controllerName.split('.');
			Controller = window[controllerName[0]][controllerName[1]];

			if (typeof Controller !== 'function') {
				parentController = this.inheritController(Controller.parentController);
				extension = Controller.extension;
				Controller = window[controllerName[0]][controllerName[1]] = function () {};
				$Crabapple.extend(parentController, Controller, extension);
			}

			return Controller;
		}
	});
}) (jQuery, window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/page_loader.js */
(function($,w) {
	$Crabapple.TriforcePageLoader = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforcePageLoader, {
		activityIndicator: null,
		previousPage: '',
		currentPage: '',
		//used for testing and site management type tools to alter page responses
		customPostPageLoadFunc:null,
		init: function() {
			var self = this;
			this.activityIndicator = $('#activityIndicator');
			this.previousPage = w.location.href;
			this.currentPage = w.location.href;
			this.addWindowEvents();
		},
		handleInitialLoad: function() {
			var self = this;
			this.activityIndicator.fadeIn(100);
			if (typeof(triforceManifestFeed) == 'undefined' || triforceManifestFeed == '') {
				var feedURL = window.Triforce.config.manifestFeed + '?url=' + encodeURIComponent(w.location.href);
				$.getJSON(feedURL, function(response) {
					triforceManifestFeed = response.manifest;
					if (triforceManifestFeed === false) {
						
						w.Triforce.getPageLoader().hideActivityIndicator();
						w.Triforce.getMediator().trigger('triforce:legacyload');
					}
					else {
						if(null != self.customPostPageLoadFunc){
							triforceManifestFeed = self.customPostPageLoadFunc(triforceManifestFeed);
						}
						w.Triforce.getMediator().trigger('triforce:pageready');
					}
                });
				return;
			}
			if (triforceManifestFeed) {
				triforceManifestFeed = triforceManifestFeed.manifest;
				if(null != self.customPostPageLoadFunc){
					triforceManifestFeed = self.customPostPageLoadFunc(triforceManifestFeed);
				}
				w.Triforce.getMediator().trigger('triforce:pageready');
			}
			else {
				w.Triforce.getMediator().trigger('triforce:errornomanifest');
			}
		},
		hideActivityIndicator: function() {
			this.activityIndicator.fadeOut(100);
		},
		loadPage: function(url, pageStatus) {
			var self = this,
				additionalParams = '';
			if (url.substr(0, 15) == 'javascript:void') return;
			if (url.substr(0,1) == '#') return;
			if (url.match(/^\//)) {
				url = w.location.protocol + '//' + w.location.host + url;
			}
			if (url.replace(window.location.href, '').substr(0,1) == '#') return;
			if (!pageStatus) {
				if (url == window.location.href && url.match(/#/)) return;
			} else if (pageStatus && pageStatus.eventFired && pageStatus.eventFired != 'popstate') {
				if (url == window.location.href && url.match(/#/)) return;
			}
			var newUrl = url;
			if (triforceManifestFeed == false) {
				window.location.href = url;
				return;
			}

			if (typeof($.cookie) == 'function') {
				if ($.cookie('crabappleInformation')) {
					var ci = JSON.parse($.cookie('crabappleInformation'));
					if (ci.modes && ci.modes.manifest) {
						additionalParams = '&currentManifest=' + ci.modes.manifest;
					}
				}
			}

			w.Triforce.getMediator().trigger('triforce:pagestartload');
			if (this.checkPageStatus(pageStatus)) {
				if (this.manifestAjax) {
					this.manifestAjax.abort();
				}
				this.activityIndicator.fadeIn(100);
				this.previousPage = w.location.href;
				var feedURL = window.Triforce.config.manifestFeed + "?url=" + encodeURIComponent(url);
				this.manifestAjax = $.getJSON(feedURL + additionalParams, function(response) {
					var newLocationURL;
					self.currentPage = url;
					self.manifestAjax = null;
					triforceManifestFeed = response.manifest;
					if(triforceManifestFeed === false || !self.handlePushState(newUrl)){
						document.location.href = newUrl;
						return;
					}
					if (triforceManifestFeed.type == 'redirect' && triforceManifestFeed.newLocation) {
						if (triforceManifestFeed.newLocation.url) {
							newLocationURL = triforceManifestFeed.newLocation.url;
						} else {
							newLocationURL = triforceManifestFeed.newLocation;
						}

						self.updateHistoryState(newLocationURL);
						w.Triforce.loadPage(newLocationURL, {
							eventFired: 'redirect'
						});

						w.Triforce.getMediator().trigger('triforce:pageredirect');
						return;
					} else {
						if(null != self.customPostPageLoadFunc){
							triforceManifestFeed = self.customPostPageLoadFunc(triforceManifestFeed);
						}
						if (triforceManifestFeed.title) {
							document.title = triforceManifestFeed.title;
						}
						if (triforceManifestFeed.CMSTitle) {
							document.body.id = triforceManifestFeed.CMSTitle.replace(/\s/g, '_').replace(/[@\.\[\]\(\)]/g, '')
								.replace(/__/g, '_').toLowerCase();
						}
						if (document.body.className.indexOf('triforce_rendered') === -1) {
							document.body.className = document.body.className + ' triforce_rendered';
						}
						w.Triforce.getMediator().trigger('triforce:pageready');
					}
				});
			} else {
				if (document.location.href !== url) {
					document.location.href = url;
				}
			}
		},
		handlePushState: function(url) {
			if (w.history && w.history.pushState) {
				if (url != w.location.href) {
					var state = {
						'state':encodeURIComponent(url)
					};
					try {
						history.pushState(state, '', url);
					} catch (e) {
						return false;
					}

					return true;
				}
				else { // refresh url
                    //Added this to allow for the triforce module integration tests to work as they were causing this clause to be hit making their tests impossible to run
                    // but you need to check if that exists.  It might not.
                    if(typeof (TriforceConfiguration) != 'undefined' && !TriforceConfiguration.disabledSamePageReload) {
                        window.location.reload();
                    }
				}
			}
			return false;
		},
		updateHistoryState: function (url) {
			if (w.history && w.history.replaceState) {
				history.replaceState({
					'state': encodeURIComponent(url)
				}, '', url);
			}
		},
		checkPageStatus: function (pageStatus) {
			if (pageStatus) {
				if (pageStatus.eventFired && pageStatus.eventFired.match(/redirect|popstate|pushstate/)) {
					return true;
				}
			}
			return false;
		},
		addWindowEvents: function() {
			var self = this,
				isTriforcePage = (typeof(triforceManifestFeed) == 'undefined' || !triforceManifestFeed) ? (false) : (true),
				eventFired = 'popstate';
			$(window).on('popstate', function(event) {
				if (self.currentPage == location.href && self.currentPage == self.previousPage) return;
				if (self.currentPage.replace(location.href, '').substr(0,1) == '#') {
					self.currentPage = location.href;
					return;
				}

				var locationHash = location.href, currentHash = self.currentPage;
				// check for urls being the same
				if (locationHash.indexOf('#') >= 0) {
					locationHash = locationHash.substr(0, locationHash.indexOf('#'));
				}

				if (currentHash.indexOf('#') >= 0) {
					currentHash = currentHash.substr(0, currentHash.indexOf('#'));
				}
				if (currentHash == locationHash) {
					self.currentPage = location.href;
					return;
				}


				if (location.href.replace(self.currentPage, '').substr(0,1) == '#') {
					eventFired = 'pushstate';
				} else {
					eventFired = 'popstate';
				}
				self.currentPage = '';
				if (isTriforcePage) {
					self.currentPage = location.href;
					w.Triforce.loadPage(location.href, {
						eventFired: eventFired
					});
				} else {
					window.location.href = location.href;
				}

			});
		}
	});
}) (jQuery,window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/priority_manager.js */
(function($,w) {
	$Crabapple.TriforcePriorityManager = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforcePriorityManager, {
		PRIORITY_TIMEOUT: 0,
		ATTEMPT_TIMEOUT: 0,
		waitTime: 0,
		priorities: [],
		modulesLeft: 0,
		processingModules: [],
		numberAttempts: 0,
        modulesToBeRendered: 0,
		queuesFired: false,

		init: function () {
			this.PRIORITY_TIMEOUT = window.Triforce.config.priorityTimeout;
			this.ATTEMPT_TIMEOUT = window.Triforce.config.stragglersTimeout;
            this.checkIsPageLoaded();
		},

		startRenderPriorities: function (priorities) {
			this.priorities = priorities;
			this.waitTime = this.PRIORITY_TIMEOUT;
			this.sortPriorities();

			//give more time for rendering only module
			if (this.priorities.length === 1 && this.priorities[0].modules.length === 1) {
				this.waitTime = this.ATTEMPT_TIMEOUT;
			}

			this.renderModulesByPriority(this.priorities.shift());
		},

		sortPriorities: function() {
			var sorted = [],
				priority;

			for (var i in this.priorities) {
				sorted.push(i);
			}

			sorted.sort(function(a,b) {
				return a - b;
			});

			for (i = 0; i < sorted.length; i += 1) {
				priority = {
					'priority': sorted[i],
					'modules': this.priorities[sorted[i]],
					'iteration': 0
				};
				sorted[i] = priority;
			}

			this.priorities = sorted;
		},

		renderModulesByPriority: function(priority) {
			this.processingModules = this.processingModules.concat(priority.modules);
			this.modulesLeft += priority.modules.length;
            if(this.modulesLeft > this.modulesToBeRendered){
                this.modulesToBeRendered = this.modulesLeft;
            }
			this.triggerLoadModules(priority.modules);
		},

		triggerLoadModules: function (moduleList) {
			var _this = this,
				len = moduleList.length;

			for (var i = 0; i < len; i += 1) {
				w.Triforce.getMediator().trigger('triforce:modulerender', moduleList[i].module);
			}

			this.timeout = w.setTimeout(function() {
				_this.nextPriority();
			}, this.waitTime);

		},

		removeModule: function ($module) {
			var len = this.processingModules.length,
				uid = $module.data('uid');

			for (var i = 0; i < len; i += 1) {
				if (this.processingModules[i] && this.processingModules[i].uid === uid) {
					this.processingModules[i] = null;
					this.modulesLeft -= 1;
				}
			}

			if (this.modulesLeft === 0) {
				this.processingModules = [];
				this.nextPriority();
			}
		},

		nextPriority: function() {
			w.clearTimeout(this.timeout);

			if (this.priorities.length) {
				this.renderModulesByPriority(this.priorities.shift());
			} else {
				this.waitTime = (this.numberAttempts + 1) * this.ATTEMPT_TIMEOUT;
				if (this.processingModules.length) {
					this.tryLoadAgain();
					if (!this.queuesFired) {
						// let's add a wait here so modules can finish up:
						setTimeout(function() {
							w.Triforce.getMediator().trigger('triforce:queuesready');
						}, 1500);

						this.queuesFired = true;
					}
				} else {
					this.clearState();
					w.Triforce.getMediator().trigger('triforce:queuesready');
                    w.Triforce.getMediator().trigger('triforce:rendercomplete');
				}
			}
		},

        checkIsPageLoaded: function(){
            var self = this;

            w.Triforce.getMediator().on('triforce:module:rendered',function(){
                self.modulesToBeRendered--;
                if(self.modulesToBeRendered < 1){
                    w.Triforce.getMediator().trigger('triforce:complete');
                    self.modulesToBeRendered = 0;
                }
            });
        },

		clearProcessingModules: function () {
			var len = this.processingModules.length,
				cleared = [];

			for(var i = 0; i < len; i +=1) {
				if (this.processingModules[i]) {
					cleared.push(this.processingModules[i]);
				}
			}

			this.processingModules = cleared;

		},

		tryLoadAgain: function() {
			if (this.numberAttempts < 3) {
				this.clearProcessingModules();
				this.triggerLoadModules(this.processingModules);
				this.numberAttempts += 1;
			} else {
				var modulesNotRendered = [];
				for(var i in this.processingModules){
					if(this.processingModules[i] && this.processingModules[i].zone) {
						modulesNotRendered.push(this.processingModules[i].zone);
					}
				}
				window.Triforce.getMediator().trigger('triforce:message', {
					'type':'message',
					'message':'Zone render failure for: ['+modulesNotRendered.toString()+'] '+this.numberAttempts+' times. Increasing timeout.'
				});
				this.waitTime += 500;
				this.numberAttempts = 0;
				this.clearProcessingModules();
				this.triggerLoadModules(this.processingModules);
			}
		},

		modulePriorityFailed: function() {
			var len = this.processingModules.length,
				zoneList = '';

			for (var i = 0; i < len; i += 1) {
				if (this.processingModules[i]) {
					zoneList += this.processingModules[i].zone + ', ';
					this.processingModules[i].module.remove();
				}
			}
			this.clearState();
			w.Triforce.getMediator().message({
				'type': 'warning',
				'message': 'Some modules failed to render - the zones were ' + zoneList
			});
			w.Triforce.getMediator().trigger('triforce:rendercomplete');
		},

		clearState: function () {
			w.clearTimeout(this.timeout);
			this.waitTime = this.PRIORITY_TIMEOUT;
			this.priorities = [];
			this.modulesLeft = 0;
			this.processingModules = [];
			this.numberAttempts = 0;
			this.queuesFired = false;
		}

	});
}) (jQuery, window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/queue.js */
(function($,w) {
    /**
     * Triforce Queue.  This is a generic queue object for Triforce.
     *
     * Basically, it takes a set of DOM element in 'items' and performs some action on them
     * after the page has loaded.
     * @constructor
     */
    $Crabapple.TriforceQueue = function() {};
    $Crabapple.extend($Crabapple.Class, $Crabapple.TriforceQueue, {
        /**
         * Our stored list of queues.
         */
        _queues:{},
        /**
         * Link to the mediator.
         */
        _mediator: null,
        /**
         * Ready flag.
         */
        _ready: false,
        /**
         * Adds a Queue to our list.
         * @param queueName Queue name to add.
         * @param loadFunction Function to 'load' the queue and set it to 'ready'.
         * @param processFunction Function to process queue items.
         * @param type Type of queue (default or scroll)
         */
        addQueue: function(queueName, loadFunction, processFunction, type) {

            //if (this._queues[queueName]) {
            //    this._mediator.trigger('triforce:message', {'type':'warning', 'message':'Skipping create on ' + queueName + ' - it already exists'});
            //    return;
            //}

            if (this._queues[queueName]) {
                this._queues[queueName].loadFunction = loadFunction;
                this._queues[queueName].processFunction = processFunction;
                this._queues[queueName].type = type;
            }
            else {
                this._queues[queueName] = {
                    'loadFunction':loadFunction,
                    'processFunction':processFunction,
                    'ready': false,
                    'type':type,
                    items: []
                };
            }

        },
        /**
         * Adds an item to our queue.
         * @param queueName Name to add to the queue.
         * @param domElement DOM element to add.
         */
        addQueueItem: function(queueName, domElement) {
            if (!this._queues[queueName]) {
                this._queues[queueName] = {
                    'ready':false,
                    'items':[]
                };
                this._queues[queueName].items.push(domElement);
                return true;
            }
            if (this._queues[queueName].ready === true && this._queues[queueName].type === 'default') {
                this._queues[queueName].processFunction(domElement);
            } else {
                this._queues[queueName].items.push(domElement);
            }
            return true;
        },
        /**
         * Processes a deferred queue.
         */
        processDeferredQueues: function() {
            if (this._ready) return;
            this._ready = true;
            for (var queueName in this._queues) {
                this._queues[queueName].loadFunction();
            }
        },
        /**
         * Trigger for load complete on a queue.
         * @param queueName Name of the queue that's ready.
         */
        onLoadComplete: function(queueName) {
            this._queues[queueName].ready = true;

            if (this._queues[queueName].type == 'default') {
                for (var item in this._queues[queueName].items) {
                    this._queues[queueName].processFunction(this._queues[queueName].items[item]);
                    this._queues[queueName].items.splice(item, 1);
                }
            } else {
                this.checkDeferredQueues();
            }

        },
        /**
         * This is a check for queues that have items that are deferred because of type==scroll.
         *
         * These items will only load when in view.
         */
        checkDeferredQueues: function() {
            for (var queueName in this._queues) {
                if (this._queues[queueName].type == 'scroll') {
                    for (var item in this._queues[queueName].items) {
                        if (this.isVisible(this._queues[queueName].items[item])) {
                            this._queues[queueName].processFunction(this._queues[queueName].items[item]);
                            this._queues[queueName].items.splice(item, 1);
                        }
                    }
                } else {
                    for (var item in this._queues[queueName].items) {
                        this._queues[queueName].processFunction(this._queues[queueName].items[item]);
                        this._queues[queueName].items.splice(item, 1);
                    }
                }
            }
        },
        /**
         * Clears items out of our queues.
         */
        clearQueues: function() {
            for (var queueName in this._queues) {
                this._queues[queueName].items = [];
            }
            this._ready = false;
        },
        /**
         * Init function.
         */
        init: function() {
            this._mediator = w.Triforce.getMediator();
            this.addMediatorEvents();
        },
        /**
         * Adds the events we need to the mediator.
         */
        addMediatorEvents: function() {
            var _this = this;
            this._mediator.on('triforce:addqueue', function(args) {
                if (args.length && args.length > 1) {
                    var queue = args[1];
                    if (queue.queueName && queue.loadFunction && queue.processFunction) {
                        if (!queue.type) queue.type = 'default';
                        _this.addQueue(queue.queueName, queue.loadFunction, queue.processFunction, queue.type);
                    } else {
                        _this._mediator.trigger('triforce:message', {'type':'error', 'message':'Error creating queue.  Missing a field (queueName, loadFunction or processFunction'});
                    }
                }
            });
            this._mediator.on('triforce:addqueueitem', function(args) {
                if (args.length && args.length > 1) {
                    var queue = args[1];
                    if (queue.queueName && queue.item) {
                        _this.addQueueItem(queue.queueName, queue.item);
                    } else {
                        _this._mediator.trigger('triforce:message', {'type':'error', 'message':'Error adding item to queue.  Missing a field (item or queueName'});
                    }

                }
            });
            this._mediator.on('triforce:clearqueues', function(args) {
                _this.clearQueues();
            });
            this._mediator.on('triforce:queuesready', function(args) {
                _this.processDeferredQueues();
            });
            this._mediator.on('triforce:queueready', function(args) {
                if (args.length && args.length > 1) {
                    _this.onLoadComplete(args[1])
                }
            });
            this._mediator.on('triforce:pageintouch', function(args) {
               _this.checkDeferredQueues();
            });
        },
        /**
         * Check if an element is visible.
         * @param el A jquery selector.
         * @returns boolean
         */
        isVisible: function (el) {
            if (!el[0].parentNode) {
                return false;
            }
            var elRect = el[0].getBoundingClientRect(),
                wWidth = w.innerWidth,
                wHeight = w.innerHeight,
                hasRect = elRect.bottom || elRect.height || elRect.left || elRect.right || elRect.top || elRect.width;

            return hasRect && (elRect.top >= 0 ? elRect.top <= wHeight : elRect.bottom >= 0)
                && (elRect.left >= 0 ? elRect.left <= wWidth : elRect.right >= 0);
        }
    });
})(jQuery, window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/script_loader.js */
(function($,w) {
	$Crabapple.TriforceScriptManager = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceScriptManager, {
		feeds: {},
		scripts: {},
		queuedScripts: {},
		feedRequests: {},
        preloadedScripts: null,

		init: function() {
            var preloadedScripts = $('[data-tfmodulescript]'),
                i, len;

            this.preloadedScripts = {};
            for (i = 0, len = preloadedScripts.length; i < len; i++) {
                this.preloadedScripts[preloadedScripts[i].src] = preloadedScripts[i];
            }
		},
		queueFeedLoad: function(feedURL, module) {
			var self = this;

			if (this.getFeedData(feedURL) != null) {
				w.Triforce.getMediator().trigger('triforce:module:feedloaded', module);
				return;
			}
			else if (feedURL == '' || feedURL == null) {
				w.Triforce.getMediator().trigger('triforce:module:feedloaded', module);
				return;
			}
			
			this.feedRequests[feedURL] = $.getJSON(feedURL, function(response) {
				self.feedRequests[feedURL] = null;
				w.Triforce.getMediator().trigger('triforce:feedloaded', feedURL, response, module);
			});
		},
		registerFeedLoaded: function(feedURL, feedData, module) {
			this.feeds[feedURL] = feedData;
			if (feedData && feedData.result && feedData.result.output === false) {
				module.data('tfshouldnotrender', 'true');
			}
			w.Triforce.getMediator().trigger('triforce:module:feedloaded', module);
		},
		getFeedData:function(feedURL) {
			if (this.feeds[feedURL]) return this.feeds[feedURL];
			return null;
		},
		queueJavascript: function(scriptList, module, hashList) {
			if (typeof(scriptList) == "string") {
				scriptList = scriptList.split(",");
				if (typeof(hashList) != "undefined") {
					hashList = hashList.split(",");
				}
			}
			var scripts = '',
				hash = '';
			var self = this;
			for(var index=0; index<scriptList.length; index++) {
				if (!this.scriptRegistered(scriptList[index]) && !this.scriptQueued(scriptList[index])) {
					// prepend scripts string
					scripts += (scripts == '') ? ('') : (',');
					scripts += scriptList[index];

					// prepend hashes string
					if (hashList && hashList[index]) {
						hash += (hash === '' ? '' : ',') + hashList[index];
					}
					this.queuedScripts[scriptList[index]] = 1;
				}
			}
			if (scripts === '') {
				this.checkAllScriptLoaded(scriptList, module);
				return;
			}

			var scriptURL = window.Triforce.config.scriptConcatenator + scripts + '?hash=' + hash,
                script = this.preloadedScripts[scriptURL],
                isScriptPreloaded = !!script;

            // create script element if script wasn't preloaded
            if (!script) {
                script = document.createElement('script');
                script.async = true;
                script.src = scriptURL;
            } else {
                // check if "preloaded" script finished loading
                if (script.getAttribute('data-loaded')) {
                    this.registerJavascript(scripts);
                    this.checkAllScriptLoaded(scriptList, module);

                    return;
                }
            }

            // script isn't loaded yet, setting up callbacks
            script.onload = function () {
                self.registerJavascript(scripts);
                self.checkAllScriptLoaded(scriptList, module);
            };
            script.onerror = function () {
                w.Triforce.getMediator().trigger('triforce:message', {'type':'error','message':'Script failed to load at ' + scriptURL});
            };

            // if script isn't "preloaded" - set it to the page so browser starts loading it
            if (!isScriptPreloaded) {
                document.head.appendChild(script);
            }
		},
		registerJavascript: function(script) {
			this.unqueueScripts(script);
			var scriptArray = script.split(',');
			for (var i=0; i<scriptArray.length; i++) {
				this.scripts[scriptArray[i]] = 1;
			}
		},
		checkAllScriptLoaded: function (scriptList, module) {
			var i = 0,
				len = scriptList.length,
				_this = this;

			for (i; i < len; i += 1) {
				if (!this.scriptRegistered(scriptList[i])) {
					setTimeout(function() {
						_this.checkAllScriptLoaded(scriptList, module);
					}, 100);
					return;
				}
			}

			w.Triforce.getMediator().trigger('triforce:module:scriptsloaded', module);
		},
		scriptRegistered:function(script) {
			if (this.scripts[script]) return true;
			return false;
		},
		scriptQueued: function(script) {
			if (this.queuedScripts[script]) return true;
			return false;
		},
		unqueueScripts: function(scripts) {
			var scriptList = scripts.split(",");
			for (var i=0; i<scriptList.length; i++) {
				if (this.queuedScripts[scriptList[i]] == 1) this.queuedScripts[scriptList[i]] = 0;
			}
		},

		unqueueAllScripts: function () {
			this.queuedScripts = {};
		},

		abortAllFeedRequests: function () {
			for (var i in this.feedRequests) {
				if (this.feedRequests[i]) {
					this.feedRequests[i].abort();
				}
			}
			this.feedRequests = {};
		},
		loadStandaloneScript: function(script, callback) {
			var self = this;
			if (this.scriptRegistered(script)) {
				callback();
			} else {
				var scriptURL = window.Triforce.config.scriptConcatenator + script,
					scriptElement = document.createElement('script');
				scriptElement.async = 'async';
				scriptElement.type = 'text/javascript';
				scriptElement.src = scriptURL;
				scriptElement.onload = function(_,isAbort) {
					if (!scriptElement.readyState || /loaded|complete/.test(scriptElement.readyState)) {
						if (isAbort) {
							return;
						} else {
							self.registerJavascript(script);
							callback();
						}
					}
				};
				script.onerror = function(e) {
					w.Triforce.getMediator().trigger('triforce:message', {'type':'error','message':'Script failed to load at ' + scriptURL});
				}
				$('head')[0].appendChild(scriptElement);
			}
		}
	});
}) (jQuery,window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/components/storage_manager.js */
(function($,w) {
	$Crabapple.TriforceStorageManager = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceStorageManager, {
		storageEnabled: false,
		storage: null,
		indexedDB: null,
		indexedDBEnabled: false,
		dbName: 'TriforceDB',
		objectStores: [{
			'name': 'feeds',
			'keyPath': 'hash'
		}],

		init: function() {

			if (this.storageEnabled) return;

			try {
				if (w.localStorage && this.isLocalStorageEnabled()) {
					this.storage = w.localStorage;
					this.storageEnabled = true;
				} else {
					this.addCookiesFallback();
				}
			} catch (e) {
				w.Triforce.getMediator().trigger('triforce:message', {
					type: 'error',
					message: 'Error occurred trying access to localStorage',
					exception: e
				});

				this.addCookiesFallback();
			}
		},

		isLocalStorageEnabled: function() {
			var testKey = 'test', s = window.localStorage;
			try {
				s.setItem(testKey, '1');
				s.removeItem(testKey);
				return true;
			} catch (e) {
				return false;
			}
			return false;
		},

		addCookiesFallback: function () {
			this.storage = {
				setItem: function (key, data) {
					$.cookie(key, data);
				},

				getItem: function (key) {
					return $.cookie(key);
				}
			};
			this.storageEnabled = true;
		},

		storeValue: function(key, value) {
			if (!this.storageEnabled) return false;
			key = this.sanitizeKey(key);
			try {
				this.storage.setItem(key, value);
			} catch (e) {
				w.Triforce.getMediator().trigger('triforce:message', {'type':'error', 'message':'Storing ' + key + ' in local storage failed', 'exception':e});
			}
		},
		storeObject: function(key, obj) {
			if (!this.storageEnabled) return false;
			key = this.sanitizeKey(key);
			try {
				this.storage.setItem(key, JSON.stringify(obj));
			} catch (e) {
				w.Triforce.getMediator().trigger('triforce:message', {'type':'error', 'message':'Storing ' + key + ' in local storage failed', 'exception':e});
			}
		},
		getValue: function(key) {
			if (!this.storageEnabled) return false;
			key = this.sanitizeKey(key);
			return this.storage.getItem(key);
		},
		getObject: function(key) {
			if (!this.storageEnabled) return false;
			key = this.sanitizeKey(key);
			try {
				var obj = JSON.parse(this.storage.getItem(key));
				return obj;
			} catch (e) {
				w.Triforce.getMediator().trigger('triforce:message', {'type':'error', 'message':'Retrieving ' + key + ' from local storage failed', 'exception':e});
				return false;
			}
			return false;
		},
		sanitizeKey: function(key) {
			return 'triforce_' + key + '|' + window.location.hostname;
		},

		setSharedObject: function(key, value, expiry) {
			var now = new Date().getTime(),
				domain = this.getDomain(),
				expiryDays,
				storageObject;
			now = parseInt(now / 1000); // seconds
			key = domain + '|' + key;
			if (!expiry) {
				expiry = 0;
			}
			if (expiry != 0) {
				expiryDays = expiry / 60 / 24;
				expiry = now + (60 * expiry);
			}
			storageObject = {
				'value':value,
				'expiry':expiry
			}
			if (expiry != 0) {
				$.cookie(key, JSON.stringify(storageObject), {
					path:'/',
					domain:domain,
					expires:expiryDays
				});
			} else {
				$.cookie(key, JSON.stringify(storageObject), {
					path:'/',
					domain:domain,
					expires:1000
				});
			}

		},
		getSharedObject: function(key) {
			var domain = this.getDomain(),
				value;
			key = domain + '|' + key;

			value = $.cookie(key);
			if (!value) {
				return null;
			} else {
				value = JSON.parse(value);
				return value.value;
			}
		},
		getDomain: function() {
			var hostname = window.location.hostname,
				hostnameParts = hostname.split('.');

			if (hostnameParts.length >= 2) {
				var tld = hostnameParts.pop(),
					domain = hostnameParts.pop();

				return domain + '.' + tld;

			}
			else {
				if (hostname.indexOf('local') >= 0) {
					return 'local';
				}
			}
			return 'unknown';
		},

		initIndexedDB: function () {
			if ('indexedDB' in w) {
				this.indexedDB = {};
				this.indexedDBEnabled = true;
				this.openIndexedDB();
			}
		},

		openIndexedDB: function () {
			if (!this.indexedDBEnabled) {
				return false;
			}

			var _this = this,
				version  = 1,
				request;

			_this.indexedDB[this.dbName] = null;

			request = w.indexedDB.open(this.dbName, version);

			request.onupgradeneeded = function (e) {
				_this.handleUpgradeNeeded(e);
			};

			request.onsuccess = function (e) {
				_this.handleOpenDBSuccess(e);
			};

			request.onerror = this.handleIndexedDBError;

		},

		addObject: function (object, objectStoreName) {
			var db = this.indexedDB[this.dbName],
				transaction = db.transaction([objectStoreName], 'readwrite'),
				store = transaction.objectStore(objectStoreName),
				request = store.put(object),
				_this = this;

			request.onsuccess = function (e) {
				_this.handleAddObjectSuccess();
			};

			request.onerror = this.handleIndexedDBError;

		},

		handleAddObjectSuccess: function () {
			// TODO
		},

		handleOpenDBSuccess: function (e) {
			this.indexedDB[this.dbName] = e.target.result;
		},

		handleUpgradeNeeded: function (e) {
			var db = e.target.result;

			e.target.transaction.onerror = this.handleIndexedDBError;

			for (var i = 0; i < this.objectStores.length; i ++) {
				if (db.objectStoreNames.contains(this.objectStores[i].name)) {
					db.deleteObjectStore(this.objectStores[i].name);
				}

				db.createObjectStore(this.objectStores[i].name, {
					keyPath: this.objectStores[i].keyPath
				});
			}
		},

		handleIndexedDBError: function (e) {
			var errorMessage = 'Error occured working with endexedDB';

			w.Triforce.getMediator().trigger('triforce:message', {
				'type': 'error',
				'message': errorMessage,
				'exception': e
			});
		}

	});
}) (jQuery, window);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/module/helper.js */
(function($) {
	$Crabapple.TriforceHelper = function() {};
	$Crabapple.extend($Crabapple.Class, $Crabapple.TriforceHelper, {
		moduleElement: null,
		init: function (moduleElement) {
			this.moduleElement = $(moduleElement);
		}
	});
})(jQuery);
/*endFile*/
/*file=/nickpress.com/vendor/viacom/crabapple/javascript/triforce/module/mustacheView.js */
$Crabapple.TriforceMustacheView = {
    'parentView': '$Crabapple.TriforceView',
    'extention': {
        /**
         * Module element that triforce has created for you.
         *
         * @type {jQuery}
         */
        moduleElement: null,

        /**
         * Reference to Mustache templates global pool.
         * If string specified, View recognizes it as a namespace
         * and looks up for templates by that namespace
         *
         * @type {(object|string)}
         */
        templates: null,

        /**
         * Mustache template name that's one of the registered templates.
         *
         * @type {string}
         */
        templateName: null,

        /**
         * Initialization of the view.
         *
         * @param {jQuery} moduleElement - a holder for the module's stuff
         */
        init: function(moduleElement) {
            this.moduleElement = moduleElement;

            this.determineTemplatesPool();
        },

        /**
         * Creates reference to Mustache templates through this.templates. If a string defined as the `this.templates`
         * it looks up for the pool starting from `window` global object, otherwise if nothing is defined - it takes
         * $Crabapple.TriforceTemplates as the default pool, if it's null - creates an object, so when templates are
         * loaded to the page, they're referencing to that object, so everything is kept in sync
         */
        determineTemplatesPool: function () {
            // We're starting lookup from window global object
            var currentTemplatesPathCursor = window,
                templatesPoolPath,
                i, len;

            if (typeof this.templates === 'string') {
                templatesPoolPath = this.templates.split('.');

                for (i = 0, len = templatesPoolPath.length; i < len; i++) {
                    if (currentTemplatesPathCursor) {
                        currentTemplatesPathCursor = currentTemplatesPathCursor[templatesPoolPath[i]];
                    } else {
                        break;
                    }
                }

                if (!currentTemplatesPathCursor) {
                    window.Triforce.getMediator().trigger('triforce:message', {
                        type: 'error',
                        message: 'The path specified to the Mustache templates pool leads nowhere: ' + this.templates
                    });
                    return;
                }

                this.templates = currentTemplatesPathCursor;
            } else if (!this.templates) {
                // Taking `$Crabapple.TriforceTemplates` as default one, if nothing else is specified. If it's yet not
                // defined, creates a pool on that namespace(yeah, unfortunately something went wrong)
                this.templates = $Crabapple.TriforceTemplates = $Crabapple.TriforceTemplates || {};
            }
        },

        /**
         * Renders the template to some place relative(based on the `mode` param) to element on the page. If coming
         * data is an array, it loops through this array and renders the template for each item in the array.
         *
         * It also will check for images that need to be registered in the ImageBroker
         *
         * The template is taken from global templates pool
         *
         * @private
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(null|object|object[])} data - data that's needed to render the partial
         * @param {string} mode - determines how the templateOutput should be placed relative to the given $el
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplate: function (templateName, $el, data, mode) {
            var template = this.templates && this.templates[templateName],
                output,
                $tempEl,
                i, len;

            if (template) {
                if ($el && $el instanceof jQuery) {
                    if (data instanceof Array) {
                        output = '';
                        for (i = 0, len = data.length; i < len; i++) {
                            output += template.render(data[i], this.templates);
                        }
                    } else {
                        if (window.labels) {
                            if (window.labels.language) {
                                if (!data) data = [];
                                data['i18nlabels'] = window.labels;
                            }
                        }
                        output = template.render(data, this.templates);
                    }

                    // We're using <div> element to get the template output set to the defined DOM node
                    // we'd use documentFragment, but it doesn't work, cuz we can't set HTML to it
                    // We also could do innerHTML += output, but it would eventually rerender the whole element
                    $tempEl = $(document.createElement('div'));
                    $tempEl[0].innerHTML = output;
                    // We need to check if there any images rendered which ImageBroker is interested in
                    this.checkForNotQueuedImages($tempEl);

                    mode = mode || 'to';
                    if (mode === 'to') {
                        $el.append($tempEl[0].childNodes);
                    } else if (mode === 'after') {
                        $el.after($tempEl[0].childNodes);
                    } else if (mode === 'before') {
                        $el.before($tempEl[0].childNodes);
                    } else if (mode === 'insteadOf') {
                        $el.replaceWith($tempEl[0].childNodes);
                    }

                    return true;
                } else {
                    window.Triforce.getMediator().trigger('triforce:message', {
                        type: 'error',
                        message: 'Unable to render template: ' + templateName + ', because the element it should render to isn\'t defined or isn\'t a jQuery object'
                    });
                    return false;
                }
            } else {
                window.Triforce.getMediator().trigger('triforce:message', {
                    type: 'error',
                    message: 'Unable to render template: ' + templateName + ', because it\'s not registered in the pool'
                });
                return false;
            }
        },

        /**
         * Renders template. The output nodes will be placed before $el
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateBefore: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'before');
        },

        /**
         * Renders template. The output nodes will be placed after $el
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateAfter: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'after');
        },

        /**
         * Renders template. The output nodes will be placed to $el(appended)
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateTo: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'to');
        },

        /**
         * Renders template. The output nodes will be placed instead of $el
         *
         * @param {string} templateName - name of the template to render
         * @param {jQuery} $el - the element the rendered partial should be appended to
         * @param {(object|object[])} [data] - data that's needed to render the partial(is optional)
         *
         * @returns {boolean} - returns a bool value whether template rendered successfully or not
         */
        renderTemplateInsteadOf: function (templateName, $el, data) {
            return this.renderTemplate(templateName, $el, data, 'insteadOf');
        },

        /**
         * Renders the view.
         * This method is in charge of getting content outputted on the page.
         *
         * @param {object} [data] - contains data and settings that are used to render template
         *
         * @returns {boolean} - returns a bool value whether view rendered successfully or not
         */
        render: function (data) {
            if (!this.templateName || !this.moduleElement || !this.templates) {
                window.Triforce.getMediator().trigger('triforce:message', {
                    type: 'error',
                    message: 'Unable to render view there are some missing properties:' +
                        (!this.templateName && '\n templateName isn\'t defined;') +
                        (!this.moduleElement && '\n moduleElement isn\'t set;') +
                        (!this.templates && '\n templates pool isn\'t defined/ready')
                });
                return false;
            }

            // We need to clean up the stuff first
            this.moduleElement.empty();
            return this.renderTemplateTo(this.templateName, this.moduleElement, data);
        }
    }
};
/*endFile*/
/*file=/nickpress.com/javascript/triforce/views/m001_v1.js */
$Crabapple.TriforceView_m001_v1 = function() {};

$Crabapple.extend($Crabapple.TriforceView, $Crabapple.TriforceView_m001_v1, {
	coreElement: {},

	generateCoreElement: function(module) {
		this.coreElement = this.createDom('div', {'class':'module ' + module});
	},

	templateContent: function(module, feed) {
		if ($.isEmptyObject(feed.content)) {
			return;
		}
		this.coreElement.html(tmplEngine(module, feed.template, feed.content));
	},

	setOutput: function() {
		this.moduleElement.replaceWith(this.coreElement);
		this.moduleElement = this.coreElement;
		
		return this.moduleElement;
	}
});
/*endFile*/