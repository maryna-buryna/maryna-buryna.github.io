
/*

    Triforce Controller for the shared controller logic of M111 / M112 / M116 / M117 / M118 / M120 line listing modules

    This code uses TFV334 as its header, and TFV335 to render the line listings.  The styles are also shared between modules.
    Beware that changes to this class can and will effect all 6 of those modules!

 */

$Crabapple.TriforceModule_ent_tfc305_v2_1_1 = function() {};

$Crabapple.extend($Crabapple.TriforceModule, $Crabapple.TriforceModule_ent_tfc305_v2_1_1, {
    showDescription: false,
    showInlineDuration: false,
    showContentBadge: false,
    contentBadgeLookup: [],
    showLineListAds: false,
    lineListAdInterval: 0,
    contentAuth: false,

	viewsListOrdered: [
		{
			name: 'header',
			viewName: '$Crabapple.TriforceView_ent_tfv334_v2_1_0'
		},
		{
			name: 'lineList',
			viewName: '$Crabapple.TriforceView_ent_tfv335_v2_1_0'
		}
	],

	initializeView: function() {
		var feed = this.feedResponse.result;


        if (!feed.items || !feed.items.length) {
            this.forceHide = true;
            return;
        }

        // Set initial values
        this.nextPageURL = feed.nextPageURL || '';
        this.filters = (feed.filters) ? feed.filters : null;
        this.itemType = feed.itemType;
        this.allowToggle = this.allowToggle || false;
        this.headerCount = null;
        this.showLineListAds = this.showLineListAds || false;
        this.lineListAdInterval = this.lineListAdInterval || 0;
        this.limitLineListItems = (feed.promo.parameters.limitLineListItems) ? feed.promo.parameters.limitLineListItems : false;
        this.headerLinkOverride = '';
        this.hideSeasonEpisodeNumbers = (feed.configParams && feed.configParams.hideSeasonEpisodeNumbers) ? feed.configParams.hideSeasonEpisodeNumbers : false;

        //if limitLineListItems is true, then lets use the headerLinkOverride
        if(this.limitLineListItems) {
            if(feed.episodeGuideURL){
                this.headerLinkOverride = feed.episodeGuideURL;
            }else if(feed.videoGuideURL){
                this.headerLinkOverride = feed.videoGuideURL;
            }
        }

        var lineListOptions = {
            'itemType': this.itemType,
            'nextPageURL': this.nextPageURL,
            'mgidPrefix': this.mgidPrefix,
            'addTVELock': this.addTVELock,
            'showDescription': this.showDescription,
            'showContentBadge': this.showContentBadge,
            'contentBadgeLookup': this.contentBadgeLookup,
            'showInlineDuration': this.showInlineDuration,
            'showLineListAds': this.showLineListAds,
            'lineListAdInterval': this.lineListAdInterval,
            'limitLineListItems': this.limitLineListItems,
            'hideSeasonEpisodeNumbers': this.hideSeasonEpisodeNumbers,
            'contentAuth': this.contentAuth
        };

        // If fullEpisodesOnly is set we want to use the top level result count, because it will never change
        if(feed.promo.parameters.fullEpisodesOnly || this.itemType == 'clip') {
            this.headerCount = feed.itemCount;
        } else {
            // Otherwise the count should be from the first filter, since it could change
            this.headerCount = (feed.filters) ? feed.filters[0].count : null
        }

        this.expanded = feed.promo.parameters.expanded || false;
        this.view.generateCoreElement();

        // As of Spike release 3, line listings are always open.  But we need to keep the toggle classes in the CSS for M002, which can still expand/collapse.
        this.view.coreElement.addClass('open');


        if(this.nextPageURL) {
            // set next link data on the wrapper so we can use it later during event calls
            this.view.coreElement.data('nextPageURL', this.nextPageURL);
        }

        /**
         * SPAM-603 - Implement Parameter overrideFilterRemove
         * Don't render header if overrideFilterRemove is set to true
         **/
        if(feed.configParams && !feed.configParams.overrideFilterRemove) {
            // render the header
            this.views.header.render(this.view.coreElement, {
                'itemType': this.itemType,
                'title': feed.promo.headline,
                'filters': this.filters,
                'count': this.headerCount,
                'fullEpisodesOnly': feed.promo.parameters.fullEpisodesOnly || false,
                'allowToggle': this.allowToggle,
                'headerLinkOverride': this.headerLinkOverride
            });
        }

		// render the line list
        lineListOptions.nowPlayingText = this.nowPlayingText || 'Now playing';

        if(feed.configParams && feed.configParams.displaySeasonTitle) {
            lineListOptions.useSeasonTitle = true;
        }

		this.views.lineList.render(this.view.coreElement, feed.items, lineListOptions);

		this.moduleElement = this.view.setOutput();

        this.postRender();
	},

	enhanceModule: function() {
        var feed = this.feedResponse.result;

        if (!feed.items || !feed.items.length) {
            this.forceHide = true;
            return;
        }

        // Set initial values
        this.nextPageURL = feed.nextPageURL || '';
        this.filters = (feed.filters) ? feed.filters : null;
        this.itemType = feed.itemType;
        this.allowToggle = this.allowToggle || false;
        this.headerCount = null;

        var lineListOptions = {
            'expanded': feed.promo.parameters.expanded,
            'itemType': this.itemType,
            'nextPageURL': this.nextPageURL,
            'mgidPrefix': this.mgidPrefix,
            'addTVELock': this.addTVELock
        };

        if (this.moduleElement.data('tfrendered')) {
            return;
        }
        this.moduleElement.removeAttr('id data-tfstatic data-tfpriority data-tfmethod data-tfmoduledriver data-tflibs data-tfurl data-tfreload data-tffeed data-tfdriver data-zone');
        this.moduleElement.addClass('ent_m112');
        this.moduleElement.data('tfrendered', 'true');

        this.view.coreElement = this.moduleElement.find('.module_content');

        if(this.nextPageURL) {
            // set next link data on the wrapper so we can use it later during event calls
            this.view.coreElement.data('nextPageURL', this.nextPageURL);
        }
        
        // enhance the header
        this.views.header.enhance(this.view.coreElement, {
            'title': feed.promo.headline,
            'filters': this.filters,
            'count': this.headerCount,
            'expanded': feed.promo.parameters.expanded || false,
            'fullEpisodesOnly': feed.promo.parameters.fullEpisodesOnly || false,
            'allowToggle': this.allowToggle
        });

        this.views.lineList.enhance(this.view.coreElement, feed.items, lineListOptions);

        this.addEvents();
        this.addLinkHandler();
    },

	addEvents: function () {
		var self = this;

        if(this.allowToggle) {
		    this.addExpansionHandlers();
        }

		if(this.views.lineList.loadButton) {
			this.views.lineList.loadButton.on('click', function(){
				self.getMoreData(this);
			});
		}

		if(this.views.header.filterButton) {
			this.attachFilterEvents();
		}

        this.applyCustomColor();
        this.applyCustomLogic();
	},

	addExpansionHandlers: function () {
		var headerView = this.views.header;

		this.view.coreElement
			.on('triforce:module_collapsed', function() {
				headerView.filterButton && headerView.filterButton.removeClass('open');
				headerView.filterMenu && headerView.filterMenu.slideUp();
			});
	},

	addLinkHandler: function () {
		this.moduleElement
			.on('click', '.share_btn', function (event) {
				event.preventDefault();
				event.stopPropagation();
			})
			.on('click', 'a', this.linkHandler);
	},

    postRender: function () {

    },

	attachFilterEvents: function() {
		var self = this,
            parent = this.views.header.container;

		this.views.header.filterButton.on('click', function(e){

			if(parent.hasClass('open')) {
				e.stopPropagation();
				parent.find('.filter_list').toggle();
				parent.find('.menu_button').toggleClass('open');
			}
		});

		this.views.header.filterMenu.find('li').each(function() {
            var filterData = $(this).data('filterData');

			$(this).on('click', function(e) {
				if(filterData.url) {

					var itemCount = filterData.count ? '(' + filterData.count + ')' : '';

                    e.stopPropagation();
                    $(this).siblings().removeClass('selected');
                    $(this).addClass('selected');

                    parent.find('.itemCount').text(itemCount);

                    if(filterData.title) {
                        parent.find('.header_text').text(filterData.title);
                    }

                    self.filterElements(this, filterData.url);
                } else {
                    window.Triforce.getMediator().trigger('triforce:message', {'type': 'warning', 'message': 'Filtering failed! URL not present'});
                    return false;
                }
			});

		});

		this.views.lineList.listBody.find('.listing_share').on('click', function (event) {
			event.stopPropagation();
			event.preventDefault();
		});
	},

	filterElements: function(element, filterURL) {
		this.views.header.filterMenu.slideUp(500);
		this.views.header.filterButton.removeClass('open');
		this.views.lineList.emptyCurrentResults();
		this.getMoreData(element, filterURL);
	},

	// Called by filtering and by the load more button
	getMoreData: function(element, url) {
		var self = this;

		element = $(element);
		var parent = element.closest('.module_content'),
			contentBody = $(parent).find('.toggleable_module_content'),
			listBody = $(parent).find('.L001_line_list'),
			buttonElement = $(parent).find('.L001_line_list_load-more'),
			feedURL = (url) ? url : parent.data('nextPageURL'); // default to the next page URL if not filtering

		if(!this.currentlyLoading) {
			this.currentlyLoading = true;
            parent.addClass('content_loading');
            buttonElement.hide();

			if(feedURL) {
				$.getJSON(feedURL, function(data) {
					var newItems = data.result.items;

					if(newItems && newItems.length) {
						// If we don't get a link back for the next page, we're done
						if(data.result.nextPageURL) {
                            buttonElement.show();
                        }

						contentBody.addClass('no_transition').css('max-height', '');
						contentBody.css('height'); // we need to trigger a render
						contentBody.removeClass('no_transition');

						self.views.lineList.listBody = listBody;
						self.views.lineList.listItems = newItems;
						self.views.lineList.generateListElements();

                        if(self.showLineListAds) {
                            self.generateAds();
                        }

                        Triforce.getMediator().trigger('triforce:pageintouch');
					} else {
						// We're all out of stuff, dont need this button anymore
						buttonElement.hide();
					}

					if(data.result.nextPageURL) {
						parent.data('nextPageURL', data.result.nextPageURL);
					}

					self.currentlyLoading = false;
                    parent.removeClass('content_loading');
				});
			}
		}
	},

    applyCustomColor: function() {
    },

    applyCustomLogic: function() {
    },

    generateAds: function() {
    }
});
/* 
	@name: ENT_TFV300_V2
	@functional: http://confluence.mtvi.com/display/ENT/ENT_TFV300_V2
	@styleguide: http://confluence.mtvi.com/display/ENT/Javascript+Style+Guide
	@author: $Author: kavaliot $
*/

$Crabapple.TriforceView_ent_tfv300_v2 = function() {};
$Crabapple.extend($Crabapple.TriforceView, $Crabapple.TriforceView_ent_tfv300_v2, {
	coreElement: null,
	moduleWrapper: null,

	/**
	 * Generates core element
	 */
	generateCoreElement: function() {
		this.moduleWrapper = this.getModuleWrapper(this.moduleElement); 

		this.coreElement = this.appendDom(this.moduleWrapper, 'div', {
			class: 'module_content s_container'
		});
	},

	/**
	 * Enhances the view(in that case just sets correct coreElement)
	 * @param coreElement
	 */
	enhance: function (coreElement) {
		this.coreElement = coreElement.find('.module_content');
	},

	/**
	 * Sets output(core element) to the page
	 */
	setOutput: function() {
		this.moduleElement = this.replaceModuleElement(this.moduleElement, this.moduleWrapper);

		return this.moduleElement.show();
	}
});
/*
    TFV-334: Header view for M002 / M112 / M116 / M116 / M118 on Spike

    ** IF YOU MAKE CHANGES IN HERE, TEST ON ALL THOSE MODULES! Don't fix one and break another **
 */
$Crabapple.TriforceView_ent_tfv334_vh1_v1_0_0 = function() {};
$Crabapple.extend($Crabapple.TriforceView, $Crabapple.TriforceView_ent_tfv334_vh1_v1_0_0, {

    defaultOptions: {
        'title': 'default',
        'filters': [],
        'allowToggle': false
    },

    /**
     * Extend options from base module
     */
    setOptions: function(container, options) {
        this.options = $.extend({}, this.defaultOptions, this.extendOptions, options);
        this.container = container;
    },

    render: function(parent, options) {

        this.setOptions(parent, options);

        // Wrapper
        this.headerElement = this.appendDom(this.container, 'div', {'class': 'S002_line_list_header s_fonts_moduleHeader'});

        if(this.options.allowToggle) {
            this.headerElement.addClass('toggleable_module_trigger');
        }

        // Left side content
        this.contentElement = this.appendDom(this.headerElement, 'div', {'class': 'content'});

        this.headerText = this.appendDom(this.contentElement, 'span', {
            class: 'header_text section-header-lg'
        }).text(this.options.title);

        // Filter menu button
        if(this.options.filters && this.options.filters.length && !this.options.fullEpisodesOnly) {
            this.filterButton = this.appendDom(this.contentElement, 'div', {'class': 'menu_button closed'});
            this.contentElement.addClass('dropdown-btn');
            this.generateFilterMenu();
        }

        this.countElement = this.appendDom(this.contentElement, 'span', {'class': 'itemCount s_fonts_moduleHeaderCount'});

        if(this.options.count) {
            this.countElement.text(this.options.count + " " + this.options.itemType + "s");
        }

        // Right side loading icon
        if(this.options.allowToggle) {
            this.iconDom = this.appendDom(this.headerElement, 'span', {'class': 'toggleable_header_icon'});
            this.appendDom(this.iconDom, 'span');
        }
    },

    enhance: function(parent, options) {
        this.setOptions(parent, options);

        this.headerElement = parent.find('.S002_line_list_header')
        this.contentElement = this.headerElement.find('.content')
        this.headerText = this.headerElement.find('.header_text');
        this.countElement = this.headerElement.find('.itemCount');

        if(this.options.filters && this.options.filters.length && !this.options.fullEpisodesOnly) {
            this.filterButton = parent.find('.menu_button');
            this.contentElement.addClass('dropdown-btn');
            this.generateFilterMenu();
        }
    },

    generateFilterMenu: function() {
        this.filterMenu = this.appendDom(this.contentElement, 'div', {'class': 'filter_list'});

        var filterList = this.appendDom(this.filterMenu, 'ul'),
            selected;
        for(var i = 0; i < this.options.filters.length; i++) {

            var filter = this.appendDom(filterList, 'li').text(this.options.filters[i].name);

            filter.data('filterData', {
                    url: this.options.filters[i].url,
                    count: this.options.filters[i].count,
                    title: this.options.filters[i].name,
                    selected: this.options.filters[i].selected,
                    subFilters: this.options.filters[i].subFilters
                }
            );

            if (this.options.filters[i].count) {
                this.appendDom(filter, 'span').text(this.options.filters[i].count + ' ' + this.options.itemType + 's');
            }

            if (this.options.filters[i].selected == true) {
                filter.addClass('selected');
                this.headerElement.find('.header_text').text(this.options.filters[i].name);
                this.options.count = this.options.filters[i].count;
            }

            //Hide Full Episodes filter item
            if(this.options.filters[i].name === 'Full Episodes') {
                filter.css('display','none');
            }
        }
    }
});
/*
 TFV-335: Line listing view for M111 / M112 / M116 / M117 / M118

 ** IF YOU MAKE CHANGES IN HERE, TEST ON ALL THOSE MODULES! Don't fix one and break another **
 */

$Crabapple.TriforceView_ent_tfv335_vh1_v1_0_4 = function() {};
$Crabapple.extend($Crabapple.TriforceView, $Crabapple.TriforceView_ent_tfv335_vh1_v1_0_4, {
    defaultOptions: {
        'fullEpLabelText': 'full ep',
        'exclusiveLabelText': 'Extra',
        'hasTVEItems': false
    },

    /**
     * Extend options from base module
     */
    setOptions: function(container, data, options) {
        this.options = $.extend({}, this.defaultOptions, this.extendOptions, options);
        this.container = container;
        this.listItems = data;
        this.adsRendered = 0;
    },

    render: function(parent, data, options) {
        this.setOptions(parent, data, options);

        this.generateContentWrapper();
        this.generateBannerWrapper();
        this.generateListBody();
        this.generateListElements();

        this.generateLoadMoreButton();

        // Do not render the loading functionality w/o a URL to hit
        if(!this.options.nextPageURL) {
            this.loadButton.hide();

        }
        if(this.options.ctaURL) {
            this.generateCTAButton();
        }
    },

    enhance: function(parent, data, options) {

        this.setOptions(parent, data, options);

        this.contentWrapperElement  = parent.find('.toggleable_module_content');
        this.listBody = this.contentWrapperElement.find('.L001_line_list');
        this.loadButton = this.contentWrapperElement.find('.L001_line_list_load-more');

    },

    generateContentWrapper: function() {
        this.contentWrapperElement = this.appendDom(this.container, 'div', {'class': 'toggleable_module_content'});
    },

    generateBannerWrapper: function() {
        //SPAM-1389 - used for TVE msg in m067
        if (this.options.addTVELock && this.options.moduleName == 'm067') {
            this.banner = this.prependDom(this.contentWrapperElement, 'div', {'id': 'tve-banner'});
        } else {
            this.subFilter = this.prependDom(this.container, 'div', {'id': 'sub-filter', 'class': 'col-lg-3'});
            this.banner = this.prependDom(this.container, 'div', {'id': 'tve-banner'});
        }
    },

    generateBannerMessage: function(currentSeason, hasTVE) {
        var _this = this,
            header = this.options.messageHeader,
            deck = this.options.messageBody,
            infoHover = this.options.infoHover,
            selectedSubFilter = (this.options.selectedSubFilter)?this.options.selectedSubFilter:'Available';

        if(this.subFilter){
            this.subFilter.empty();
        }

        if(this.banner) {
            this.banner.empty();
            if(hasTVE){
                if (header != null && deck != null) {
                    var bannerWrap = this.appendDom(this.banner, 'div', {'id': 'tve-wrapper'});
                    var bannerCol = this.appendDom(bannerWrap, 'div', {'class': 'col-lg-12'});
                    this.appendDom(bannerCol, 'div', {'class': 'header'}).html(header);
                    this.appendDom(bannerCol, 'div', {'class': 'deck'}).html(deck);
                }
            }
        }

        if(this.options.displaySubFilter){
            var theFilters = this.options.filters;
            for(var i = 0; i < theFilters.length; i++) {
                if(theFilters[i].name === currentSeason){
                    var subFilterLabel = _this.appendDom(this.subFilter, 'label').text('available episodes'),
                        checkbox = '';
                    if(selectedSubFilter == 'Available'){
                        checkbox = _this.appendDom(subFilterLabel, 'input', {'type':'checkbox', 'id':'available_episodes', 'name':'available_episodes', 'checked':'', 'data-allUrl':theFilters[i].subFilters[0].url, 'data-availableUrl':theFilters[i].subFilters[1].url});
                    } else {
                        checkbox = _this.appendDom(subFilterLabel, 'input', {'type':'checkbox', 'id':'available_episodes', 'name':'available_episodes', 'data-allUrl':theFilters[i].subFilters[0].url, 'data-availableUrl':theFilters[i].subFilters[1].url});
                    }
                    _this.appendDom(_this.appendDom(subFilterLabel, 'label', {'for':'available_episodes'}).text(' '), 'span');

                    break;
                }
            }


        } else {
            if(this.options.moduleName === 'm112'){
                var subFilterLabel = _this.appendDom(this.subFilter, 'label').text('available episodes'),
                    checkbox = _this.appendDom(subFilterLabel, 'input', {'type':'checkbox', 'id':'unavailable_episodes', 'name':'unavailable_episodes', 'checked':''});

                _this.appendDom(_this.appendDom(subFilterLabel, 'label', {'for':'unavailable_episodes'}).text(' '), 'span');

                this.contentWrapperElement.hide();
            }
        }
        _this.appendDom(_this.appendDom(this.subFilter, 'a', {'class':'tooltip', 'href':'#', 'title':infoHover }), 'span', {'class':'info-hover', 'title':''});

    },

    generateListBody: function() {
        var lineListClass = "L001_line_list";

        if(this.options.verticalLayout) {
            lineListClass = lineListClass + " L001_line_list_vertical";
        }

        this.listBody = this.appendDom(this.contentWrapperElement, 'ul', {
            'class': lineListClass + ' s_layouts_lineList s_resets_oldDom_ul'
        });

        this.listBody.data('nowplayingtext', this.options.nowPlayingText);
    },

    /**
     *  Runs through the list of elements in the data and calls the render function.
     *
     *  THIS MODULE WILL RENDER HOWEVER MANY ITEMS THE FEED GIVES IT!  We do not do any checking for correct pagination.
     *  If data bits are missing off whatever element, we'll just simply not render the stuff that needs that data.
     */
    generateListElements: function() {
        var elementsRendered = 0,
            seasonTitle = '',
            hasTVE = false;

        var nowPlayingId = $('.video_player').attr('data-video-mgid') || $('.video_player').attr('data-mgid') || false;

        if(nowPlayingId) {
            nowPlayingId = nowPlayingId.substring(nowPlayingId.lastIndexOf(':') + 1);
        }

        for(var i = 0; i < this.listItems.length; i++) {
            var currentItem = this.listItems[i],
                isNowPlaying = nowPlayingId && nowPlayingId === currentItem.id,
                listItemAttrs = {
                    'class': 'S001_line_list_item s_layouts_lineListItem s_layouts_lineListVideoItem',
                    'data-mgid': currentItem.id
                },
                listItem;

            seasonTitle = (currentItem.season && currentItem.season.title) ? currentItem.season.title : '';

            if(this.options.verticalLayout) {
                listItemAttrs.class = 'S002_line_list_item_vertical s_layouts_lineListItem s_layouts_lineListVideoItem'
            }

            if (isNowPlaying) {
                listItemAttrs.class += ' now_playing';
            }

            // long conditional to check if the item is TVE locked
            if (this.options.addTVELock && currentItem.episodeType == 'fullEpisode' && currentItem.fullEpisode && currentItem.fullEpisode.desktop && currentItem.fullEpisode.desktop.authorization && currentItem.fullEpisode.desktop.authorization.tve) {
                listItemAttrs.class += ' tve_locked';
                currentItem.isTVELocked = true; // so we can easily check if something is TVE locked later
                hasTVE = true;
            }

            if(this.options.itemType == 'clip') {
                listItemAttrs.class += ' clip';
            }

            listItem = this.appendDom(this.listBody, 'li', listItemAttrs);

            var itemURL = (currentItem.url) ? currentItem.url : ((currentItem.canonicalURL) ? currentItem.canonicalURL : '');
            var linkWrapper = this.appendDom(listItem, 'a', {'class': 'link_wrapper', 'href': itemURL});
            this.generateElement(linkWrapper, currentItem, isNowPlaying);

            elementsRendered++;

            // if we show ads, and if we have an interval, and we have rendered the # = to the interval, and we haven't rendered the max # of ads, render an ad
            if(this.options.showLineListAds && this.options.lineListAdInterval && elementsRendered == this.options.lineListAdInterval) {

                // If we have an ad limit (not everything does), and we're over it, just skip this
                if(this.options.lineListMaxAds && this.adsRendered >= this.options.lineListMaxAds) {
                    continue;
                } else {
                    this.appendDom(this.appendDom(this.listBody, 'li'), 'div', {'class':'lineList_ad', 'data-adsize':'300x250'});
                    elementsRendered = 0;
                    this.adsRendered++;
                }
            }
        }

        // add 'next up' if theres no currently playing item. having this ID means were on a video page
        if(nowPlayingId && this.listBody.find('.now_playing').length == 0) {
           $(this.listBody.find('li')[0]).addClass('up_next');
        }

        this.generateBannerMessage(seasonTitle, hasTVE);
        this.generateWhereToWatch();
    },

    generateElement: function(container, item, isNowPlaying) {

        // Thumbnail, duration, and flux items
        var imageWrapClass = 'thumbnail_holder s_layouts_lineListItemImageWrapper';

        if(item.type == "episode") {
            if(item.distPolicy && item.distPolicy.episodeDescriptor == "Full Episode") {
                if(item.season && item.season.episodeAiringOrder && !isNaN(parseInt(item.season.episodeAiringOrder))) {
                    imageWrapClass += ' full_ep';
                }
            }
        }

        var imageWrapAttrs = {
                'class': imageWrapClass
            },
            imageWrap;

        if (isNowPlaying) {
            imageWrapAttrs['data-nowPlayingText'] = this.options.nowPlayingText;
        }
        imageWrap = this.appendDom(container, 'div', imageWrapAttrs);

        // Generate all the pieces of the element
        this.generateLabel(imageWrap, item);
        this.appendImage(imageWrap, item.images[0]);
        this.generateDuration(imageWrap, item);
        this.generateEpisodeContext(container, item); // Season #, Ep #
        this.generateTitle(container, item); // item title
        this.generateCopy(container, item); // item shortDescription

        // episode specific meta
        if(this.options.itemType == 'episode') {

            // generate air date
            if(item.airDateNY && item.airDateNY.shortMonth && item.airDateNY.day && item.airDateNY.shortYear) {
                this.appendDom(container, 'span', {'class':'s_episodeAirDate'}).text("aired " + item.airDateNY.shortMonth + "/" + item.airDateNY.day + "/" + item.airDateNY.shortYear);
            }

            //check for valid policy
            this.checkDistPolicy(item);
            this.generatePolicyMsg(imageWrap, item);


            // DISABLING THE DIST POLICY 'REMAINING DAYS' BUSINESS ! We do not want it anymore according to this ticket SPAM-1469

            // generate distpolicy end date, if applicable
//            if(item.remainingDays) {
//                var days = (item.remainingDays > 1) ? 'days' : 'day';
//                // Only display the availability date if it is in the future
//                if(item.remainingDays < 31) {
//                    this.appendDom(container, 'span', {'class':'item_remaining_days'}).html('available for <strong>'+ item.remainingDays +'</strong> more '+days);
//                }
//            }
        }

        // clip specific meta
        else if(this.options.itemType == 'clip') {
            var text = '';

            if(item.distPolicy && item.publishDate) {
                text = this.dateToString(item.publishDate);
            }

            /*if(item.views) {
                text += " · " + item.views + " views";
            }*/

            if(text) {
                this.appendDom(container, 'span').text(text);
            }
        }

    },

    generateLabel: function(container, item) {
        var labelOutput = '',
            labelNumber;

        /*
         * Not sure why but we use this.options.itemType, but not all feeds contain items of the same type.
         * Using item.type will check each item vs just assuming all are the same. We need this for M156. Since that feed contains a mixed media list. ie. full eps, bonus, recaps, video...
         * Switched the if below from this.options.itemType to item.type == 'episode'
         */
        if(item.type == "episode") {
            // Only generate flags for things tagged as legit full episodes
            if(item.distPolicy && item.distPolicy.episodeDescriptor && item.distPolicy.episodeDescriptor == 'Full Episode') {
                if(item.season && item.season.episodeAiringOrder) {
                    labelOutput = item.season.episodeAiringOrder;
                }
                labelOutput && this.appendDom(container, 'div', {'class': 'item_label s_layouts_lineListBadge s_fonts_badge'}).html("<small>Full Ep</small><span>" +labelOutput + "</span>");
            }
        }
    },

    generateTitle: function(container, item) {
        if(item.title) {
            var title = this.appendDom(container, 'h3', {'class': 's_fonts_lineListHeader'}).text(item.title);
        }

        if(this.options.showInlineDuration && item.duration) {
            this.appendDom(title, 'span', {'class': 's_fonts_lineListDuration'}).text(' '+this.formatDuration(item.duration));
        }
    },

    generateEpisodeContext: function(container, item) {
        var season = '';
        var episode = '';
        if(this.options.showDescription) {
            var description = this.appendDom(container, 'p', {'class': 's_fonts_lineListDescription'});
            this.appendDom(container,'div',{'class':'s_fonts_gradient'});
            if (item.description){
                description.html(item.description);
            }
        }else {
            var contextElement = this.appendDom(container, 'h4');

            // Get the season and episode numbers
            if (item.season) {
                if (item.season.seasonNumber) {
                    season = item.season.seasonNumber;
                }
                if (item.season.episodeAiringOrder) {
                    episode = item.season.episodeAiringOrder.toString();

                    if(episode.charAt(0) == "0") {
                        episode = episode.substr(1); // chop off leading zeroes
                    }

                    episode = "ep " + episode;
                }
             }

            // Assemble the context dom 'season/title #, ep #'
            if (season) {
                var text = '',
                    title = false;

                // Use our season title rather than # if we are told to do so
                if (this.options.useSeasonTitle) {
                    title = item.season.title;
                }

                if (title) {
                    if (episode) {
                        text = title + ", " + episode;
                    } else {
                        text = title;
                    }
                }
                else {
                    title = "Season"

                    if (episode) {
                        text = title + " " + season + ", " + episode;
                    } else {
                        text = title + " " + season;
                    }
                }

                // Implementation of the rules on whether or not we display the descriptor/subtype of an item
                if(item.type == 'episode') {
                    if(item.distPolicy && item.distPolicy.episodeDescriptor && item.distPolicy.episodeDescriptor == 'Special') {
                        text += " · " + item.distPolicy.episodeDescriptor;
                    }
                }
            }

            if(item.type == "clip" || item.type == "video") {
                if(item.subType && item.subType != 'Sneak Peek' && item.subType != 'Reunion' && item.subType != 'Trailer') {
                    if(text) {
                        text += " · " + item.subType;
                    } else {
                        text = item.subType;
                    }
                }
            }

            contextElement.text(text);
        }
    },

    generateCopy: function (container, item) {
        if(this.options.verticalLayout) {
            return; // no description in vertical
        }

        // Prefer the short description, as the regular desc is often crazy long
        this.appendDom(container, 'p').html(((item.shortDescription) ? item.shortDescription : item.description));
    },

    formatDuration: function(duration) {
        if(duration) {
            var minutes = (Math.floor(duration/60) < 10) ? '0' + Math.floor(duration/60) : Math.floor(duration/60);
            var seconds = ((duration % 60) >= 10) ? Math.floor((duration % 60)) : (duration % 60 && (duration % 60 < 10)) ? '0' + Math.floor((duration % 60)) : '00';

            return minutes + ":" + seconds;
        }
    },

    generateDuration: function(container, item) {
        var duration = this.formatDuration(item.duration);

        if(item.type == 'episode' && item.episodeType != 'fullEpisode') {
            return; // no duration for episodes that are not real full episodes (like highlights, or unavailable eps) SPAM-1468
        }

        // Some things will not have durations, dont ask me why
        if(duration) {
            this.appendDom(container, 'div', {'class':'s_layouts_lineListDurationBadge'}).text(duration);
        }

    },

    generateLoadMoreButton: function() {
        this.loadButton = this.appendDom(this.contentWrapperElement, 'div', {'class':'L001_line_list_load-more custom_button_hover s_buttons_button'});
        this.appendDom(this.loadButton, 'span').text('Load More');
    },

    generateCTAButton: function() {
        var ctaButton = this.appendDom(this.contentWrapperElement, 'div', {'class':'cta-button'}),
            ctaButtonLink = this.appendDom(ctaButton, 'a',  {'href':this.options.ctaURL, 'class':'btn btn-cta btn-block'}),
            ctaButtonText = this.appendDom(ctaButtonLink, 'span').text(this.options.ctaText),
            ctaButtonArrow = this.appendDom(ctaButtonText, 'span', {'class':'icon-chevron-right'});
    },

    checkDistPolicy: function(item) {

        //check for desktop and mobile policies
        if(item.fullEpisode && item.fullEpisode.desktop && item.fullEpisode.mobile_web) {
        } else {
            item.policyMsg = 'find out where to watch';
            return false;
        }

        var isMobile = navigator.userAgent.match(/Mobile/i) ? true : false,
            today = new Date(),
            policy = item.fullEpisode.desktop,
            startDate = 0,
            endDate = 0;

        if(isMobile){
            // get mobile distPolicy values
            policy = item.fullEpisode.mobile_web
        }

        //confirm start and end dates for policy
        if(policy.startDateFormatted && policy.endDateFormatted) {
            startDate = new Date (policy.startDateFormatted).getTime();
            endDate = new Date (policy.endDateFormatted).getTime();
        } else {
            item.policyMsg = 'find out where to watch';
            return false;
        }

        if(endDate > startDate){
            if(today.getTime() > endDate){
                //future date
                item.policyMsg = 'coming soon ' + this.dateToString(endDate);
                return false;
            } else if(today.getTime() > startDate && endDate > today.getTime()){
                // VALID
                //item.policyMsg = '';//'valid policy remaining days  '+ this.remainingDays(endDate);
                item.remainingDays = this.remainingDays(endDate);
                return true;
            }
            //Expired policy
            item.policyMsg = 'expired policy';
            return false;
        } else {
            // startDate should never be greater than endDate. INVALID
            item.policyMsg = 'invalid policy';
            return false;
        }
    },

    remainingDays: function(milli){
        var now = Math.floor( new Date().getTime() / (3600*24*1000)); //days as integer from..
            end = Math.floor( milli / (3600*24*1000)); //days as integer from..

        return Math.floor(end - now); // exact dates
    },

    generatePolicyMsg: function(container, item) {
        if(this.options.itemType == "episode" && item.policyMsg) {
            this.appendDom(this.appendDom(container, 'div', {'class': 'item_overlay'}),
                'div', {'class': 'item_policy'}).html('<span>'+item.policyMsg+'</span>');
        }
    },

    emptyCurrentResults: function() {
        this.listBody.empty();
        if(this.seasonWatchContainer) {
            $(this.seasonWatchContainer).remove();
            this.seasonWatchContainer = null;
        }
    },

    generateWhereToWatch: function(){
        var _this = this,
            seasonHeader = this.options.seasonMessageHeader,
            seasonDeck = this.options.seasonMessageBody;

        if(seasonHeader && seasonDeck){

            if(this.seasonWatchContainer == null || this.seasonWatchContainer == undefined){
                this.seasonWatchContainer = this.appendDom(this.container, 'div', {'id': 'season_watch_container'});
            } else {
                this.seasonWatchContainer.empty();
            }

            this.appendDom(this.seasonWatchContainer , 'div', {'class':'header'}).html(seasonHeader);
            this.appendDom(this.seasonWatchContainer , 'div', {'class':'deck'}).html(seasonDeck);
        }
    }
});
/**
 * \addToGroup Spike\Controllers\Modules\ENT_M101_VH1;
 * ENT_M101_VH1 - Series Episodes Vertical
 * https://confluence.mtvi.com/display/ENT/ENT_M101_VH1+-+Series+Clips+Horizontal
 */

$Crabapple.TriforceModule_ent_m101_vh1_V1_0_1 = function() {};
$Crabapple.extend($Crabapple.TriforceModule_ent_tfc305_v2_1_1, $Crabapple.TriforceModule_ent_m101_vh1_V1_0_1, {
    viewName: '$Crabapple.TriforceView_ent_tfv300_v2',
    addTVELock: true,
    allowToggle: false,
    showInlineDuration: false,
    showLineListAds: true,
    lineListAdInterval: 5,
    ctaText: 'browse all clips',

    viewsListOrdered: [
        {
            name: 'header',
            viewName: '$Crabapple.TriforceView_ent_tfv334_vh1_v1_0_0'
        },
        {
            name: 'lineList',
            viewName: '$Crabapple.TriforceView_ent_tfv335_vh1_v1_0_4'
        }
    ],

    initializeView: function() {
        var feed = this.feedResponse.result;


        if (!feed.items || !feed.items.length) {
            this.forceHide = true;
            return;
        }

        // Set initial values
        this.nextPageURL = feed.nextPageURL || '';
        this.ctaURL = feed.videoGuideURL || '';
        this.filters = (feed.filters) ? feed.filters : null;
        this.itemType = feed.itemType;
        this.showLineListAds = this.showLineListAds || false;
        this.lineListAdInterval = this.lineListAdInterval || 0;

        var lineListOptions = {
            'itemType': this.itemType,
            'nextPageURL': this.nextPageURL,
            'ctaURL': this.ctaURL,
            'ctaText': this.ctaText,
            'addTVELock': this.addTVELock,
            'showInlineDuration': this.showInlineDuration,
            'showLineListAds': this.showLineListAds,
            'lineListAdInterval': this.lineListAdInterval,
            'itemType': 'clip'
        };

        if(feed.configParams && feed.configParams.displaySeasonTitle) {
            lineListOptions.useSeasonTitle = true;
        }

        this.view.generateCoreElement();
        // render the header
        this.views.header.render(this.view.coreElement, {
            'title': feed.promo.headline || 'Latest Video Clips'
        });
        this.views.lineList.render(this.view.coreElement, feed.items, lineListOptions);

        this.moduleElement = this.view.setOutput();
    },
    applyCustomColor: function() {
        var customColors = window.$MTV.triforce.colorPicker(),
            moduleName = this.feedResponse.result.promo.promoType.toLowerCase(),
            shortId = "promo_" + this.feedResponse.result.promo.shortId,
            htmlString = "";

        this.view.moduleElement.addClass(shortId);

        if(customColors.primaryColor && customColors.primaryTextColor) {
            htmlString  += "." + moduleName + "." + shortId + " .btn {background-color: " + customColors.primaryColor + "; color: " + customColors.primaryTextColor + "}";
            htmlString  += "." + moduleName + "." + shortId + " .S001_line_list_item .link_wrapper:hover h3, ." + moduleName + "." + shortId + " .S001_line_list_item .link_wrapper:hover h4 { color: rgba(0, 0, 0, 0.6); }";
        }

        if (htmlString != "") {
            this.view.moduleElement.addClass(shortId);
            var styleElement = document.getElementById(moduleName + '_' + shortId +'_colorsPallete') || document.createElement('style');
            styleElement.id = moduleName + '_' + shortId + '_colorsPallete';
            styleElement.innerHTML = htmlString;
            document.head.appendChild(styleElement);
        }
    },

    applyCustomLogic: function() {
            //this.generateAds();
    }
});